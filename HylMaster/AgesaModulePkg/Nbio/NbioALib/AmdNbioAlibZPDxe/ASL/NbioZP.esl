/**
 * @file
 *
 * ALIB ASL library
 *
 *
 *
 * @xrefitem bom "File Content Label" "Release Content"
 * @e project:     AGESA
 * @e sub-project: NBIO
 * @e \$Revision: 324183 $   @e \$Date: 2015-08-13 11:24:44 +0800 (Thu, 13 Aug 2015) $
 *
 */
/*
*****************************************************************************
*
* 
* Copyright 2016 - 2019 CHENGDU HAIGUANG IC DESIGN CO., LTD. All Rights Reserved.
* 
* HYGON is granting you permission to use this software (the Materials)
* pursuant to the terms and conditions of your Software License Agreement
* with HYGON.  This header does *NOT* give you permission to use the Materials
* or any rights under HYGON's intellectual property.  Your use of any portion
* of these Materials shall constitute your acceptance of those terms and
* conditions.  If you do not agree to the terms and conditions of the Software
* License Agreement, please do not use any portion of these Materials.
* 
* CONFIDENTIALITY:  The Materials and all other information, identified as
* confidential and provided to you by HYGON shall be kept confidential in
* accordance with the terms and conditions of the Software License Agreement.
* 
* LIMITATION OF LIABILITY: THE MATERIALS AND ANY OTHER RELATED INFORMATION
* PROVIDED TO YOU BY HYGON ARE PROVIDED "AS IS" WITHOUT ANY EXPRESS OR IMPLIED
* WARRANTY OF ANY KIND, INCLUDING BUT NOT LIMITED TO WARRANTIES OF
* MERCHANTABILITY, NONINFRINGEMENT, TITLE, FITNESS FOR ANY PARTICULAR PURPOSE,
* OR WARRANTIES ARISING FROM CONDUCT, COURSE OF DEALING, OR USAGE OF TRADE.
* IN NO EVENT SHALL HYGON OR ITS LICENSORS BE LIABLE FOR ANY DAMAGES WHATSOEVER
* (INCLUDING, WITHOUT LIMITATION, DAMAGES FOR LOSS OF PROFITS, BUSINESS
* INTERRUPTION, OR LOSS OF INFORMATION) ARISING OUT OF HYGON'S NEGLIGENCE,
* GROSS NEGLIGENCE, THE USE OF OR INABILITY TO USE THE MATERIALS OR ANY OTHER
* RELATED INFORMATION PROVIDED TO YOU BY HYGON, EVEN IF HYGON HAS BEEN ADVISED OF
* THE POSSIBILITY OF SUCH DAMAGES.  BECAUSE SOME JURISDICTIONS PROHIBIT THE
* EXCLUSION OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES,
* THE ABOVE LIMITATION MAY NOT APPLY TO YOU.
* 
* HYGON does not assume any responsibility for any errors which may appear in
* the Materials or any other related information provided to you by HYGON, or
* result from use of the Materials or any related information.
* 
* You agree that you will not reverse engineer or decompile the Materials.
* 
* NO SUPPORT OBLIGATION: HYGON is not obligated to furnish, support, or make any
* further information, software, technical information, know-how, or show-how
* available to you.  Additionally, HYGON retains the right to modify the
* Materials at any time, without notice, and is not obligated to provide such
* modified Materials to you.
* 
* AMD GRANT HYGON DECLARATION: ADVANCED MICRO DEVICES, INC.(AMD) granted HYGON has
* the right to redistribute HYGON's Agesa version to BIOS Vendors and HYGON has
* the right to make the modified version available for use with HYGON's PRODUCT.
* ***************************************************************************
*
*/

  /*----------------------------------------------------------------------------------------*/
  /**
   *  SMU Service request
   *
   *  Arg0 - Smu service ID
   *  Arg1 - Smu service parameters
   *
   */
  Method (procSmuServiceReq, 2, Serialized) {
    ALIB_DEBUG (" procSmuServiceReq Enter")

    // Define Arg1 for function 0
    CreateDWordField(Arg1,  0, varSmuParam0)           // SMU service Request Argument 0
    CreateDWordField(Arg1,  4, varSmuParam1)           // SMU service Request Argument 1
    CreateDWordField(Arg1,  8, varSmuParam2)           // SMU service Request Argument 2
    CreateDWordField(Arg1, 12, varSmuParam3)           // SMU service Request Argument 3
    CreateDWordField(Arg1, 16, varSmuParam4)           // SMU service Request Argument 4
    CreateDWordField(Arg1, 20, varSmuParam5)           // SMU service Request Argument 5

    ALIB_DEBUG (Concatenate ("  Smu service id = ", ToHexString (Arg0), ADBG))
    ALIB_DEBUG (Concatenate ("  Smu service argument0 = ", ToHexString (varSmuParam0), ADBG))
    ALIB_DEBUG (Concatenate ("  Smu service argument1 = ", ToHexString (varSmuParam1), ADBG))
    ALIB_DEBUG (Concatenate ("  Smu service argument2 = ", ToHexString (varSmuParam2), ADBG))
    ALIB_DEBUG (Concatenate ("  Smu service argument3 = ", ToHexString (varSmuParam3), ADBG))
    ALIB_DEBUG (Concatenate ("  Smu service argument4 = ", ToHexString (varSmuParam4), ADBG))
    ALIB_DEBUG (Concatenate ("  Smu service argument5 = ", ToHexString (varSmuParam5), ADBG))

    // 1 Clear Response
    ALIB_DEBUG ("--Clear Response--")
    Store (0, bfSmuMessageResponse)

    while (LNotEqual (bfSmuMessageResponse, 0)) {
    }

    // 2 Write message arguments
    Store (varSmuParam0, bfSmuMessageArgument0)
    Store (varSmuParam1, bfSmuMessageArgument1)
    Store (varSmuParam2, bfSmuMessageArgument2)
    Store (varSmuParam3, bfSmuMessageArgument3)
    Store (varSmuParam4, bfSmuMessageArgument4)
    Store (varSmuParam5, bfSmuMessageArgument5)

    // 3 Write message ID
    Store (Arg0, bfSmuMessageId)

    // 4 Poll Response until non-zero
    while (LEqual (bfSmuMessageResponse, 0)) {
        ALIB_DEBUG ("--Poll Response until non-zero--")
    }

    // 5 Read updated SMU message arguments if necessary
    // Store (bfSmuMessageArgument0, varSmuParam0)
    // Store (bfSmuMessageArgument1, varSmuParam1)
    // Store (bfSmuMessageArgument2, varSmuParam2)
    // Store (bfSmuMessageArgument3, varSmuParam3)
    // Store (bfSmuMessageArgument4, varSmuParam4)
    // Store (bfSmuMessageArgument5, varSmuParam5)

    ALIB_DEBUG ("procSmuServiceReq Exit")
  }


  /*----------------------------------------------------------------------------------------*/
  /**
   *  DXIO Service Request Interface
   *
   *
   *  Arg0 - SMU Request Arg0 (DXIO Service Request #)
   *  Arg1 - SMU Request Arg1
   *  Arg2 - SMU Request Arg2
   *  Arg3 - SMU Request Arg3
   */
    Method (procDxioServiceReq, 5) {
      if (LEqual (Arg0, OFF)) {
        ALIB_DEBUG ("Disable BAPM and NBDPM")
       // Send msg to smu services to apply voltage change.
        // Local7 as an input buffer and passed to procSmuServiceReq
        Store (Buffer (24) {}, Local7)
        CreateDWordField (Local7, 0,  varSmuArg0)
        CreateDWordField (Local7, 4,  varSmuArg1)
        CreateDWordField (Local7, 8,  varSmuArg2)
        CreateDWordField (Local7, 12, varSmuArg3)
        CreateDWordField (Local7, 16, varSmuArg4)
        CreateDWordField (Local7, 20, varSmuArg5)
        Store (Arg0, varSmuArg0)
        Store (Arg1, varSmuArg1)
        Store (Arg2, varSmuArg2)
        Store (Arg3, varSmuArg3)
        procSmuServiceReq (0xF, Local7)

      }
    }

  /*----------------------------------------------------------------------------------------*/
  /**
   *  Manage Mem PS
   *
   *
   *  Arg0 - ON/OFF
   *
   */
   Method (procMemePSManage, 1) {
    // Store (bfSwNbPstateLoDis, Local0)
    if (LEqual (Arg0, OFF)) {
      // Store (0x1, bfSwNbPstateLoDis)
      ALIB_DEBUG (" Mem PS OFF!!!")
    } else {
      // Store (0x0, bfSwNbPstateLoDis)
      ALIB_DEBUG (" Mem PS ON!!!")
    }
     return (Local0)
   }

  /*----------------------------------------------------------------------------------------*/
  /**
   *  Manage BAPM
   *
   *
   *  Arg0 - ON/OFF (ON means restore original state)
   */
    Method (procBapmManage, 1) {
      if (LEqual (Arg0, OFF)) {
        ALIB_DEBUG ("Disable BAPM and NBDPM")
       // Send msg to smu services to apply voltage change.
        // Local7 as an input buffer and passed to procSmuServiceReq
        //Store (Buffer (24) {}, Local7)
        //CreateDWordField (Local7, 0,  varSmuArg0)
        //CreateDWordField (Local7, 4,  varSmuArg1)
        //CreateDWordField (Local7, 8,  varSmuArg2)
        //CreateDWordField (Local7, 12, varSmuArg3)
        //CreateDWordField (Local7, 16, varSmuArg4)
        //CreateDWordField (Local7, 20, varSmuArg5)
        //Store (0x0801, varSmuArg0)
        // procSmuServiceReq (0x60, Local7)
      }
    }
