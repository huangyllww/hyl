/**
 * @file
 *
 * ALIB ASL library
 *
 *
 *
 * @xrefitem bom "File Content Label" "Release Content"
 * @e project:     AGESA
 * @e sub-project: NBIO
 * @e \$Revision: 61089 $   @e \$Date: 2011-10-31 10:31:02 -0700 (Mon, 31 Oct 2011) $
 *
 */
/*
*****************************************************************************
*
* 
* Copyright 2016 - 2019 CHENGDU HAIGUANG IC DESIGN CO., LTD. All Rights Reserved.
* 
* HYGON is granting you permission to use this software (the Materials)
* pursuant to the terms and conditions of your Software License Agreement
* with HYGON.  This header does *NOT* give you permission to use the Materials
* or any rights under HYGON's intellectual property.  Your use of any portion
* of these Materials shall constitute your acceptance of those terms and
* conditions.  If you do not agree to the terms and conditions of the Software
* License Agreement, please do not use any portion of these Materials.
* 
* CONFIDENTIALITY:  The Materials and all other information, identified as
* confidential and provided to you by HYGON shall be kept confidential in
* accordance with the terms and conditions of the Software License Agreement.
* 
* LIMITATION OF LIABILITY: THE MATERIALS AND ANY OTHER RELATED INFORMATION
* PROVIDED TO YOU BY HYGON ARE PROVIDED "AS IS" WITHOUT ANY EXPRESS OR IMPLIED
* WARRANTY OF ANY KIND, INCLUDING BUT NOT LIMITED TO WARRANTIES OF
* MERCHANTABILITY, NONINFRINGEMENT, TITLE, FITNESS FOR ANY PARTICULAR PURPOSE,
* OR WARRANTIES ARISING FROM CONDUCT, COURSE OF DEALING, OR USAGE OF TRADE.
* IN NO EVENT SHALL HYGON OR ITS LICENSORS BE LIABLE FOR ANY DAMAGES WHATSOEVER
* (INCLUDING, WITHOUT LIMITATION, DAMAGES FOR LOSS OF PROFITS, BUSINESS
* INTERRUPTION, OR LOSS OF INFORMATION) ARISING OUT OF HYGON'S NEGLIGENCE,
* GROSS NEGLIGENCE, THE USE OF OR INABILITY TO USE THE MATERIALS OR ANY OTHER
* RELATED INFORMATION PROVIDED TO YOU BY HYGON, EVEN IF HYGON HAS BEEN ADVISED OF
* THE POSSIBILITY OF SUCH DAMAGES.  BECAUSE SOME JURISDICTIONS PROHIBIT THE
* EXCLUSION OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES,
* THE ABOVE LIMITATION MAY NOT APPLY TO YOU.
* 
* HYGON does not assume any responsibility for any errors which may appear in
* the Materials or any other related information provided to you by HYGON, or
* result from use of the Materials or any related information.
* 
* You agree that you will not reverse engineer or decompile the Materials.
* 
* NO SUPPORT OBLIGATION: HYGON is not obligated to furnish, support, or make any
* further information, software, technical information, know-how, or show-how
* available to you.  Additionally, HYGON retains the right to modify the
* Materials at any time, without notice, and is not obligated to provide such
* modified Materials to you.
* 
* AMD GRANT HYGON DECLARATION: ADVANCED MICRO DEVICES, INC.(AMD) granted HYGON has
* the right to redistribute HYGON's Agesa version to BIOS Vendors and HYGON has
* the right to make the modified version available for use with HYGON's PRODUCT.
* ***************************************************************************
*
*/

/*----------------------------------------------------------------------------------------*/
/**
 *  Port hotplug
 *
 *  Arg0 - Hotplug scenario
 *  Arg1 - Port BDF
 */
Method (procHotplug, 2) {
  ALIB_DEBUG (" Hotplug Enter ")
  Store (0, Local0)
  while (LLess (Local0, NUM_OF_PORTS)) {
    Store (procHotplugCheckPort (Local0, Arg1), Local1)
    if (LEqual (Local1, TRUE)) {
      Store (procHotplugPort (Local0, Arg0), Local1)
      break
    }
    Increment (Local0)
  }
  ALIB_DEBUG (" Hotplug return buffer")
  Store (Buffer (10) {}, Local7)
  CreateWordField (Local7, 0x0, varReturnBufferLength)
  CreateByteField (Local7, 0x2, varReturnStatus)
  CreateByteField (Local7, 0x3, varReturnDeviceStatus)
  Store (0x4, varReturnBufferLength)
  Store (0x0, varReturnStatus)
  Store (Local1, varReturnDeviceStatus)
  ALIB_DEBUG (" Hotplug Exit")
  return (Local7)
}

/*----------------------------------------------------------------------------------------*/
/**
 *  Locate hotplug port
 *
 *  Arg0 - port index
 *  Arg1 - BDF of child device
 */
Method (procHotplugCheckPort, 2) {
ALIB_DEBUG (Concatenate (" HotplugCheckPort Port  ", ToHexString (Arg0), ADBG))
#ifdef BR0
  if (LEqual(Arg0, 0)) {
    return (BR0.procPcieIsPortHotplug (Arg1))
  }
#endif
#ifdef BR1
  if (LEqual(Arg0, 1)) {
    return (BR1.procPcieIsPortHotplug (Arg1))
  }
#endif
#ifdef BR2
  if (LEqual(Arg0, 2)) {
    return (BR2.procPcieIsPortHotplug (Arg1))
  }
#endif
#ifdef BR3
  if (LEqual(Arg0, 3)) {
    return (BR3.procPcieIsPortHotplug (Arg1))
  }
#endif
#ifdef BR4
  if (LEqual(Arg0, 4)) {
    return (BR4.procPcieIsPortHotplug (Arg1))
  }
#endif
#ifdef BR5
  if (LEqual(Arg0, 5)) {
    return (BR5.procPcieIsPortHotplug (Arg1))
  }
#endif
#ifdef BR6
  if (LEqual(Arg0, 6)) {
    return (BR6.procPcieIsPortHotplug (Arg1))
  }
#endif
#ifdef BR7
  if (LEqual(Arg0, 7)) {
    return (BR7.procPcieIsPortHotplug (Arg1))
  }
#endif
#ifdef BR8
  if (LEqual(Arg0, 8)) {
    return (BR8.procPcieIsPortHotplug (Arg1))
  }
#endif
#ifdef BR9
  if (LEqual(Arg0, 9)) {
    return (BR9.procPcieIsPortHotplug (Arg1))
  }
#endif
#ifdef BR10
  if (LEqual(Arg0, 10)) {
    return (BR10.procPcieIsPortHotplug (Arg1))
  }
#endif
#ifdef BR11
  if (LEqual(Arg0, 11)) {
    return (BR11.procPcieIsPortHotplug (Arg1))
  }
#endif
#ifdef BR12
  if (LEqual(Arg0, 12)) {
    return (BR12.procPcieIsPortHotplug (Arg1))
  }
#endif
#ifdef BR13
  if (LEqual(Arg0, 13)) {
    return (BR13.procPcieIsPortHotplug (Arg1))
  }
#endif
#ifdef BR14
  if (LEqual(Arg0, 14)) {
    return (BR14.procPcieIsPortHotplug (Arg1))
  }
#endif
#ifdef BR15
  if (LEqual(Arg0, 15)) {
    return (BR15.procPcieIsPortHotplug (Arg1))
  }
#endif
}

/*----------------------------------------------------------------------------------------*/
/**
 *  Locate hotplug port
 *
 *  Arg0 - port index
 *  Arg1 - hotplug action
 */
Method (procHotplugPort, 2) {
ALIB_DEBUG (Concatenate (" HotplugPort Port  ", ToHexString (Arg0), ADBG))
#ifdef BR0
  if (LEqual(Arg0,0)) {
    return (BR0.procPciePortHotplug (Arg1))
  }
#endif
#ifdef BR1
  if (LEqual(Arg0, 1)) {
    return (BR1.procPciePortHotplug (Arg1))
  }
#endif
#ifdef BR2
  if (LEqual(Arg0, 2)) {
    return (BR2.procPciePortHotplug (Arg1))
  }
#endif
#ifdef BR3
  if (LEqual(Arg0, 3)) {
    return (BR3.procPciePortHotplug (Arg1))
  }
#endif
#ifdef BR4
  if (LEqual(Arg0, 4)) {
    return (BR4.procPciePortHotplug (Arg1))
  }
#endif
#ifdef BR5
  if (LEqual(Arg0, 5)) {
    return (BR5.procPciePortHotplug (Arg1))
  }
#endif
#ifdef BR6
  if (LEqual(Arg0, 6)) {
    return (BR6.procPciePortHotplug (Arg1))
  }
#endif
#ifdef BR7
  if (LEqual(Arg0, 7)) {
    return (BR7.procPciePortHotplug (Arg1))
  }
#endif
#ifdef BR8
  if (LEqual(Arg0, 8)) {
    return (BR8.procPciePortHotplug (Arg1))
  }
#endif
#ifdef BR9
  if (LEqual(Arg0, 9)) {
    return (BR9.procPciePortHotplug (Arg1))
  }
#endif
#ifdef BR10
  if (LEqual(Arg0, 10)) {
    return (BR10.procPciePortHotplug (Arg1))
  }
#endif
#ifdef BR11
  if (LEqual(Arg0, 11)) {
    return (BR11.procPciePortHotplug (Arg1))
  }
#endif
#ifdef BR12
  if (LEqual(Arg0, 12)) {
    return (BR12.procPciePortHotplug (Arg1))
  }
#endif
#ifdef BR13
  if (LEqual(Arg0, 13)) {
    return (BR13.procPciePortHotplug (Arg1))
  }
#endif
#ifdef BR14
  if (LEqual(Arg0, 14)) {
    return (BR14.procPciePortHotplug (Arg1))
  }
#endif
#ifdef BR15
  if (LEqual(Arg0, 15)) {
    return (BR15.procPciePortHotplug (Arg1))
  }
#endif
}

