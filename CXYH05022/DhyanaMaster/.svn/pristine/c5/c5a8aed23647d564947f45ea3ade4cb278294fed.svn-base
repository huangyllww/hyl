/*****************************************************************************
 *
 * 
 * Copyright 2016 - 2019 CHENGDU HAIGUANG IC DESIGN CO., LTD. All Rights Reserved.
 * 
 * HYGON is granting you permission to use this software (the Materials)
 * pursuant to the terms and conditions of your Software License Agreement
 * with HYGON.  This header does *NOT* give you permission to use the Materials
 * or any rights under HYGON's intellectual property.  Your use of any portion
 * of these Materials shall constitute your acceptance of those terms and
 * conditions.  If you do not agree to the terms and conditions of the Software
 * License Agreement, please do not use any portion of these Materials.
 * 
 * CONFIDENTIALITY:  The Materials and all other information, identified as
 * confidential and provided to you by HYGON shall be kept confidential in
 * accordance with the terms and conditions of the Software License Agreement.
 * 
 * LIMITATION OF LIABILITY: THE MATERIALS AND ANY OTHER RELATED INFORMATION
 * PROVIDED TO YOU BY HYGON ARE PROVIDED "AS IS" WITHOUT ANY EXPRESS OR IMPLIED
 * WARRANTY OF ANY KIND, INCLUDING BUT NOT LIMITED TO WARRANTIES OF
 * MERCHANTABILITY, NONINFRINGEMENT, TITLE, FITNESS FOR ANY PARTICULAR PURPOSE,
 * OR WARRANTIES ARISING FROM CONDUCT, COURSE OF DEALING, OR USAGE OF TRADE.
 * IN NO EVENT SHALL HYGON OR ITS LICENSORS BE LIABLE FOR ANY DAMAGES WHATSOEVER
 * (INCLUDING, WITHOUT LIMITATION, DAMAGES FOR LOSS OF PROFITS, BUSINESS
 * INTERRUPTION, OR LOSS OF INFORMATION) ARISING OUT OF HYGON'S NEGLIGENCE,
 * GROSS NEGLIGENCE, THE USE OF OR INABILITY TO USE THE MATERIALS OR ANY OTHER
 * RELATED INFORMATION PROVIDED TO YOU BY HYGON, EVEN IF HYGON HAS BEEN ADVISED OF
 * THE POSSIBILITY OF SUCH DAMAGES.  BECAUSE SOME JURISDICTIONS PROHIBIT THE
 * EXCLUSION OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES,
 * THE ABOVE LIMITATION MAY NOT APPLY TO YOU.
 * 
 * HYGON does not assume any responsibility for any errors which may appear in
 * the Materials or any other related information provided to you by HYGON, or
 * result from use of the Materials or any related information.
 * 
 * You agree that you will not reverse engineer or decompile the Materials.
 * 
 * NO SUPPORT OBLIGATION: HYGON is not obligated to furnish, support, or make any
 * further information, software, technical information, know-how, or show-how
 * available to you.  Additionally, HYGON retains the right to modify the
 * Materials at any time, without notice, and is not obligated to provide such
 * modified Materials to you.
 * 
 * AMD GRANT HYGON DECLARATION: ADVANCED MICRO DEVICES, INC.(AMD) granted HYGON has
 * the right to redistribute HYGON's Agesa version to BIOS Vendors and HYGON has
 * the right to make the modified version available for use with HYGON's PRODUCT.
 *
 ***************************************************************************/


#include <Guid/HiiPlatformSetupFormset.h>
#include "AmdCbsFormID.h"
#include <Guid/AmdCbsConfig.h>
#include "AmdCbsVariable.h"

#define EFI_AMD_CBS_CLASS 0x55
#define SHOW_ALL_CBS 1

formset
  guid      = FORMSET_ID_GUID_AMD_CBS,
  title     = STRING_TOKEN(AMD_CBS_STR_CBS_ROOT_SECTION),
  help      = STRING_TOKEN(AMD_CBS_STR_BLANK),
  class     = EFI_AMD_CBS_CLASS, subclass = 0,

  varstore CBS_CONFIG,                        // This is the data structure type
    varid = CBS_CONFIGURATION_VARSTORE_ID,    // Optional VarStore ID
    name  = AmdSetup,                         // Define referenced name in vfr
    guid  = CBS_SYSTEM_CONFIGURATION_GUID;    // GUID of this buffer storage
  //
  // form - CBS_ROOT
  //
  form

    formid        = SETUP_CBS_ROOT_LABLE,

    title         = STRING_TOKEN (AMD_CBS_STR_CBS_ROOT_SECTION);

    subtitle text = STRING_TOKEN (AMD_CBS_STR_CBS_ROOT_SECTION);
    subtitle text = STRING_TOKEN (AMD_CBS_STR_BLANK);

    goto SETUP_ZEN_COMMON_OPTIONS_LABLE,
      prompt      = STRING_TOKEN (AMD_CBS_STR_ZEN_COMMON_OPTIONS_SECTION),
      help        = STRING_TOKEN (AMD_CBS_STR_ZEN_COMMON_OPTIONS_SECTION);

    goto SETUP_DF_COMMON_OPTIONS_LABLE,
      prompt      = STRING_TOKEN (AMD_CBS_STR_DF_COMMON_OPTIONS_SECTION),
      help        = STRING_TOKEN (AMD_CBS_STR_DF_COMMON_OPTIONS_SECTION);

    goto SETUP_UMC_COMMON_OPTIONS_LABLE,
      prompt      = STRING_TOKEN (AMD_CBS_STR_UMC_COMMON_OPTIONS_SECTION),
      help        = STRING_TOKEN (AMD_CBS_STR_UMC_COMMON_OPTIONS_SECTION);

    goto SETUP_NBIO_COMMON_OPTIONS_LABLE,
      prompt      = STRING_TOKEN (AMD_CBS_STR_NBIO_COMMON_OPTIONS_SECTION),
      help        = STRING_TOKEN (AMD_CBS_STR_NBIO_COMMON_OPTIONS_SECTION);

    goto SETUP_FCH_COMMON_OPTIONS_LABLE,
      prompt      = STRING_TOKEN (AMD_CBS_STR_FCH_COMMON_OPTIONS_SECTION),
      help        = STRING_TOKEN (AMD_CBS_STR_FCH_COMMON_OPTIONS_SECTION);

    #ifdef PROMONTORY_SUPPORT
    suppressif SHOW_ALL_CBS==0;
      goto SETUP_PROMONTORY_COMMON_OPTIONS_LABLE,
        prompt      = STRING_TOKEN (AMD_CBS_STR_PROMONTORY_COMMON_OPTIONS_SECTION),
        help        = STRING_TOKEN (AMD_CBS_STR_PROMONTORY_COMMON_OPTIONS_SECTION);
    endif;
    #endif

    // Display Condition: CbsComboFlag=2|CbsComboFlag=4
    suppressif NOT ideqval CBS_CONFIG.CbsComboFlag == 2
           AND NOT ideqval CBS_CONFIG.CbsComboFlag == 4 OR SHOW_ALL_CBS==0;
      goto SETUP_NTB_COMMON_OPTIONS_LABLE,
        prompt      = STRING_TOKEN (AMD_CBS_STR_NTB_COMMON_OPTIONS_SECTION),
        help        = STRING_TOKEN (AMD_CBS_STR_NTB_COMMON_OPTIONS_SECTION);
    endif;

    // Display Condition: CbsComboFlag = Unknown
    suppressif NOT ideqval CBS_CONFIG.CbsComboFlag == 5 OR SHOW_ALL_CBS==0;
      // Combo CBS
      // No help string
      oneof
        varid       = CBS_CONFIG.CbsComboFlag,
        prompt      = STRING_TOKEN (AMD_CBS_STR_COMBO_CBS),
        help        = STRING_TOKEN (AMD_CBS_STR_COMBO_CBS_HELP),
        option text = STRING_TOKEN (AMD_CBS_STR_0),               value = 0,    flags = 0 | RESET_REQUIRED;
        option text = STRING_TOKEN (AMD_CBS_STR_1),               value = 1,    flags = 0 | RESET_REQUIRED;
        option text = STRING_TOKEN (AMD_CBS_STR_2),               value = 2,    flags = DEFAULT | RESET_REQUIRED | MANUFACTURING;
        option text = STRING_TOKEN (AMD_CBS_STR_3),               value = 3,    flags = 0 | RESET_REQUIRED;
        option text = STRING_TOKEN (AMD_CBS_STR_4),               value = 4,    flags = 0 | RESET_REQUIRED;
        option text = STRING_TOKEN (AMD_CBS_STR_UNKNOWN),         value = 5,    flags = 0 | RESET_REQUIRED;
      endoneof;
    endif;

    suppressif TRUE;
      // Display RDSEED and RDRAND Control Option
      // No help string
      oneof
        varid       = CBS_CONFIG.CbsCmnCpuRdseedRdrandCap,
        prompt      = STRING_TOKEN (AMD_CBS_STR_CPU_RDSEED_RDRAND_DISPLAY_CONTROL),
        help        = STRING_TOKEN (AMD_CBS_STR_CPU_RDSEED_RDRAND_DISPLAY_CONTROL_HELP),
        option text = STRING_TOKEN (AMD_CBS_STR_0),               value = 0,    flags = 0 | RESET_REQUIRED;
        option text = STRING_TOKEN (AMD_CBS_STR_1),               value = 1,    flags = DEFAULT | RESET_REQUIRED;
      endoneof;
      
      // Display SMEE Control Option
      // No help string
      oneof
        varid       = CBS_CONFIG.CbsCmnCpuSmeeCap,
        prompt      = STRING_TOKEN (AMD_CBS_STR_CPU_SMEE_DISPLAY_CONTROL),
        help        = STRING_TOKEN (AMD_CBS_STR_CPU_SMEE_DISPLAY_CONTROL_HELP),
        option text = STRING_TOKEN (AMD_CBS_STR_0),               value = 0,    flags = 0 | RESET_REQUIRED;
        option text = STRING_TOKEN (AMD_CBS_STR_1),               value = 1,    flags = DEFAULT | RESET_REQUIRED;
      endoneof;
    endif;
  endform;


    //
    // form - Zen Common Options
    //
    form

      formid        = SETUP_ZEN_COMMON_OPTIONS_LABLE,

      title         = STRING_TOKEN (AMD_CBS_STR_ZEN_COMMON_OPTIONS_SECTION);

      subtitle text = STRING_TOKEN (AMD_CBS_STR_ZEN_COMMON_OPTIONS_SECTION);
      subtitle text = STRING_TOKEN (AMD_CBS_STR_BLANK);

      suppressif SHOW_ALL_CBS==0;
        // RedirectForReturnDis
        // From a workaround for GCC/C000005 issue for XV Core on CZ A0, setting MSRC001_1029 Decode Configuration (DE_CFG) bit 14 [DecfgNoRdrctForReturns] to 1
        oneof
          varid       = CBS_CONFIG.CbsCmnCpuGenWA05,
          prompt      = STRING_TOKEN (AMD_CBS_STR_REDIRECTFORRETURNDIS),
          help        = STRING_TOKEN (AMD_CBS_STR_REDIRECTFORRETURNDIS_HELP),
          option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xFF, flags = 0 | RESET_REQUIRED | MANUFACTURING;
          option text = STRING_TOKEN (AMD_CBS_STR_1),               value = 1,    flags = DEFAULT | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_0),               value = 0,    flags = 0 | RESET_REQUIRED;
        endoneof;
      endif;

      suppressif SHOW_ALL_CBS==0;
        // L2 TLB Associativity
        // 0 - L2 TLB ways [11:8] are fully associative.  1 - =L2 TLB ways [11:8] are 4K-only.
        oneof
          varid       = CBS_CONFIG.CbsCmnCpuL2TlbWayAlloc,
          prompt      = STRING_TOKEN (AMD_CBS_STR_L2_TLB_ASSOCIATIVITY),
          help        = STRING_TOKEN (AMD_CBS_STR_L2_TLB_ASSOCIATIVITY_HELP),
          option text = STRING_TOKEN (AMD_CBS_STR_0),               value = 0,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_1),               value = 1,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 3,    flags = DEFAULT | RESET_REQUIRED | MANUFACTURING;
        endoneof;
      endif;

      suppressif SHOW_ALL_CBS==0;
        // Platform First Error Handling
        // Enable/disable PFEH, cloak individual banks, and mask deferred error interrupts from each bank.
        oneof
          varid       = CBS_CONFIG.CbsCmnCpuPfeh,
          prompt      = STRING_TOKEN (AMD_CBS_STR_PLATFORM_FIRST_ERROR_HANDLING),
          help        = STRING_TOKEN (AMD_CBS_STR_PLATFORM_FIRST_ERROR_HANDLING_HELP),
          option text = STRING_TOKEN (AMD_CBS_STR_ENABLED),         value = 1,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_DISABLED),        value = 0,    flags = DEFAULT | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 3,    flags = 0 | RESET_REQUIRED;
        endoneof;
      endif;

      // Core Performance Boost
      // Disable CPB
      oneof
        varid       = CBS_CONFIG.CbsCmnCpuCpb,
        prompt      = STRING_TOKEN (AMD_CBS_STR_CORE_PERFORMANCE_BOOST),
        help        = STRING_TOKEN (AMD_CBS_STR_CORE_PERFORMANCE_BOOST_HELP),
        option text = STRING_TOKEN (AMD_CBS_STR_DISABLED),        value = 0,    flags = 0 | RESET_REQUIRED;
        option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 1,    flags = DEFAULT | RESET_REQUIRED | MANUFACTURING;
      endoneof;

      suppressif SHOW_ALL_CBS==0;
        // Enable IBS
        // Enables IBS through MSRC001_1005[42] and disables SpecLockMap through MSRC001_1020[54]
        oneof
          varid       = CBS_CONFIG.CbsCmnCpuEnIbs,
          prompt      = STRING_TOKEN (AMD_CBS_STR_ENABLE_IBS),
          help        = STRING_TOKEN (AMD_CBS_STR_ENABLE_IBS_HELP),
          option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 3,    flags = DEFAULT | RESET_REQUIRED | MANUFACTURING;
          option text = STRING_TOKEN (AMD_CBS_STR_ENABLED),         value = 1,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_DISABLED),        value = 0,    flags = 0 | RESET_REQUIRED;
        endoneof;
      endif;

      // Global C-state Control
      // Controls IO based C-state generation and DF C-states.
      oneof
        varid       = CBS_CONFIG.CbsCmnCpuGlobalCstateCtrl,
        prompt      = STRING_TOKEN (AMD_CBS_STR_GLOBAL_C_STATE_CONTROL),
        help        = STRING_TOKEN (AMD_CBS_STR_GLOBAL_C_STATE_CONTROL_HELP),
        option text = STRING_TOKEN (AMD_CBS_STR_DISABLED),        value = 0,    flags = 0 | RESET_REQUIRED;
        option text = STRING_TOKEN (AMD_CBS_STR_ENABLED),         value = 1,    flags = 0 | RESET_REQUIRED;
        option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 3,    flags = DEFAULT | RESET_REQUIRED | MANUFACTURING;
      endoneof;

      suppressif SHOW_ALL_CBS==0;
        // Opcache Control
        // Enables or disables the Opcache
        oneof
          varid       = CBS_CONFIG.CbsCmnCpuOpcacheCtrl,
          prompt      = STRING_TOKEN (AMD_CBS_STR_OPCACHE_CONTROL),
          help        = STRING_TOKEN (AMD_CBS_STR_OPCACHE_CONTROL_HELP),
          option text = STRING_TOKEN (AMD_CBS_STR_DISABLED),        value = 0,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_ENABLED),         value = 1,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 3,    flags = DEFAULT | RESET_REQUIRED | MANUFACTURING;
        endoneof;
      endif;

      suppressif TRUE;
        // OC Mode
        // OC1 - 16 cores/3.6GHz on 1.3375V\nOC2 - 8 cores/3.7GHz on 1.369V\nOC3 - 4 cores/3.75GHz on 1.374V\nMax Stress - 16 cores/3.8GHz on 1.400V\n\nWARNING - DAMAGE CAUSED BY USE OF YOUR AMD PROCESSOR OUTSIDE OF SPECIFICATION OR IN EXCESS OF FACTORY SETTINGS ARE NOT COVERED UNDER YOUR AMD PRODUCT WARRANTY AND MAY NOT BE COVERED BY YOUR SYSTEM MANUFACTURER'S WARRANTY.\nOperating your AMD processor outside of specification or in excess of factory settings, including but not limited to overclocking, may damage or shorten the life of your processor or other system components, create system instabilities (e.g., data loss and corrupted images) and in extreme cases may result in total system failure. AMD does not provide support or service for issues or damages related to use of an AMD processor outside of processor specifications or in excess of factory settings.\n
        oneof
          varid       = CBS_CONFIG.CbsCmnCpuOcMode,
          questionid  = KEY_OC_MODE,
          prompt      = STRING_TOKEN (AMD_CBS_STR_OC_MODE),
          help        = STRING_TOKEN (AMD_CBS_STR_OC_MODE_HELP),
          option text = STRING_TOKEN (AMD_CBS_STR_NORMAL_OPERATION), value = 0,    flags = DEFAULT | RESET_REQUIRED | MANUFACTURING | INTERACTIVE;
          option text = STRING_TOKEN (AMD_CBS_STR_OC1),             value = 1,    flags = 0 | RESET_REQUIRED | INTERACTIVE;
          option text = STRING_TOKEN (AMD_CBS_STR_OC2),             value = 2,    flags = 0 | RESET_REQUIRED | INTERACTIVE;
          option text = STRING_TOKEN (AMD_CBS_STR_OC3),             value = 3,    flags = 0 | RESET_REQUIRED | INTERACTIVE;
          option text = STRING_TOKEN (AMD_CBS_STR_MAX_STRESS),      value = 4,    flags = 0 | RESET_REQUIRED | INTERACTIVE;
        endoneof;
      endif;

      // Display Condition: CbsComboFlag=4|CbsComboFlag=1
      suppressif NOT ideqval CBS_CONFIG.CbsComboFlag == 4
             AND NOT ideqval CBS_CONFIG.CbsComboFlag == 1 OR SHOW_ALL_CBS==0;
        goto SETUP_CUSTOM_CORE_PSTATES_LABLE,
          prompt      = STRING_TOKEN (AMD_CBS_STR_CUSTOM_CORE_PSTATES_SECTION),
          help        = STRING_TOKEN (AMD_CBS_STR_CUSTOM_CORE_PSTATES_SECTION);
      endif;

      // SEV-ES ASID Space Limit
      // SEV VMs using ASIDs below the SEV-ES ASID Space Limit must enable the SEV-ES feature. The valid values for this field are from 0x1 (1) - 0x10 (16).
      numeric
        varid       = CBS_CONFIG.CbsCmnCpuSevAsidSpaceLimit,
        prompt      = STRING_TOKEN (AMD_CBS_STR_SEV_ES_ASID_SPACE_LIMIT),
        help        = STRING_TOKEN (AMD_CBS_STR_SEV_ES_ASID_SPACE_LIMIT_HELP),
        flags       = DISPLAY_UINT_HEX | RESET_REQUIRED,
        minimum     = 1,
        maximum     = 16,
        step        = 1,
        default     = 5,
      endnumeric;

      goto SETUP_CORE_THREAD_ENABLEMENT_LABLE,
        prompt      = STRING_TOKEN (AMD_CBS_STR_CORE_THREAD_ENABLEMENT_SECTION),
        help        = STRING_TOKEN (AMD_CBS_STR_CORE_THREAD_ENABLEMENT_SECTION);

      suppressif SHOW_ALL_CBS==0;
        // Streaming Stores Control
        // Enables or disables the streaming stores functionality
        oneof
          varid       = CBS_CONFIG.CbsCmnCpuStreamingStoresCtrl,
          prompt      = STRING_TOKEN (AMD_CBS_STR_STREAMING_STORES_CONTROL),
          help        = STRING_TOKEN (AMD_CBS_STR_STREAMING_STORES_CONTROL_HELP),
          option text = STRING_TOKEN (AMD_CBS_STR_DISABLED),        value = 0,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_ENABLED),         value = 1,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 3,    flags = DEFAULT | RESET_REQUIRED | MANUFACTURING;
        endoneof;
      
      suppressif NOT ideqval CBS_CONFIG.CbsCmnCpuRdseedRdrandCap==1;
        //Enables or disables CPU rdseed and rdrand feature, add start
        oneof
          varid       = CBS_CONFIG.CbsCmnCpuRdseedRdrandCtrl,
          prompt      = STRING_TOKEN (AMD_CBS_STR_CPU_RDSEED_RDRAND_CONTROL),
          help        = STRING_TOKEN (AMD_CBS_STR_CPU_RDSEED_RDRAND_CONTROL_HELP),
          option text = STRING_TOKEN (AMD_CBS_STR_DISABLED),        value = 0,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_ENABLED),         value = 1,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 3,    flags = DEFAULT | RESET_REQUIRED;
        endoneof;
        //Enables or disables CPU rdseed and rdrand feature, add end
      endif;

#if FeaturePcdGet(PcdHygonReleaseBios)
        suppressif TRUE;
#endif
        oneof
          varid       = CBS_CONFIG.CbsCmnCpuLoadUcodeCtrl,
          prompt      = STRING_TOKEN (AMD_CBS_STR_CPU_LOAD_UCODE_CONTROL),
          help        = STRING_TOKEN (AMD_CBS_STR_CPU_LOAD_UCODE_CONTROL_HELP),
          option text = STRING_TOKEN (AMD_CBS_STR_DISABLED),        value = 0,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_ENABLED),         value = 1,    flags = DEFAULT | RESET_REQUIRED;
        endoneof;
#if FeaturePcdGet(PcdHygonReleaseBios)
	endif;
#endif

      numeric
        varid       = CBS_CONFIG.CbsCmnAvailableVqCount,
        prompt      = STRING_TOKEN (AMD_CBS_STR_AVAILABLE_CCP_VQ_COUNT),
        help        = STRING_TOKEN (AMD_CBS_STR_AVAILABLE_CCP_VQ_COUNT_HELP),
        flags       = DISPLAY_UINT_HEX | RESET_REQUIRED,
        minimum     = 0,
        maximum     = 4,
        step        = 1,
        default     = 0,
      endnumeric;
     
        //SMEE ENABLE
        suppressif  NOT ideqval CBS_CONFIG.CbsCmnCpuSmeeCap==1;
           oneof
              varid       = CBS_CONFIG.CbsCmnSmeeCtrl,
              prompt      = STRING_TOKEN (AMD_CBS_STR_CPU_SMEE_CONTROL),
              help        = STRING_TOKEN (AMD_CBS_STR_CPU_SMEE_CONTROL_HELP),
              option text = STRING_TOKEN (AMD_CBS_STR_DISABLED),        value = 0,    flags = 0 | RESET_REQUIRED;
              option text = STRING_TOKEN (AMD_CBS_STR_ENABLED),         value = 1,    flags = DEFAULT | RESET_REQUIRED;
          endoneof;   
        endif;  
 
         //SVM ENABLE
        oneof
          varid       = CBS_CONFIG.CbsCmnSVMCtrl,
          prompt      = STRING_TOKEN (AMD_CBS_STR_CPU_SVM_CONTROL),
          help        = STRING_TOKEN (AMD_CBS_STR_CPU_SVM_CONTROL_HELP),
          option text = STRING_TOKEN (AMD_CBS_STR_DISABLED),        value = 0,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_ENABLED),         value = 1,    flags = DEFAULT | RESET_REQUIRED;
        endoneof;   
        // MCA error thresh enable
        // Enable MCA error thresholding.
        oneof
          varid       = CBS_CONFIG.CbsCmnCpuMcaErrThreshEn,
          prompt      = STRING_TOKEN (AMD_CBS_STR_MCA_ERROR_THRESH_ENABLE),
          help        = STRING_TOKEN (AMD_CBS_STR_MCA_ERROR_THRESH_ENABLE_HELP),
          option text = STRING_TOKEN (AMD_CBS_STR_DISABLED),        value = 0,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_ENABLED),         value = 1,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xFF, flags = DEFAULT | RESET_REQUIRED;
        endoneof;
  
        // Display Condition: CbsCmnCpuMcaErrThreshEn=True
        suppressif NOT ideqval CBS_CONFIG.CbsCmnCpuMcaErrThreshEn == 1;
          // MCA error thresh count
          // Effective error threshold count = 4095(0xFFF) - <this value> (e.g. the default value of 0xFF5 results in a threshold of 10).
          numeric
            varid       = CBS_CONFIG.CbsCmnCpuMcaErrThreshCount,
            prompt      = STRING_TOKEN (AMD_CBS_STR_MCA_ERROR_THRESH_COUNT),
            help        = STRING_TOKEN (AMD_CBS_STR_MCA_ERROR_THRESH_COUNT_HELP),
            flags       = DISPLAY_UINT_HEX | RESET_REQUIRED,
            minimum     = 1,
            maximum     = 4095,
            step        = 0,
            default     = 4085,
          endnumeric;
        endif;
      endif;

      goto SETUP_PREFETCHER_SETTINGS_LABLE,
        prompt      = STRING_TOKEN (AMD_CBS_STR_PREFETCHER_SETTINGS_SECTION),
        help        = STRING_TOKEN (AMD_CBS_STR_PREFETCHER_SETTINGS_SECTION);

      suppressif SHOW_ALL_CBS==0;
        oneof
          varid       = CBS_CONFIG.CbsCmnAvsCtrl,
          prompt      = STRING_TOKEN (AMD_CBS_STR_AVS),
          help        = STRING_TOKEN (AMD_CBS_STR_AVS_HELP),
          option text = STRING_TOKEN (AMD_CBS_STR_DISABLE),         value = 0,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_ENABLE),          value = 1,    flags = DEFAULT | RESET_REQUIRED | MANUFACTURING;
        endoneof;
      endif;

    endform;
      //
      // form - Custom Core Pstates
      //
      form

        formid        = SETUP_CUSTOM_CORE_PSTATES_LABLE,

        title         = STRING_TOKEN (AMD_CBS_STR_CUSTOM_CORE_PSTATES_SECTION);

        subtitle text = STRING_TOKEN (AMD_CBS_STR_CUSTOM_CORE_PSTATES_SECTION);
        subtitle text = STRING_TOKEN (AMD_CBS_STR_BLANK);

        suppressif SHOW_ALL_CBS==0;
          // Custom Core Pstates Legal Disclaimer
          // Legal Disclaimer
          text
            help        = STRING_TOKEN (AMD_CBS_STR_CUSTOM_CORE_PSTATES_LEGAL_DISCLAIMER_HELP),
            text        = STRING_TOKEN (AMD_CBS_STR_CUSTOM_CORE_PSTATES_LEGAL_DISCLAIMER);
        endif;

        suppressif SHOW_ALL_CBS==0;
          // Custom Core Pstates Legal Disclaimer 1
          // Legal Disclaimer
          text
            help        = STRING_TOKEN (AMD_CBS_STR_CUSTOM_CORE_PSTATES_LEGAL_DISCLAIMER_1_HELP),
            text        = STRING_TOKEN (AMD_CBS_STR_CUSTOM_CORE_PSTATES_LEGAL_DISCLAIMER_1);
        endif;

        suppressif SHOW_ALL_CBS==0;
          goto SETUP_DECLINE_LABLE,
            prompt      = STRING_TOKEN (AMD_CBS_STR_DECLINE_SECTION),
            help        = STRING_TOKEN (AMD_CBS_STR_DECLINE_SECTION);
        endif;

        suppressif SHOW_ALL_CBS==0;
          goto SETUP_ACCEPT_LABLE,
            prompt      = STRING_TOKEN (AMD_CBS_STR_ACCEPT_SECTION),
            help        = STRING_TOKEN (AMD_CBS_STR_ACCEPT_SECTION);
        endif;

      endform;
        //
        // form - Decline
        //
        form

          formid        = SETUP_DECLINE_LABLE,

          title         = STRING_TOKEN (AMD_CBS_STR_DECLINE_SECTION);

          subtitle text = STRING_TOKEN (AMD_CBS_STR_DECLINE_SECTION);
          subtitle text = STRING_TOKEN (AMD_CBS_STR_BLANK);

        endform;
        //
        // form - Accept
        //
        form

          formid        = SETUP_ACCEPT_LABLE,

          title         = STRING_TOKEN (AMD_CBS_STR_ACCEPT_SECTION);

          subtitle text = STRING_TOKEN (AMD_CBS_STR_ACCEPT_SECTION);
          subtitle text = STRING_TOKEN (AMD_CBS_STR_BLANK);

          // Active Condition: CbsCmnCpuOcMode=Normal Operation
          grayoutif NOT ideqval CBS_CONFIG.CbsCmnCpuOcMode == 0;
            suppressif SHOW_ALL_CBS==0;
              // Custom Pstate0
              // Disable - disable this Pstate\nCustom - customize this Pstate, applicable only if PcdOcDisable=FALSE\n\nWARNING - DAMAGE CAUSED BY USE OF YOUR AMD PROCESSOR OUTSIDE OF SPECIFICATION OR IN EXCESS OF FACTORY SETTINGS ARE NOT COVERED UNDER YOUR AMD PRODUCT WARRANTY AND MAY NOT BE COVERED BY YOUR SYSTEM MANUFACTURER'S WARRANTY.\nOperating your AMD processor outside of specification or in excess of factory settings, including but not limited to overclocking, may damage or shorten the life of your processor or other system components, create system instabilities (e.g., data loss and corrupted images) and in extreme cases may result in total system failure. AMD does not provide support or service for issues or damages related to use of an AMD processor outside of processor specifications or in excess of factory settings.\n
              oneof
                varid       = CBS_CONFIG.CbsCpuPstCustomP0,
                questionid  = KEY_CUSTOM_PSTATE0,
                prompt      = STRING_TOKEN (AMD_CBS_STR_CUSTOM_PSTATE0),
                help        = STRING_TOKEN (AMD_CBS_STR_CUSTOM_PSTATE0_HELP),
                option text = STRING_TOKEN (AMD_CBS_STR_CUSTOM),          value = 1,    flags = 0 | RESET_REQUIRED | INTERACTIVE;
                option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 2,    flags = DEFAULT | RESET_REQUIRED | MANUFACTURING | INTERACTIVE;
              endoneof;
            endif;
          endif;

          // Display Condition: CbsCpuPstCustomP0=Custom
          // Active Condition: CbsCpuPstCustomP0=Auto
          suppressif NOT ideqval CBS_CONFIG.CbsCpuPstCustomP0 == 1 OR SHOW_ALL_CBS==0;
          grayoutif NOT ideqval CBS_CONFIG.CbsCpuPstCustomP0 == 2;
            //   Frequency (MHz)
            // Current core frequency in MHz
            numeric
              varid       = CBS_CONFIG.CbsCpuCofP0,
              prompt      = STRING_TOKEN (AMD_CBS_STR_FREQUENCY_MHZ),
              help        = STRING_TOKEN (AMD_CBS_STR_FREQUENCY_MHZ_HELP),
              flags       = RESET_REQUIRED,
              minimum     = 0,
              maximum     = 0xffffffff,
              step        = 0,
              default     = 0,
            endnumeric;
          endif;
          endif;

          // Display Condition: CbsCpuPstCustomP0=Custom
          // Active Condition: CbsCpuPstCustomP0=Auto
          suppressif NOT ideqval CBS_CONFIG.CbsCpuPstCustomP0 == 1 OR SHOW_ALL_CBS==0;
          grayoutif NOT ideqval CBS_CONFIG.CbsCpuPstCustomP0 == 2;
            //   Voltage (uV)
            // Voltage in uV (1V = 1000 * 1000 uV)
            numeric
              varid       = CBS_CONFIG.CbsCpuVoltageP0,
              prompt      = STRING_TOKEN (AMD_CBS_STR_VOLTAGE_UV),
              help        = STRING_TOKEN (AMD_CBS_STR_VOLTAGE_UV_HELP),
              flags       = RESET_REQUIRED,
              minimum     = 0,
              maximum     = 0xffffffff,
              step        = 0,
              default     = 0,
            endnumeric;
          endif;
          endif;

          // Display Condition: CbsCpuPstCustomP0=Custom
          // Active Condition: CbsCmnCpuOcMode=Normal Operation
          suppressif NOT ideqval CBS_CONFIG.CbsCpuPstCustomP0 == 1 OR SHOW_ALL_CBS==0;
          grayoutif NOT ideqval CBS_CONFIG.CbsCmnCpuOcMode == 0;
            //   Pstate0 FID
            // Specifies the core frequency multiplier. COF = 200MHz * FID / DID
            numeric
              varid       = CBS_CONFIG.CbsCpuPst0Fid,
              questionid  = KEY_PSTATE0_FID,
              prompt      = STRING_TOKEN (AMD_CBS_STR_PSTATE0_FID),
              help        = STRING_TOKEN (AMD_CBS_STR_PSTATE0_FID_HELP),
              flags       = DISPLAY_UINT_HEX | RESET_REQUIRED | INTERACTIVE,
              minimum     = 0x10,
              maximum     = 0xff,
              step        = 0,
              default     = 16,
            endnumeric;
          endif;
          endif;

          // Display Condition: CbsCpuPstCustomP0=Custom
          // Active Condition: CbsCmnCpuOcMode=Normal Operation
          suppressif NOT ideqval CBS_CONFIG.CbsCpuPstCustomP0 == 1 OR SHOW_ALL_CBS==0;
          grayoutif NOT ideqval CBS_CONFIG.CbsCmnCpuOcMode == 0;
            //   Pstate0 DID
            // Specifies the core frequency divisor (DID[0] should zero if DID[5:0]>1Ah).
            numeric
              varid       = CBS_CONFIG.CbsCpuPst0Did,
              questionid  = KEY_PSTATE0_DID,
              prompt      = STRING_TOKEN (AMD_CBS_STR_PSTATE0_DID),
              help        = STRING_TOKEN (AMD_CBS_STR_PSTATE0_DID_HELP),
              flags       = DISPLAY_UINT_HEX | RESET_REQUIRED | INTERACTIVE,
              minimum     = 0x8,
              maximum     = 0x30,
              step        = 0,
              default     = 8,
            endnumeric;
          endif;
          endif;

          // Display Condition: CbsCpuPstCustomP0=Custom
          // Active Condition: CbsCmnCpuOcMode=Normal Operation
          suppressif NOT ideqval CBS_CONFIG.CbsCpuPstCustomP0 == 1 OR SHOW_ALL_CBS==0;
          grayoutif NOT ideqval CBS_CONFIG.CbsCmnCpuOcMode == 0;
            //   Pstate0 VID
            // Specifies the core voltage.
            numeric
              varid       = CBS_CONFIG.CbsCpuPst0Vid,
              questionid  = KEY_PSTATE0_VID,
              prompt      = STRING_TOKEN (AMD_CBS_STR_PSTATE0_VID),
              help        = STRING_TOKEN (AMD_CBS_STR_PSTATE0_VID_HELP),
              flags       = DISPLAY_UINT_HEX | RESET_REQUIRED | INTERACTIVE,
              minimum     = 0,
              maximum     = 0xff,
              step        = 0,
              default     = 255,
            endnumeric;
          endif;
          endif;

          suppressif SHOW_ALL_CBS==0;
            // Custom Pstate1
            // Disabled - disable this Pstate\nCustom - customize this Pstate, applicable only if PcdOcDisable=FALSE\n\nWARNING - DAMAGE CAUSED BY USE OF YOUR AMD PROCESSOR OUTSIDE OF SPECIFICATION OR IN EXCESS OF FACTORY SETTINGS ARE NOT COVERED UNDER YOUR AMD PRODUCT WARRANTY AND MAY NOT BE COVERED BY YOUR SYSTEM MANUFACTURER'S WARRANTY.\nOperating your AMD processor outside of specification or in excess of factory settings, including but not limited to overclocking, may damage or shorten the life of your processor or other system components, create system instabilities (e.g., data loss and corrupted images) and in extreme cases may result in total system failure. AMD does not provide support or service for issues or damages related to use of an AMD processor outside of processor specifications or in excess of factory settings.\n
            oneof
              varid       = CBS_CONFIG.CbsCpuPstCustomP1,
              questionid  = KEY_CUSTOM_PSTATE1,
              prompt      = STRING_TOKEN (AMD_CBS_STR_CUSTOM_PSTATE1),
              help        = STRING_TOKEN (AMD_CBS_STR_CUSTOM_PSTATE1_HELP),
              option text = STRING_TOKEN (AMD_CBS_STR_DISABLED),        value = 0,    flags = 0 | RESET_REQUIRED | INTERACTIVE;
              option text = STRING_TOKEN (AMD_CBS_STR_CUSTOM),          value = 1,    flags = 0 | RESET_REQUIRED | INTERACTIVE;
              option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 2,    flags = DEFAULT | RESET_REQUIRED | MANUFACTURING | INTERACTIVE;
            endoneof;
          endif;

          // Display Condition: CbsCpuPstCustomP1=Custom
          // Active Condition: CbsCpuPstCustomP1=Auto
          suppressif NOT ideqval CBS_CONFIG.CbsCpuPstCustomP1 == 1 OR SHOW_ALL_CBS==0;
          grayoutif NOT ideqval CBS_CONFIG.CbsCpuPstCustomP1 == 2;
            //   Frequency (MHz)
            // No help string
            numeric
              varid       = CBS_CONFIG.CbsCpuCofP1,
              prompt      = STRING_TOKEN (AMD_CBS_STR_FREQUENCY_MHZ),
              help        = STRING_TOKEN (AMD_CBS_STR_FREQUENCY_MHZ_HELP),
              flags       = RESET_REQUIRED,
              minimum     = 0,
              maximum     = 0xffffffff,
              step        = 0,
              default     = 0,
            endnumeric;
          endif;
          endif;

          // Display Condition: CbsCpuPstCustomP1=Custom
          // Active Condition: CbsCpuPstCustomP1=Auto
          suppressif NOT ideqval CBS_CONFIG.CbsCpuPstCustomP1 == 1 OR SHOW_ALL_CBS==0;
          grayoutif NOT ideqval CBS_CONFIG.CbsCpuPstCustomP1 == 2;
            //   Voltage (uV)
            // No help string
            numeric
              varid       = CBS_CONFIG.CbsCpuVoltageP1,
              prompt      = STRING_TOKEN (AMD_CBS_STR_VOLTAGE_UV),
              help        = STRING_TOKEN (AMD_CBS_STR_VOLTAGE_UV_HELP),
              flags       = RESET_REQUIRED,
              minimum     = 0,
              maximum     = 0xffffffff,
              step        = 0,
              default     = 0,
            endnumeric;
          endif;
          endif;

          // Display Condition: CbsCpuPstCustomP1=Custom
          suppressif NOT ideqval CBS_CONFIG.CbsCpuPstCustomP1 == 1 OR SHOW_ALL_CBS==0;
            //   Pstate1 FID
            // Specifies the core frequency multiplier. COF = 200MHz * FID / DID
            numeric
              varid       = CBS_CONFIG.CbsCpuPst1Fid,
              questionid  = KEY_PSTATE1_FID,
              prompt      = STRING_TOKEN (AMD_CBS_STR_PSTATE1_FID),
              help        = STRING_TOKEN (AMD_CBS_STR_PSTATE1_FID_HELP),
              flags       = DISPLAY_UINT_HEX | RESET_REQUIRED | INTERACTIVE,
              minimum     = 0x10,
              maximum     = 0xff,
              step        = 0,
              default     = 16,
            endnumeric;
          endif;

          // Display Condition: CbsCpuPstCustomP1=Custom
          suppressif NOT ideqval CBS_CONFIG.CbsCpuPstCustomP1 == 1 OR SHOW_ALL_CBS==0;
            //   Pstate1 DID
            // Specifies the core frequency divisor (DID[0] should zero if DID[5:0]>1Ah).
            numeric
              varid       = CBS_CONFIG.CbsCpuPst1Did,
              questionid  = KEY_PSTATE1_DID,
              prompt      = STRING_TOKEN (AMD_CBS_STR_PSTATE1_DID),
              help        = STRING_TOKEN (AMD_CBS_STR_PSTATE1_DID_HELP),
              flags       = DISPLAY_UINT_HEX | RESET_REQUIRED | INTERACTIVE,
              minimum     = 0x8,
              maximum     = 0x30,
              step        = 0,
              default     = 8,
            endnumeric;
          endif;

          // Display Condition: CbsCpuPstCustomP1=Custom
          suppressif NOT ideqval CBS_CONFIG.CbsCpuPstCustomP1 == 1 OR SHOW_ALL_CBS==0;
            //   Pstate1 VID
            // Specifies the core voltage.
            numeric
              varid       = CBS_CONFIG.CbsCpuPst1Vid,
              questionid  = KEY_PSTATE1_VID,
              prompt      = STRING_TOKEN (AMD_CBS_STR_PSTATE1_VID),
              help        = STRING_TOKEN (AMD_CBS_STR_PSTATE1_VID_HELP),
              flags       = DISPLAY_UINT_HEX | RESET_REQUIRED | INTERACTIVE,
              minimum     = 0,
              maximum     = 0xff,
              step        = 0,
              default     = 255,
            endnumeric;
          endif;

          // Active Condition: CbsCpuPstCustomP1=Custom|CbsCpuPstCustomP1=Auto
          grayoutif NOT ideqval CBS_CONFIG.CbsCpuPstCustomP1 == 1
                AND NOT ideqval CBS_CONFIG.CbsCpuPstCustomP1 == 2;
            suppressif SHOW_ALL_CBS==0;
              // Custom Pstate2
              // Disabled - disable this Pstate\nCustom - customize this Pstate, applicable only if PcdOcDisable=FALSE\n\nWARNING - DAMAGE CAUSED BY USE OF YOUR AMD PROCESSOR OUTSIDE OF SPECIFICATION OR IN EXCESS OF FACTORY SETTINGS ARE NOT COVERED UNDER YOUR AMD PRODUCT WARRANTY AND MAY NOT BE COVERED BY YOUR SYSTEM MANUFACTURER'S WARRANTY.\nOperating your AMD processor outside of specification or in excess of factory settings, including but not limited to overclocking, may damage or shorten the life of your processor or other system components, create system instabilities (e.g., data loss and corrupted images) and in extreme cases may result in total system failure. AMD does not provide support or service for issues or damages related to use of an AMD processor outside of processor specifications or in excess of factory settings.\n
              oneof
                varid       = CBS_CONFIG.CbsCpuPstCustomP2,
                questionid  = KEY_CUSTOM_PSTATE2,
                prompt      = STRING_TOKEN (AMD_CBS_STR_CUSTOM_PSTATE2),
                help        = STRING_TOKEN (AMD_CBS_STR_CUSTOM_PSTATE2_HELP),
                option text = STRING_TOKEN (AMD_CBS_STR_DISABLED),        value = 0,    flags = 0 | RESET_REQUIRED | INTERACTIVE;
                option text = STRING_TOKEN (AMD_CBS_STR_CUSTOM),          value = 1,    flags = 0 | RESET_REQUIRED | INTERACTIVE;
                option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 2,    flags = DEFAULT | RESET_REQUIRED | MANUFACTURING | INTERACTIVE;
              endoneof;
            endif;
          endif;

          // Display Condition: CbsCpuPstCustomP2=Custom
          // Active Condition: CbsCpuPstCustomP2=Auto
          suppressif NOT ideqval CBS_CONFIG.CbsCpuPstCustomP2 == 1 OR SHOW_ALL_CBS==0;
          grayoutif NOT ideqval CBS_CONFIG.CbsCpuPstCustomP2 == 2;
            //   Frequency (MHz)
            // No help string
            numeric
              varid       = CBS_CONFIG.CbsCpuCofP2,
              prompt      = STRING_TOKEN (AMD_CBS_STR_FREQUENCY_MHZ),
              help        = STRING_TOKEN (AMD_CBS_STR_FREQUENCY_MHZ_HELP),
              flags       = RESET_REQUIRED,
              minimum     = 0,
              maximum     = 0xffffffff,
              step        = 0,
              default     = 0,
            endnumeric;
          endif;
          endif;

          // Display Condition: CbsCpuPstCustomP2=Custom
          // Active Condition: CbsCpuPstCustomP2=Auto
          suppressif NOT ideqval CBS_CONFIG.CbsCpuPstCustomP2 == 1 OR SHOW_ALL_CBS==0;
          grayoutif NOT ideqval CBS_CONFIG.CbsCpuPstCustomP2 == 2;
            //   Voltage (uV)
            // No help string
            numeric
              varid       = CBS_CONFIG.CbsCpuVoltageP2,
              prompt      = STRING_TOKEN (AMD_CBS_STR_VOLTAGE_UV),
              help        = STRING_TOKEN (AMD_CBS_STR_VOLTAGE_UV_HELP),
              flags       = RESET_REQUIRED,
              minimum     = 0,
              maximum     = 0xffffffff,
              step        = 0,
              default     = 0,
            endnumeric;
          endif;
          endif;

          // Display Condition: CbsCpuPstCustomP2=Custom
          suppressif NOT ideqval CBS_CONFIG.CbsCpuPstCustomP2 == 1 OR SHOW_ALL_CBS==0;
            //   Pstate2 FID
            // Specifies the core frequency multiplier. COF = 200MHz * FID / DID
            numeric
              varid       = CBS_CONFIG.CbsCpuPst2Fid,
              questionid  = KEY_PSTATE2_FID,
              prompt      = STRING_TOKEN (AMD_CBS_STR_PSTATE2_FID),
              help        = STRING_TOKEN (AMD_CBS_STR_PSTATE2_FID_HELP),
              flags       = DISPLAY_UINT_HEX | RESET_REQUIRED | INTERACTIVE,
              minimum     = 0x10,
              maximum     = 0xff,
              step        = 0,
              default     = 16,
            endnumeric;
          endif;

          // Display Condition: CbsCpuPstCustomP2=Custom
          suppressif NOT ideqval CBS_CONFIG.CbsCpuPstCustomP2 == 1 OR SHOW_ALL_CBS==0;
            //   Pstate2 DID
            // Specifies the core frequency divisor (DID[0] should zero if DID[5:0]>1Ah).
            numeric
              varid       = CBS_CONFIG.CbsCpuPst2Did,
              questionid  = KEY_PSTATE2_DID,
              prompt      = STRING_TOKEN (AMD_CBS_STR_PSTATE2_DID),
              help        = STRING_TOKEN (AMD_CBS_STR_PSTATE2_DID_HELP),
              flags       = DISPLAY_UINT_HEX | RESET_REQUIRED | INTERACTIVE,
              minimum     = 0x8,
              maximum     = 0x30,
              step        = 0,
              default     = 8,
            endnumeric;
          endif;

          // Display Condition: CbsCpuPstCustomP2=Custom
          suppressif NOT ideqval CBS_CONFIG.CbsCpuPstCustomP2 == 1 OR SHOW_ALL_CBS==0;
            //   Pstate2 VID
            // Specifies the core voltage.
            numeric
              varid       = CBS_CONFIG.CbsCpuPst2Vid,
              questionid  = KEY_PSTATE2_VID,
              prompt      = STRING_TOKEN (AMD_CBS_STR_PSTATE2_VID),
              help        = STRING_TOKEN (AMD_CBS_STR_PSTATE2_VID_HELP),
              flags       = DISPLAY_UINT_HEX | RESET_REQUIRED | INTERACTIVE,
              minimum     = 0,
              maximum     = 0xff,
              step        = 0,
              default     = 255,
            endnumeric;
          endif;

          // Active Condition: CbsCpuPstCustomP2=Custom|CbsCpuPstCustomP2=Auto
          grayoutif NOT ideqval CBS_CONFIG.CbsCpuPstCustomP2 == 1
                AND NOT ideqval CBS_CONFIG.CbsCpuPstCustomP2 == 2;
            suppressif SHOW_ALL_CBS==0;
              // Custom Pstate3
              // Disabled - disable this Pstate\nCustom - customize this Pstate, applicable only if PcdOcDisable=FALSE\n\nWARNING - DAMAGE CAUSED BY USE OF YOUR AMD PROCESSOR OUTSIDE OF SPECIFICATION OR IN EXCESS OF FACTORY SETTINGS ARE NOT COVERED UNDER YOUR AMD PRODUCT WARRANTY AND MAY NOT BE COVERED BY YOUR SYSTEM MANUFACTURER'S WARRANTY.\nOperating your AMD processor outside of specification or in excess of factory settings, including but not limited to overclocking, may damage or shorten the life of your processor or other system components, create system instabilities (e.g., data loss and corrupted images) and in extreme cases may result in total system failure. AMD does not provide support or service for issues or damages related to use of an AMD processor outside of processor specifications or in excess of factory settings.\n
              oneof
                varid       = CBS_CONFIG.CbsCpuPstCustomP3,
                questionid  = KEY_CUSTOM_PSTATE3,
                prompt      = STRING_TOKEN (AMD_CBS_STR_CUSTOM_PSTATE3),
                help        = STRING_TOKEN (AMD_CBS_STR_CUSTOM_PSTATE3_HELP),
                option text = STRING_TOKEN (AMD_CBS_STR_DISABLED),        value = 0,    flags = 0 | RESET_REQUIRED | INTERACTIVE;
                option text = STRING_TOKEN (AMD_CBS_STR_CUSTOM),          value = 1,    flags = 0 | RESET_REQUIRED | INTERACTIVE;
                option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 2,    flags = DEFAULT | RESET_REQUIRED | MANUFACTURING | INTERACTIVE;
              endoneof;
            endif;
          endif;

          // Display Condition: CbsCpuPstCustomP3=Custom
          // Active Condition: CbsCpuPstCustomP3=Auto
          suppressif NOT ideqval CBS_CONFIG.CbsCpuPstCustomP3 == 1 OR SHOW_ALL_CBS==0;
          grayoutif NOT ideqval CBS_CONFIG.CbsCpuPstCustomP3 == 2;
            //   Frequency (MHz)
            // No help string
            numeric
              varid       = CBS_CONFIG.CbsCpuCofP3,
              prompt      = STRING_TOKEN (AMD_CBS_STR_FREQUENCY_MHZ),
              help        = STRING_TOKEN (AMD_CBS_STR_FREQUENCY_MHZ_HELP),
              flags       = RESET_REQUIRED,
              minimum     = 0,
              maximum     = 0xffffffff,
              step        = 0,
              default     = 0,
            endnumeric;
          endif;
          endif;

          // Display Condition: CbsCpuPstCustomP3=Custom
          // Active Condition: CbsCpuPstCustomP3=Auto
          suppressif NOT ideqval CBS_CONFIG.CbsCpuPstCustomP3 == 1 OR SHOW_ALL_CBS==0;
          grayoutif NOT ideqval CBS_CONFIG.CbsCpuPstCustomP3 == 2;
            //   Voltage (uV)
            // No help string
            numeric
              varid       = CBS_CONFIG.CbsCpuVoltageP3,
              prompt      = STRING_TOKEN (AMD_CBS_STR_VOLTAGE_UV),
              help        = STRING_TOKEN (AMD_CBS_STR_VOLTAGE_UV_HELP),
              flags       = RESET_REQUIRED,
              minimum     = 0,
              maximum     = 0xffffffff,
              step        = 0,
              default     = 0,
            endnumeric;
          endif;
          endif;

          // Display Condition: CbsCpuPstCustomP3=Custom
          suppressif NOT ideqval CBS_CONFIG.CbsCpuPstCustomP3 == 1 OR SHOW_ALL_CBS==0;
            //   Pstate3 FID
            // Specifies the core frequency multiplier. COF = 200MHz * FID / DID
            numeric
              varid       = CBS_CONFIG.CbsCpuPst3Fid,
              questionid  = KEY_PSTATE3_FID,
              prompt      = STRING_TOKEN (AMD_CBS_STR_PSTATE3_FID),
              help        = STRING_TOKEN (AMD_CBS_STR_PSTATE3_FID_HELP),
              flags       = DISPLAY_UINT_HEX | RESET_REQUIRED | INTERACTIVE,
              minimum     = 0x10,
              maximum     = 0xff,
              step        = 0,
              default     = 16,
            endnumeric;
          endif;

          // Display Condition: CbsCpuPstCustomP3=Custom
          suppressif NOT ideqval CBS_CONFIG.CbsCpuPstCustomP3 == 1 OR SHOW_ALL_CBS==0;
            //   Pstate3 DID
            // Specifies the core frequency divisor (DID[0] should zero if DID[5:0]>1Ah).
            numeric
              varid       = CBS_CONFIG.CbsCpuPst3Did,
              questionid  = KEY_PSTATE3_DID,
              prompt      = STRING_TOKEN (AMD_CBS_STR_PSTATE3_DID),
              help        = STRING_TOKEN (AMD_CBS_STR_PSTATE3_DID_HELP),
              flags       = DISPLAY_UINT_HEX | RESET_REQUIRED | INTERACTIVE,
              minimum     = 0x8,
              maximum     = 0x30,
              step        = 0,
              default     = 8,
            endnumeric;
          endif;

          // Display Condition: CbsCpuPstCustomP3=Custom
          suppressif NOT ideqval CBS_CONFIG.CbsCpuPstCustomP3 == 1 OR SHOW_ALL_CBS==0;
            //   Pstate3 VID
            // Specifies the core voltage.
            numeric
              varid       = CBS_CONFIG.CbsCpuPst3Vid,
              questionid  = KEY_PSTATE3_VID,
              prompt      = STRING_TOKEN (AMD_CBS_STR_PSTATE3_VID),
              help        = STRING_TOKEN (AMD_CBS_STR_PSTATE3_VID_HELP),
              flags       = DISPLAY_UINT_HEX | RESET_REQUIRED | INTERACTIVE,
              minimum     = 0,
              maximum     = 0xff,
              step        = 0,
              default     = 255,
            endnumeric;
          endif;

          // Active Condition: CbsCpuPstCustomP3=Custom|CbsCpuPstCustomP3=Auto
          grayoutif NOT ideqval CBS_CONFIG.CbsCpuPstCustomP3 == 1
                AND NOT ideqval CBS_CONFIG.CbsCpuPstCustomP3 == 2;
            suppressif SHOW_ALL_CBS==0;
              // Custom Pstate4
              // Disabled - disable this Pstate\nCustom - customize this Pstate, applicable only if PcdOcDisable=FALSE\n\nWARNING - DAMAGE CAUSED BY USE OF YOUR AMD PROCESSOR OUTSIDE OF SPECIFICATION OR IN EXCESS OF FACTORY SETTINGS ARE NOT COVERED UNDER YOUR AMD PRODUCT WARRANTY AND MAY NOT BE COVERED BY YOUR SYSTEM MANUFACTURER'S WARRANTY.\nOperating your AMD processor outside of specification or in excess of factory settings, including but not limited to overclocking, may damage or shorten the life of your processor or other system components, create system instabilities (e.g., data loss and corrupted images) and in extreme cases may result in total system failure. AMD does not provide support or service for issues or damages related to use of an AMD processor outside of processor specifications or in excess of factory settings.\n
              oneof
                varid       = CBS_CONFIG.CbsCpuPstCustomP4,
                questionid  = KEY_CUSTOM_PSTATE4,
                prompt      = STRING_TOKEN (AMD_CBS_STR_CUSTOM_PSTATE4),
                help        = STRING_TOKEN (AMD_CBS_STR_CUSTOM_PSTATE4_HELP),
                option text = STRING_TOKEN (AMD_CBS_STR_DISABLED),        value = 0,    flags = 0 | RESET_REQUIRED | INTERACTIVE;
                option text = STRING_TOKEN (AMD_CBS_STR_CUSTOM),          value = 1,    flags = 0 | RESET_REQUIRED | INTERACTIVE;
                option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 2,    flags = DEFAULT | RESET_REQUIRED | MANUFACTURING | INTERACTIVE;
              endoneof;
            endif;
          endif;

          // Display Condition: CbsCpuPstCustomP4=Custom
          // Active Condition: CbsCpuPstCustomP4=Auto
          suppressif NOT ideqval CBS_CONFIG.CbsCpuPstCustomP4 == 1 OR SHOW_ALL_CBS==0;
          grayoutif NOT ideqval CBS_CONFIG.CbsCpuPstCustomP4 == 2;
            //   Frequency (MHz)
            // No help string
            numeric
              varid       = CBS_CONFIG.CbsCpuCofP4,
              prompt      = STRING_TOKEN (AMD_CBS_STR_FREQUENCY_MHZ),
              help        = STRING_TOKEN (AMD_CBS_STR_FREQUENCY_MHZ_HELP),
              flags       = RESET_REQUIRED,
              minimum     = 0,
              maximum     = 0xffffffff,
              step        = 0,
              default     = 0,
            endnumeric;
          endif;
          endif;

          // Display Condition: CbsCpuPstCustomP4=Custom
          // Active Condition: CbsCpuPstCustomP4=Auto
          suppressif NOT ideqval CBS_CONFIG.CbsCpuPstCustomP4 == 1 OR SHOW_ALL_CBS==0;
          grayoutif NOT ideqval CBS_CONFIG.CbsCpuPstCustomP4 == 2;
            //   Voltage (uV)
            // No help string
            numeric
              varid       = CBS_CONFIG.CbsCpuVoltageP4,
              prompt      = STRING_TOKEN (AMD_CBS_STR_VOLTAGE_UV),
              help        = STRING_TOKEN (AMD_CBS_STR_VOLTAGE_UV_HELP),
              flags       = RESET_REQUIRED,
              minimum     = 0,
              maximum     = 0xffffffff,
              step        = 0,
              default     = 0,
            endnumeric;
          endif;
          endif;

          // Display Condition: CbsCpuPstCustomP4=Custom
          suppressif NOT ideqval CBS_CONFIG.CbsCpuPstCustomP4 == 1 OR SHOW_ALL_CBS==0;
            //   Pstate4 FID
            // Specifies the core frequency multiplier. COF = 200MHz * FID / DID
            numeric
              varid       = CBS_CONFIG.CbsCpuPst4Fid,
              questionid  = KEY_PSTATE4_FID,
              prompt      = STRING_TOKEN (AMD_CBS_STR_PSTATE4_FID),
              help        = STRING_TOKEN (AMD_CBS_STR_PSTATE4_FID_HELP),
              flags       = DISPLAY_UINT_HEX | RESET_REQUIRED | INTERACTIVE,
              minimum     = 0x10,
              maximum     = 0xff,
              step        = 0,
              default     = 16,
            endnumeric;
          endif;

          // Display Condition: CbsCpuPstCustomP4=Custom
          suppressif NOT ideqval CBS_CONFIG.CbsCpuPstCustomP4 == 1 OR SHOW_ALL_CBS==0;
            //   Pstate4 DID
            // Specifies the core frequency divisor (DID[0] should zero if DID[5:0]>1Ah).
            numeric
              varid       = CBS_CONFIG.CbsCpuPst4Did,
              questionid  = KEY_PSTATE4_DID,
              prompt      = STRING_TOKEN (AMD_CBS_STR_PSTATE4_DID),
              help        = STRING_TOKEN (AMD_CBS_STR_PSTATE4_DID_HELP),
              flags       = DISPLAY_UINT_HEX | RESET_REQUIRED | INTERACTIVE,
              minimum     = 0x8,
              maximum     = 0x30,
              step        = 0,
              default     = 8,
            endnumeric;
          endif;

          // Display Condition: CbsCpuPstCustomP4=Custom
          suppressif NOT ideqval CBS_CONFIG.CbsCpuPstCustomP4 == 1 OR SHOW_ALL_CBS==0;
            //   Pstate4 VID
            // Specifies the core voltage.
            numeric
              varid       = CBS_CONFIG.CbsCpuPst4Vid,
              questionid  = KEY_PSTATE4_VID,
              prompt      = STRING_TOKEN (AMD_CBS_STR_PSTATE4_VID),
              help        = STRING_TOKEN (AMD_CBS_STR_PSTATE4_VID_HELP),
              flags       = DISPLAY_UINT_HEX | RESET_REQUIRED | INTERACTIVE,
              minimum     = 0,
              maximum     = 0xff,
              step        = 0,
              default     = 255,
            endnumeric;
          endif;

          // Active Condition: CbsCpuPstCustomP4=Custom|CbsCpuPstCustomP4=Auto
          grayoutif NOT ideqval CBS_CONFIG.CbsCpuPstCustomP4 == 1
                AND NOT ideqval CBS_CONFIG.CbsCpuPstCustomP4 == 2;
            suppressif SHOW_ALL_CBS==0;
              // Custom Pstate5
              // Disabled - disable this Pstate\nCustom - customize this Pstate, applicable only if PcdOcDisable=FALSE\n\nWARNING - DAMAGE CAUSED BY USE OF YOUR AMD PROCESSOR OUTSIDE OF SPECIFICATION OR IN EXCESS OF FACTORY SETTINGS ARE NOT COVERED UNDER YOUR AMD PRODUCT WARRANTY AND MAY NOT BE COVERED BY YOUR SYSTEM MANUFACTURER'S WARRANTY.\nOperating your AMD processor outside of specification or in excess of factory settings, including but not limited to overclocking, may damage or shorten the life of your processor or other system components, create system instabilities (e.g., data loss and corrupted images) and in extreme cases may result in total system failure. AMD does not provide support or service for issues or damages related to use of an AMD processor outside of processor specifications or in excess of factory settings.\n
              oneof
                varid       = CBS_CONFIG.CbsCpuPstCustomP5,
                questionid  = KEY_CUSTOM_PSTATE5,
                prompt      = STRING_TOKEN (AMD_CBS_STR_CUSTOM_PSTATE5),
                help        = STRING_TOKEN (AMD_CBS_STR_CUSTOM_PSTATE5_HELP),
                option text = STRING_TOKEN (AMD_CBS_STR_DISABLED),        value = 0,    flags = 0 | RESET_REQUIRED | INTERACTIVE;
                option text = STRING_TOKEN (AMD_CBS_STR_CUSTOM),          value = 1,    flags = 0 | RESET_REQUIRED | INTERACTIVE;
                option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 2,    flags = DEFAULT | RESET_REQUIRED | MANUFACTURING | INTERACTIVE;
              endoneof;
            endif;
          endif;

          // Display Condition: CbsCpuPstCustomP5=Custom
          // Active Condition: CbsCpuPstCustomP5=Auto
          suppressif NOT ideqval CBS_CONFIG.CbsCpuPstCustomP5 == 1 OR SHOW_ALL_CBS==0;
          grayoutif NOT ideqval CBS_CONFIG.CbsCpuPstCustomP5 == 2;
            //   Frequency (MHz)
            // No help string
            numeric
              varid       = CBS_CONFIG.CbsCpuCofP5,
              prompt      = STRING_TOKEN (AMD_CBS_STR_FREQUENCY_MHZ),
              help        = STRING_TOKEN (AMD_CBS_STR_FREQUENCY_MHZ_HELP),
              flags       = RESET_REQUIRED,
              minimum     = 0,
              maximum     = 0xffffffff,
              step        = 0,
              default     = 0,
            endnumeric;
          endif;
          endif;

          // Display Condition: CbsCpuPstCustomP5=Custom
          // Active Condition: CbsCpuPstCustomP5=Auto
          suppressif NOT ideqval CBS_CONFIG.CbsCpuPstCustomP5 == 1 OR SHOW_ALL_CBS==0;
          grayoutif NOT ideqval CBS_CONFIG.CbsCpuPstCustomP5 == 2;
            //   Voltage (uV)
            // No help string
            numeric
              varid       = CBS_CONFIG.CbsCpuVoltageP5,
              prompt      = STRING_TOKEN (AMD_CBS_STR_VOLTAGE_UV),
              help        = STRING_TOKEN (AMD_CBS_STR_VOLTAGE_UV_HELP),
              flags       = RESET_REQUIRED,
              minimum     = 0,
              maximum     = 0xffffffff,
              step        = 0,
              default     = 0,
            endnumeric;
          endif;
          endif;

          // Display Condition: CbsCpuPstCustomP5=Custom
          suppressif NOT ideqval CBS_CONFIG.CbsCpuPstCustomP5 == 1 OR SHOW_ALL_CBS==0;
            //   Pstate5 FID
            // Specifies the core frequency multiplier. COF = 200MHz * FID / DID
            numeric
              varid       = CBS_CONFIG.CbsCpuPst5Fid,
              questionid  = KEY_PSTATE5_FID,
              prompt      = STRING_TOKEN (AMD_CBS_STR_PSTATE5_FID),
              help        = STRING_TOKEN (AMD_CBS_STR_PSTATE5_FID_HELP),
              flags       = DISPLAY_UINT_HEX | RESET_REQUIRED | INTERACTIVE,
              minimum     = 0x10,
              maximum     = 0xff,
              step        = 0,
              default     = 16,
            endnumeric;
          endif;

          // Display Condition: CbsCpuPstCustomP5=Custom
          suppressif NOT ideqval CBS_CONFIG.CbsCpuPstCustomP5 == 1 OR SHOW_ALL_CBS==0;
            //   Pstate5 DID
            // Specifies the core frequency divisor (DID[0] should zero if DID[5:0]>1Ah).
            numeric
              varid       = CBS_CONFIG.CbsCpuPst5Did,
              questionid  = KEY_PSTATE5_DID,
              prompt      = STRING_TOKEN (AMD_CBS_STR_PSTATE5_DID),
              help        = STRING_TOKEN (AMD_CBS_STR_PSTATE5_DID_HELP),
              flags       = DISPLAY_UINT_HEX | RESET_REQUIRED | INTERACTIVE,
              minimum     = 0x8,
              maximum     = 0x30,
              step        = 0,
              default     = 8,
            endnumeric;
          endif;

          // Display Condition: CbsCpuPstCustomP5=Custom
          suppressif NOT ideqval CBS_CONFIG.CbsCpuPstCustomP5 == 1 OR SHOW_ALL_CBS==0;
            //   Pstate5 VID
            // Specifies the core voltage.
            numeric
              varid       = CBS_CONFIG.CbsCpuPst5Vid,
              questionid  = KEY_PSTATE5_VID,
              prompt      = STRING_TOKEN (AMD_CBS_STR_PSTATE5_VID),
              help        = STRING_TOKEN (AMD_CBS_STR_PSTATE5_VID_HELP),
              flags       = DISPLAY_UINT_HEX | RESET_REQUIRED | INTERACTIVE,
              minimum     = 0,
              maximum     = 0xff,
              step        = 0,
              default     = 255,
            endnumeric;
          endif;

          // Active Condition: CbsCpuPstCustomP5=Custom|CbsCpuPstCustomP5=Auto
          grayoutif NOT ideqval CBS_CONFIG.CbsCpuPstCustomP5 == 1
                AND NOT ideqval CBS_CONFIG.CbsCpuPstCustomP5 == 2;
            suppressif SHOW_ALL_CBS==0;
              // Custom Pstate6
              // Disabled - disable this Pstate\nCustom - customize this Pstate, applicable only if PcdOcDisable=FALSE\n\nWARNING - DAMAGE CAUSED BY USE OF YOUR AMD PROCESSOR OUTSIDE OF SPECIFICATION OR IN EXCESS OF FACTORY SETTINGS ARE NOT COVERED UNDER YOUR AMD PRODUCT WARRANTY AND MAY NOT BE COVERED BY YOUR SYSTEM MANUFACTURER'S WARRANTY.\nOperating your AMD processor outside of specification or in excess of factory settings, including but not limited to overclocking, may damage or shorten the life of your processor or other system components, create system instabilities (e.g., data loss and corrupted images) and in extreme cases may result in total system failure. AMD does not provide support or service for issues or damages related to use of an AMD processor outside of processor specifications or in excess of factory settings.\n
              oneof
                varid       = CBS_CONFIG.CbsCpuPstCustomP6,
                questionid  = KEY_CUSTOM_PSTATE6,
                prompt      = STRING_TOKEN (AMD_CBS_STR_CUSTOM_PSTATE6),
                help        = STRING_TOKEN (AMD_CBS_STR_CUSTOM_PSTATE6_HELP),
                option text = STRING_TOKEN (AMD_CBS_STR_DISABLED),        value = 0,    flags = 0 | RESET_REQUIRED | INTERACTIVE;
                option text = STRING_TOKEN (AMD_CBS_STR_CUSTOM),          value = 1,    flags = 0 | RESET_REQUIRED | INTERACTIVE;
                option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 2,    flags = DEFAULT | RESET_REQUIRED | MANUFACTURING | INTERACTIVE;
              endoneof;
            endif;
          endif;

          // Display Condition: CbsCpuPstCustomP6=Custom
          // Active Condition: CbsCpuPstCustomP6=Auto
          suppressif NOT ideqval CBS_CONFIG.CbsCpuPstCustomP6 == 1 OR SHOW_ALL_CBS==0;
          grayoutif NOT ideqval CBS_CONFIG.CbsCpuPstCustomP6 == 2;
            //   Frequency (MHz)
            // No help string
            numeric
              varid       = CBS_CONFIG.CbsCpuCofP6,
              prompt      = STRING_TOKEN (AMD_CBS_STR_FREQUENCY_MHZ),
              help        = STRING_TOKEN (AMD_CBS_STR_FREQUENCY_MHZ_HELP),
              flags       = RESET_REQUIRED,
              minimum     = 0,
              maximum     = 0xffffffff,
              step        = 0,
              default     = 0,
            endnumeric;
          endif;
          endif;

          // Display Condition: CbsCpuPstCustomP6=Custom
          // Active Condition: CbsCpuPstCustomP6=Auto
          suppressif NOT ideqval CBS_CONFIG.CbsCpuPstCustomP6 == 1 OR SHOW_ALL_CBS==0;
          grayoutif NOT ideqval CBS_CONFIG.CbsCpuPstCustomP6 == 2;
            //   Voltage (uV)
            // No help string
            numeric
              varid       = CBS_CONFIG.CbsCpuVoltageP6,
              prompt      = STRING_TOKEN (AMD_CBS_STR_VOLTAGE_UV),
              help        = STRING_TOKEN (AMD_CBS_STR_VOLTAGE_UV_HELP),
              flags       = RESET_REQUIRED,
              minimum     = 0,
              maximum     = 0xffffffff,
              step        = 0,
              default     = 0,
            endnumeric;
          endif;
          endif;

          // Display Condition: CbsCpuPstCustomP6=Custom
          suppressif NOT ideqval CBS_CONFIG.CbsCpuPstCustomP6 == 1 OR SHOW_ALL_CBS==0;
            //   Pstate6 FID
            // Specifies the core frequency multiplier. COF = 200MHz * FID / DID
            numeric
              varid       = CBS_CONFIG.CbsCpuPst6Fid,
              questionid  = KEY_PSTATE6_FID,
              prompt      = STRING_TOKEN (AMD_CBS_STR_PSTATE6_FID),
              help        = STRING_TOKEN (AMD_CBS_STR_PSTATE6_FID_HELP),
              flags       = DISPLAY_UINT_HEX | RESET_REQUIRED | INTERACTIVE,
              minimum     = 0x10,
              maximum     = 0xff,
              step        = 0,
              default     = 16,
            endnumeric;
          endif;

          // Display Condition: CbsCpuPstCustomP6=Custom
          suppressif NOT ideqval CBS_CONFIG.CbsCpuPstCustomP6 == 1 OR SHOW_ALL_CBS==0;
            //   Pstate6 DID
            // Specifies the core frequency divisor (DID[0] should zero if DID[5:0]>1Ah).
            numeric
              varid       = CBS_CONFIG.CbsCpuPst6Did,
              questionid  = KEY_PSTATE6_DID,
              prompt      = STRING_TOKEN (AMD_CBS_STR_PSTATE6_DID),
              help        = STRING_TOKEN (AMD_CBS_STR_PSTATE6_DID_HELP),
              flags       = DISPLAY_UINT_HEX | RESET_REQUIRED | INTERACTIVE,
              minimum     = 0x8,
              maximum     = 0x30,
              step        = 0,
              default     = 8,
            endnumeric;
          endif;

          // Display Condition: CbsCpuPstCustomP6=Custom
          suppressif NOT ideqval CBS_CONFIG.CbsCpuPstCustomP6 == 1 OR SHOW_ALL_CBS==0;
            //   Pstate6 VID
            // Specifies the core voltage.
            numeric
              varid       = CBS_CONFIG.CbsCpuPst6Vid,
              questionid  = KEY_PSTATE6_VID,
              prompt      = STRING_TOKEN (AMD_CBS_STR_PSTATE6_VID),
              help        = STRING_TOKEN (AMD_CBS_STR_PSTATE6_VID_HELP),
              flags       = DISPLAY_UINT_HEX | RESET_REQUIRED | INTERACTIVE,
              minimum     = 0,
              maximum     = 0xff,
              step        = 0,
              default     = 255,
            endnumeric;
          endif;

          // Active Condition: CbsCpuPstCustomP6=Custom|CbsCpuPstCustomP6=Auto
          grayoutif NOT ideqval CBS_CONFIG.CbsCpuPstCustomP6 == 1
                AND NOT ideqval CBS_CONFIG.CbsCpuPstCustomP6 == 2;
            suppressif SHOW_ALL_CBS==0;
              // Custom Pstate7
              // Disabled - disable this Pstate\nCustom - customize this Pstate, applicable only if PcdOcDisable=FALSE\n\nWARNING - DAMAGE CAUSED BY USE OF YOUR AMD PROCESSOR OUTSIDE OF SPECIFICATION OR IN EXCESS OF FACTORY SETTINGS ARE NOT COVERED UNDER YOUR AMD PRODUCT WARRANTY AND MAY NOT BE COVERED BY YOUR SYSTEM MANUFACTURER'S WARRANTY.\nOperating your AMD processor outside of specification or in excess of factory settings, including but not limited to overclocking, may damage or shorten the life of your processor or other system components, create system instabilities (e.g., data loss and corrupted images) and in extreme cases may result in total system failure. AMD does not provide support or service for issues or damages related to use of an AMD processor outside of processor specifications or in excess of factory settings.\n
              oneof
                varid       = CBS_CONFIG.CbsCpuPstCustomP7,
                questionid  = KEY_CUSTOM_PSTATE7,
                prompt      = STRING_TOKEN (AMD_CBS_STR_CUSTOM_PSTATE7),
                help        = STRING_TOKEN (AMD_CBS_STR_CUSTOM_PSTATE7_HELP),
                option text = STRING_TOKEN (AMD_CBS_STR_DISABLED),        value = 0,    flags = 0 | RESET_REQUIRED | INTERACTIVE;
                option text = STRING_TOKEN (AMD_CBS_STR_CUSTOM),          value = 1,    flags = 0 | RESET_REQUIRED | INTERACTIVE;
                option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 2,    flags = DEFAULT | RESET_REQUIRED | MANUFACTURING | INTERACTIVE;
              endoneof;
            endif;
          endif;

          // Display Condition: CbsCpuPstCustomP7=Custom
          // Active Condition: CbsCpuPstCustomP7=Auto
          suppressif NOT ideqval CBS_CONFIG.CbsCpuPstCustomP7 == 1 OR SHOW_ALL_CBS==0;
          grayoutif NOT ideqval CBS_CONFIG.CbsCpuPstCustomP7 == 2;
            //   Frequency (MHz)
            // No help string
            numeric
              varid       = CBS_CONFIG.CbsCpuCofP7,
              prompt      = STRING_TOKEN (AMD_CBS_STR_FREQUENCY_MHZ),
              help        = STRING_TOKEN (AMD_CBS_STR_FREQUENCY_MHZ_HELP),
              flags       = RESET_REQUIRED,
              minimum     = 0,
              maximum     = 0xffffffff,
              step        = 0,
              default     = 0,
            endnumeric;
          endif;
          endif;

          // Display Condition: CbsCpuPstCustomP7=Custom
          // Active Condition: CbsCpuPstCustomP7=Auto
          suppressif NOT ideqval CBS_CONFIG.CbsCpuPstCustomP7 == 1 OR SHOW_ALL_CBS==0;
          grayoutif NOT ideqval CBS_CONFIG.CbsCpuPstCustomP7 == 2;
            //   Voltage (uV)
            // No help string
            numeric
              varid       = CBS_CONFIG.CbsCpuVoltageP7,
              prompt      = STRING_TOKEN (AMD_CBS_STR_VOLTAGE_UV),
              help        = STRING_TOKEN (AMD_CBS_STR_VOLTAGE_UV_HELP),
              flags       = RESET_REQUIRED,
              minimum     = 0,
              maximum     = 0xffffffff,
              step        = 0,
              default     = 0,
            endnumeric;
          endif;
          endif;

          // Display Condition: CbsCpuPstCustomP7=Custom
          suppressif NOT ideqval CBS_CONFIG.CbsCpuPstCustomP7 == 1 OR SHOW_ALL_CBS==0;
            //   Pstate7 FID
            // Specifies the core frequency multiplier. COF = 200MHz * FID / DID
            numeric
              varid       = CBS_CONFIG.CbsCpuPst7Fid,
              questionid  = KEY_PSTATE7_FID,
              prompt      = STRING_TOKEN (AMD_CBS_STR_PSTATE7_FID),
              help        = STRING_TOKEN (AMD_CBS_STR_PSTATE7_FID_HELP),
              flags       = DISPLAY_UINT_HEX | RESET_REQUIRED | INTERACTIVE,
              minimum     = 0x10,
              maximum     = 0xff,
              step        = 0,
              default     = 16,
            endnumeric;
          endif;

          // Display Condition: CbsCpuPstCustomP7=Custom
          suppressif NOT ideqval CBS_CONFIG.CbsCpuPstCustomP7 == 1 OR SHOW_ALL_CBS==0;
            //   Pstate7 DID
            // Specifies the core frequency divisor (DID[0] should zero if DID[5:0]>1Ah).
            numeric
              varid       = CBS_CONFIG.CbsCpuPst7Did,
              questionid  = KEY_PSTATE7_DID,
              prompt      = STRING_TOKEN (AMD_CBS_STR_PSTATE7_DID),
              help        = STRING_TOKEN (AMD_CBS_STR_PSTATE7_DID_HELP),
              flags       = DISPLAY_UINT_HEX | RESET_REQUIRED | INTERACTIVE,
              minimum     = 0x8,
              maximum     = 0x30,
              step        = 0,
              default     = 8,
            endnumeric;
          endif;

          // Display Condition: CbsCpuPstCustomP7=Custom
          suppressif NOT ideqval CBS_CONFIG.CbsCpuPstCustomP7 == 1 OR SHOW_ALL_CBS==0;
            //   Pstate7 VID
            // Specifies the core voltage.
            numeric
              varid       = CBS_CONFIG.CbsCpuPst7Vid,
              questionid  = KEY_PSTATE7_VID,
              prompt      = STRING_TOKEN (AMD_CBS_STR_PSTATE7_VID),
              help        = STRING_TOKEN (AMD_CBS_STR_PSTATE7_VID_HELP),
              flags       = DISPLAY_UINT_HEX | RESET_REQUIRED | INTERACTIVE,
              minimum     = 0,
              maximum     = 0xff,
              step        = 0,
              default     = 255,
            endnumeric;
          endif;

        endform;
      //
      // form - Core/Thread Enablement
      //
      form

        formid        = SETUP_CORE_THREAD_ENABLEMENT_LABLE,

        title         = STRING_TOKEN (AMD_CBS_STR_CORE_THREAD_ENABLEMENT_SECTION);

        subtitle text = STRING_TOKEN (AMD_CBS_STR_CORE_THREAD_ENABLEMENT_SECTION);
        subtitle text = STRING_TOKEN (AMD_CBS_STR_BLANK);

        // Core/Thread Enablement Legal Disclaimer
        // Legal Disclaimer
        text
          help        = STRING_TOKEN (AMD_CBS_STR_CORE_THREAD_ENABLEMENT_LEGAL_DISCLAIMER_HELP),
          text        = STRING_TOKEN (AMD_CBS_STR_CORE_THREAD_ENABLEMENT_LEGAL_DISCLAIMER);

        goto SETUP_DISAGREE_LABLE,
          prompt      = STRING_TOKEN (AMD_CBS_STR_DISAGREE_SECTION),
          help        = STRING_TOKEN (AMD_CBS_STR_DISAGREE_SECTION);

        goto SETUP_AGREE_LABLE,
          prompt      = STRING_TOKEN (AMD_CBS_STR_AGREE_SECTION),
          help        = STRING_TOKEN (AMD_CBS_STR_AGREE_SECTION);

      endform;
        //
        // form - Disagree
        //
        form

          formid        = SETUP_DISAGREE_LABLE,

          title         = STRING_TOKEN (AMD_CBS_STR_DISAGREE_SECTION);

          subtitle text = STRING_TOKEN (AMD_CBS_STR_DISAGREE_SECTION);
          subtitle text = STRING_TOKEN (AMD_CBS_STR_BLANK);

        endform;
        //
        // form - Agree
        //
        form

          formid        = SETUP_AGREE_LABLE,

          title         = STRING_TOKEN (AMD_CBS_STR_AGREE_SECTION);

          subtitle text = STRING_TOKEN (AMD_CBS_STR_AGREE_SECTION);
          subtitle text = STRING_TOKEN (AMD_CBS_STR_BLANK);

          // Active Condition: CbsCmnCpuOcMode=Normal Operation
          grayoutif NOT ideqval CBS_CONFIG.CbsCmnCpuOcMode == 0;
            // Downcore control
            // Sets the number of cores to be used. Once this option has been used to remove any cores, a POWER CYCLE is required in order for future selections to take effect.
            oneof
              varid       = CBS_CONFIG.CbsCmnCpuGenDowncoreCtrl,
              prompt      = STRING_TOKEN (AMD_CBS_STR_DOWNCORE_CONTROL),
              help        = STRING_TOKEN (AMD_CBS_STR_DOWNCORE_CONTROL_HELP),
              option text = STRING_TOKEN (AMD_CBS_STR_TWO_1_1),         value = 2,    flags = 0 | RESET_REQUIRED;
              option text = STRING_TOKEN (AMD_CBS_STR_TWO_2_0),         value = 3,    flags = 0 | RESET_REQUIRED;
              option text = STRING_TOKEN (AMD_CBS_STR_THREE_3_0),       value = 4,    flags = 0 | RESET_REQUIRED;
              option text = STRING_TOKEN (AMD_CBS_STR_FOUR_2_2),        value = 5,    flags = 0 | RESET_REQUIRED;
              option text = STRING_TOKEN (AMD_CBS_STR_FOUR_4_0),        value = 6,    flags = 0 | RESET_REQUIRED;
              option text = STRING_TOKEN (AMD_CBS_STR_SIX_3_3),         value = 7,    flags = 0 | RESET_REQUIRED;
              option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0,    flags = DEFAULT | RESET_REQUIRED | MANUFACTURING;
            endoneof;
          endif;

        endform;
      //
      // form - Prefetcher settings
      //
      form

        formid        = SETUP_PREFETCHER_SETTINGS_LABLE,

        title         = STRING_TOKEN (AMD_CBS_STR_PREFETCHER_SETTINGS_SECTION);

        subtitle text = STRING_TOKEN (AMD_CBS_STR_PREFETCHER_SETTINGS_SECTION);
        subtitle text = STRING_TOKEN (AMD_CBS_STR_BLANK);

        // L1 Stream HW Prefetcher
        // Option to Enable | Disable L1 Stream HW Prefetcher
        oneof
          varid       = CBS_CONFIG.CbsCmnCpuL1StreamHwPrefetcher,
          prompt      = STRING_TOKEN (AMD_CBS_STR_L1_STREAM_HW_PREFETCHER),
          help        = STRING_TOKEN (AMD_CBS_STR_L1_STREAM_HW_PREFETCHER_HELP),
          option text = STRING_TOKEN (AMD_CBS_STR_DISABLE),         value = 0,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_ENABLE),          value = 1,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 3,    flags = DEFAULT | RESET_REQUIRED | MANUFACTURING;
        endoneof;

        // L2 Stream HW Prefetcher
        // Option to Enable | Disable L2 Stream HW Prefetcher
        oneof
          varid       = CBS_CONFIG.CbsCmnCpuL2StreamHwPrefetcher,
          prompt      = STRING_TOKEN (AMD_CBS_STR_L2_STREAM_HW_PREFETCHER),
          help        = STRING_TOKEN (AMD_CBS_STR_L2_STREAM_HW_PREFETCHER_HELP),
          option text = STRING_TOKEN (AMD_CBS_STR_DISABLE),         value = 0,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_ENABLE),          value = 1,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 3,    flags = DEFAULT | RESET_REQUIRED | MANUFACTURING;
        endoneof;

      endform;
    //
    // form - DF Common Options
    //
    form

      formid        = SETUP_DF_COMMON_OPTIONS_LABLE,

      title         = STRING_TOKEN (AMD_CBS_STR_DF_COMMON_OPTIONS_SECTION);

      subtitle text = STRING_TOKEN (AMD_CBS_STR_DF_COMMON_OPTIONS_SECTION);
      subtitle text = STRING_TOKEN (AMD_CBS_STR_BLANK);

      suppressif SHOW_ALL_CBS==0;
        // DRAM scrub time
        // Provide a value that is the number of hours to scrub memory.
        oneof
          varid       = CBS_CONFIG.CbsDfCmnDramScrubTime,
          prompt      = STRING_TOKEN (AMD_CBS_STR_DRAM_SCRUB_TIME),
          help        = STRING_TOKEN (AMD_CBS_STR_DRAM_SCRUB_TIME_HELP),
          option text = STRING_TOKEN (AMD_CBS_STR_DISABLED),        value = 0,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_1_HOUR),          value = 1,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_4_HOURS),         value = 2,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_8_HOURS),         value = 3,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_16_HOURS),        value = 4,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_24_HOURS),        value = 5,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_48_HOURS),        value = 6,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 7,    flags = DEFAULT | RESET_REQUIRED | MANUFACTURING;
        endoneof;
      endif;

      suppressif SHOW_ALL_CBS==0;
        // Redirect scrubber control
        // Control DF::RedirScrubCtrl[EnRedirScrub]
        oneof
          varid       = CBS_CONFIG.CbsDfCmnRedirScrubCtrl,
          prompt      = STRING_TOKEN (AMD_CBS_STR_REDIRECT_SCRUBBER_CONTROL),
          help        = STRING_TOKEN (AMD_CBS_STR_REDIRECT_SCRUBBER_CONTROL_HELP),
          option text = STRING_TOKEN (AMD_CBS_STR_DISABLED),        value = 0,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_ENABLED),         value = 1,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 3,    flags = DEFAULT | RESET_REQUIRED | MANUFACTURING;
        endoneof;
      endif;

      suppressif SHOW_ALL_CBS==0;
        // Disable DF sync flood propagation
        // Control DF::PIEConfig[DisSyncFloodProp]
        oneof
          varid       = CBS_CONFIG.CbsDfCmnSyncFloodProp,
          prompt      = STRING_TOKEN (AMD_CBS_STR_DISABLE_DF_SYNC_FLOOD_PROPAGATION),
          help        = STRING_TOKEN (AMD_CBS_STR_DISABLE_DF_SYNC_FLOOD_PROPAGATION_HELP),
          option text = STRING_TOKEN (AMD_CBS_STR_SYNC_FLOOD_DISABLED), value = 0,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_SYNC_FLOOD_ENABLED), value = 1,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 3,    flags = DEFAULT | RESET_REQUIRED | MANUFACTURING;
        endoneof;
      endif;

      suppressif SHOW_ALL_CBS==0;
        // Freeze DF module queues on error
        // Controls DF::PIEConfig[DisImmSyncFloodOnFatalError]\nDisabling this option sets DF:PIEConfig[DisImmSyncFloodOnFatalError]
        oneof
          varid       = CBS_CONFIG.CbsDfCmnFreezeQueueError,
          prompt      = STRING_TOKEN (AMD_CBS_STR_FREEZE_DF_MODULE_QUEUES_ON_ERROR),
          help        = STRING_TOKEN (AMD_CBS_STR_FREEZE_DF_MODULE_QUEUES_ON_ERROR_HELP),
          option text = STRING_TOKEN (AMD_CBS_STR_DISABLED),        value = 0,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_ENABLED),         value = 1,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 3,    flags = DEFAULT | RESET_REQUIRED | MANUFACTURING;
        endoneof;
      endif;

      suppressif SHOW_ALL_CBS==0;
        // GMI encryption control
        // Control GMI link encryption
        oneof
          varid       = CBS_CONFIG.CbsDfCmnGmiEncryption,
          prompt      = STRING_TOKEN (AMD_CBS_STR_GMI_ENCRYPTION_CONTROL),
          help        = STRING_TOKEN (AMD_CBS_STR_GMI_ENCRYPTION_CONTROL_HELP),
          option text = STRING_TOKEN (AMD_CBS_STR_DISABLED),        value = 0,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_ENABLED),         value = 1,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 3,    flags = DEFAULT | RESET_REQUIRED | MANUFACTURING;
        endoneof;
      endif;

      suppressif SHOW_ALL_CBS==0;
        // xGMI encryption control
        // Control xGMI link encryption
        oneof
          varid       = CBS_CONFIG.CbsDfCmnXGmiEncryption,
          prompt      = STRING_TOKEN (AMD_CBS_STR_XGMI_ENCRYPTION_CONTROL),
          help        = STRING_TOKEN (AMD_CBS_STR_XGMI_ENCRYPTION_CONTROL_HELP),
          option text = STRING_TOKEN (AMD_CBS_STR_DISABLED),        value = 0,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_ENABLED),         value = 1,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 3,    flags = DEFAULT | RESET_REQUIRED | MANUFACTURING;
        endoneof;
      endif;

      suppressif SHOW_ALL_CBS==0;
        // CC6 memory region encryption
        // Control whether or not the CC6 save/restore memory is encrypted
        oneof
          varid       = CBS_CONFIG.CbsDfCmnCc6MemEncryption,
          prompt      = STRING_TOKEN (AMD_CBS_STR_CC6_MEMORY_REGION_ENCRYPTION),
          help        = STRING_TOKEN (AMD_CBS_STR_CC6_MEMORY_REGION_ENCRYPTION_HELP),
          option text = STRING_TOKEN (AMD_CBS_STR_DISABLED),        value = 0,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_ENABLED),         value = 1,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 3,    flags = DEFAULT | RESET_REQUIRED | MANUFACTURING;
        endoneof;
      endif;

      suppressif SHOW_ALL_CBS==0;
        // Location of private memory regions
        // Controls whether or not the private memory regions (PSP, SMU and CC6) are at the top of DRAM or distributed. Note that distributed requires memory on all dies. Note that it will always be at the top of DRAM if some dies don't have memory regardless of this option's setting.
        oneof
          varid       = CBS_CONFIG.CbsDfCmnCc6AllocationScheme,
          prompt      = STRING_TOKEN (AMD_CBS_STR_LOCATION_OF_PRIVATE_MEMORY_REGIONS),
          help        = STRING_TOKEN (AMD_CBS_STR_LOCATION_OF_PRIVATE_MEMORY_REGIONS_HELP),
          option text = STRING_TOKEN (AMD_CBS_STR_DISTRIBUTED),     value = 0,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_CONSOLIDATED),    value = 1,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 3,    flags = DEFAULT | RESET_REQUIRED | MANUFACTURING;
        endoneof;
      endif;

      suppressif SHOW_ALL_CBS==0;
        // System probe filter
        // Controls whether or not the probe filter is enabled. Has no effect on parts where the probe filter is fuse disabled.
        oneof
          varid       = CBS_CONFIG.CbsDfCmnSysProbeFilter,
          prompt      = STRING_TOKEN (AMD_CBS_STR_SYSTEM_PROBE_FILTER),
          help        = STRING_TOKEN (AMD_CBS_STR_SYSTEM_PROBE_FILTER_HELP),
          option text = STRING_TOKEN (AMD_CBS_STR_DISABLED),        value = 0,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_ENABLED),         value = 1,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 3,    flags = DEFAULT | RESET_REQUIRED | MANUFACTURING;
        endoneof;
      endif;

      // Memory interleaving
      // Controls fabric level memory interleaving (AUTO, none, channel, die, socket). Note that channel, die, and socket has requirements on memory populations and it will be ignored if the memory doesn't support the selected option.
      oneof
        varid       = CBS_CONFIG.CbsDfCmnMemIntlv,
        prompt      = STRING_TOKEN (AMD_CBS_STR_MEMORY_INTERLEAVING),
        help        = STRING_TOKEN (AMD_CBS_STR_MEMORY_INTERLEAVING_HELP),
        option text = STRING_TOKEN (AMD_CBS_STR_NONE),            value = 0,    flags = 0 | RESET_REQUIRED;
        option text = STRING_TOKEN (AMD_CBS_STR_CHANNEL),         value = 1,    flags = 0 | RESET_REQUIRED;
        option text = STRING_TOKEN (AMD_CBS_STR_DIE),             value = 2,    flags = 0 | RESET_REQUIRED;
        suppressif NOT ideqval CBS_CONFIG.CbsComboFlag == 2;
        option text = STRING_TOKEN (AMD_CBS_STR_SOCKET),          value = 3,    flags = 0 | RESET_REQUIRED;
        endif;
        option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 7,    flags = DEFAULT | RESET_REQUIRED | MANUFACTURING;
      endoneof;

      // Memory interleaving size
      // Controls the memory interleaving size. The valid values are AUTO, 256 bytes, 512 bytes, 1 Kbytes or 2Kbytes. This determines the starting address of the interleave (bit 8, 9, 10 or 11).
      oneof
        varid       = CBS_CONFIG.CbsDfCmnMemIntlvSize,
        prompt      = STRING_TOKEN (AMD_CBS_STR_MEMORY_INTERLEAVING_SIZE),
        help        = STRING_TOKEN (AMD_CBS_STR_MEMORY_INTERLEAVING_SIZE_HELP),
        option text = STRING_TOKEN (AMD_CBS_STR_256_BYTES),       value = 0,    flags = 0 | RESET_REQUIRED;
        option text = STRING_TOKEN (AMD_CBS_STR_512_BYTES),       value = 1,    flags = 0 | RESET_REQUIRED;
        suppressif NOT ideqval CBS_CONFIG.CbsDfCmnChnlIntlvHash == 0;
        option text = STRING_TOKEN (AMD_CBS_STR_1_KB),            value = 2,    flags = 0 | RESET_REQUIRED;
        option text = STRING_TOKEN (AMD_CBS_STR_2_KB),            value = 3,    flags = 0 | RESET_REQUIRED;
        endif;
        option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 7,    flags = DEFAULT | RESET_REQUIRED | MANUFACTURING;
      endoneof;

      suppressif SHOW_ALL_CBS==0;
        // Channel interleaving hash
        // Controls whether or not the address bits are hashed during channel interleave mode. This field should not be used unless the interleaving is set to channel and the interleaving size is 256 or 512 bytes.
        oneof
          varid       = CBS_CONFIG.CbsDfCmnChnlIntlvHash,
          prompt      = STRING_TOKEN (AMD_CBS_STR_CHANNEL_INTERLEAVING_HASH),
          help        = STRING_TOKEN (AMD_CBS_STR_CHANNEL_INTERLEAVING_HASH_HELP),
          option text = STRING_TOKEN (AMD_CBS_STR_DISABLED),        value = 0,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_ENABLED),         value = 1,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 3,    flags = DEFAULT | RESET_REQUIRED | MANUFACTURING;
        endoneof;
      endif;

      suppressif SHOW_ALL_CBS==0;
        // Memory Clear
        // When this feature is disabled, BIOS does not implement MemClear after memory training (only if non-ECC DIMMs are used).
        oneof
          varid       = CBS_CONFIG.CbsDfCmnMemClear,
          prompt      = STRING_TOKEN (AMD_CBS_STR_MEMORY_CLEAR),
          help        = STRING_TOKEN (AMD_CBS_STR_MEMORY_CLEAR_HELP),
          option text = STRING_TOKEN (AMD_CBS_STR_ENABLED),         value = 0,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_DISABLED),        value = 1,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 3,    flags = DEFAULT | RESET_REQUIRED | MANUFACTURING;
        endoneof;
      endif;

    endform;
    //
    // form - UMC Common Options
    //
    form

      formid        = SETUP_UMC_COMMON_OPTIONS_LABLE,

      title         = STRING_TOKEN (AMD_CBS_STR_UMC_COMMON_OPTIONS_SECTION);

      subtitle text = STRING_TOKEN (AMD_CBS_STR_UMC_COMMON_OPTIONS_SECTION);
      subtitle text = STRING_TOKEN (AMD_CBS_STR_BLANK);

      suppressif SHOW_ALL_CBS==0;
        goto SETUP_DDR4_COMMON_OPTIONS_LABLE,
          prompt      = STRING_TOKEN (AMD_CBS_STR_DDR4_COMMON_OPTIONS_SECTION),
          help        = STRING_TOKEN (AMD_CBS_STR_DDR4_COMMON_OPTIONS_SECTION);
      endif;

      goto SETUP_DRAM_MEMORY_MAPPING_LABLE,
        prompt      = STRING_TOKEN (AMD_CBS_STR_DRAM_MEMORY_MAPPING_SECTION),
        help        = STRING_TOKEN (AMD_CBS_STR_DRAM_MEMORY_MAPPING_SECTION);

      suppressif TRUE;
        goto SETUP_MEMORY_MBIST_LABLE,
          prompt      = STRING_TOKEN (AMD_CBS_STR_MEMORY_MBIST_SECTION),
          help        = STRING_TOKEN (AMD_CBS_STR_MEMORY_MBIST_SECTION);
      endif;

    endform;
      //
      // form - DDR4 Common Options
      //
      form

        formid        = SETUP_DDR4_COMMON_OPTIONS_LABLE,

        title         = STRING_TOKEN (AMD_CBS_STR_DDR4_COMMON_OPTIONS_SECTION);

        subtitle text = STRING_TOKEN (AMD_CBS_STR_DDR4_COMMON_OPTIONS_SECTION);
        subtitle text = STRING_TOKEN (AMD_CBS_STR_BLANK);

        suppressif SHOW_ALL_CBS==0;
          goto SETUP_DRAM_TIMING_CONFIGURATION_LABLE,
            prompt      = STRING_TOKEN (AMD_CBS_STR_DRAM_TIMING_CONFIGURATION_SECTION),
            help        = STRING_TOKEN (AMD_CBS_STR_DRAM_TIMING_CONFIGURATION_SECTION);
        endif;

        suppressif SHOW_ALL_CBS==0;
          goto SETUP_DRAM_CONTROLLER_CONFIGURATION_LABLE,
            prompt      = STRING_TOKEN (AMD_CBS_STR_DRAM_CONTROLLER_CONFIGURATION_SECTION),
            help        = STRING_TOKEN (AMD_CBS_STR_DRAM_CONTROLLER_CONFIGURATION_SECTION);
        endif;

        suppressif SHOW_ALL_CBS==0;
          goto SETUP_DATA_BUS_CONFIGURATION_LABLE,
            prompt      = STRING_TOKEN (AMD_CBS_STR_DATA_BUS_CONFIGURATION_SECTION),
            help        = STRING_TOKEN (AMD_CBS_STR_DATA_BUS_CONFIGURATION_SECTION);
        endif;

        suppressif SHOW_ALL_CBS==0;
          goto SETUP_COMMON_RAS_LABLE,
            prompt      = STRING_TOKEN (AMD_CBS_STR_COMMON_RAS_SECTION),
            help        = STRING_TOKEN (AMD_CBS_STR_COMMON_RAS_SECTION);
        endif;

        suppressif SHOW_ALL_CBS==0;
          goto SETUP_SECURITY_LABLE,
            prompt      = STRING_TOKEN (AMD_CBS_STR_SECURITY_SECTION),
            help        = STRING_TOKEN (AMD_CBS_STR_SECURITY_SECTION);
        endif;

      endform;
        //
        // form - DRAM Timing Configuration
        //
        form

          formid        = SETUP_DRAM_TIMING_CONFIGURATION_LABLE,

          title         = STRING_TOKEN (AMD_CBS_STR_DRAM_TIMING_CONFIGURATION_SECTION);

          subtitle text = STRING_TOKEN (AMD_CBS_STR_DRAM_TIMING_CONFIGURATION_SECTION);
          subtitle text = STRING_TOKEN (AMD_CBS_STR_BLANK);

          suppressif SHOW_ALL_CBS==0;
            // DRAM Timing Configuration Legal Disclaimer
            // No help string
            text
              help        = STRING_TOKEN (AMD_CBS_STR_DRAM_TIMING_CONFIGURATION_LEGAL_DISCLAIMER_HELP),
              text        = STRING_TOKEN (AMD_CBS_STR_DRAM_TIMING_CONFIGURATION_LEGAL_DISCLAIMER);
          endif;

          suppressif SHOW_ALL_CBS==0;
            // DRAM Timing Configuration Legal Disclaimer 1
            // No help string
            text
              help        = STRING_TOKEN (AMD_CBS_STR_DRAM_TIMING_CONFIGURATION_LEGAL_DISCLAIMER_1_HELP),
              text        = STRING_TOKEN (AMD_CBS_STR_DRAM_TIMING_CONFIGURATION_LEGAL_DISCLAIMER_1);
          endif;

          suppressif SHOW_ALL_CBS==0;
            goto SETUP_I_DECLINE_LABLE,
              prompt      = STRING_TOKEN (AMD_CBS_STR_I_DECLINE_SECTION),
              help        = STRING_TOKEN (AMD_CBS_STR_I_DECLINE_SECTION);
          endif;

          suppressif SHOW_ALL_CBS==0;
            goto SETUP_I_ACCEPT_LABLE,
              prompt      = STRING_TOKEN (AMD_CBS_STR_I_ACCEPT_SECTION),
              help        = STRING_TOKEN (AMD_CBS_STR_I_ACCEPT_SECTION);
          endif;

        endform;
          //
          // form - I Decline
          //
          form

            formid        = SETUP_I_DECLINE_LABLE,

            title         = STRING_TOKEN (AMD_CBS_STR_I_DECLINE_SECTION);

            subtitle text = STRING_TOKEN (AMD_CBS_STR_I_DECLINE_SECTION);
            subtitle text = STRING_TOKEN (AMD_CBS_STR_BLANK);

          endform;
          //
          // form - I Accept
          //
          form

            formid        = SETUP_I_ACCEPT_LABLE,

            title         = STRING_TOKEN (AMD_CBS_STR_I_ACCEPT_SECTION);

            subtitle text = STRING_TOKEN (AMD_CBS_STR_I_ACCEPT_SECTION);
            subtitle text = STRING_TOKEN (AMD_CBS_STR_BLANK);

            suppressif SHOW_ALL_CBS==0;
              // Overclock
              // Memory Overclock Settings
              oneof
                varid       = CBS_CONFIG.CbsCmnMemOverclockDdr4,
                prompt      = STRING_TOKEN (AMD_CBS_STR_OVERCLOCK),
                help        = STRING_TOKEN (AMD_CBS_STR_OVERCLOCK_HELP),
                option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xFF, flags = DEFAULT | RESET_REQUIRED | MANUFACTURING;
                option text = STRING_TOKEN (AMD_CBS_STR_ENABLED),         value = 1,    flags = 0 | RESET_REQUIRED;
              endoneof;
            endif;

            // Display Condition: CbsCmnMemOverclockDdr4=Enabled
            suppressif NOT ideqval CBS_CONFIG.CbsCmnMemOverclockDdr4 == 1 OR SHOW_ALL_CBS==0;
              // Memory Clock Speed
              // Set the memory clock frequency.
              oneof
                varid       = CBS_CONFIG.CbsCmnMemSpeedDdr4,
                prompt      = STRING_TOKEN (AMD_CBS_STR_MEMORY_CLOCK_SPEED),
                help        = STRING_TOKEN (AMD_CBS_STR_MEMORY_CLOCK_SPEED_HELP),
                option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xFF, flags = DEFAULT | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_667MHZ),          value = 0x14, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_800MHZ),          value = 0x18, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_933MHZ),          value = 0x1C, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_1067MHZ),         value = 0x20, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_1200MHZ),         value = 0x24, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_1333MHZ),         value = 0x28, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_1467MHZ),         value = 0x2C, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_1600MHZ),         value = 0x30, flags = 0 | RESET_REQUIRED;
              endoneof;
            endif;

            // Display Condition: CbsCmnMemOverclockDdr4=Enabled
            suppressif NOT ideqval CBS_CONFIG.CbsCmnMemOverclockDdr4 == 1 OR SHOW_ALL_CBS==0;
              // Tcl
              // Sets the tCL time.
              oneof
                varid       = CBS_CONFIG.CbsCmnMemTimingTclDdr4,
                prompt      = STRING_TOKEN (AMD_CBS_STR_TCL),
                help        = STRING_TOKEN (AMD_CBS_STR_TCL_HELP),
                option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xFF, flags = DEFAULT | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_8_CLK),           value = 8,    flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_9_CLK),           value = 9,    flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_0AH_CLK),         value = 0xA,  flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_0BH_CLK),         value = 0xB,  flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_0CH_CLK),         value = 0xC,  flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_0DH_CLK),         value = 0xD,  flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_0EH_CLK),         value = 0xE,  flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_0FH_CLK),         value = 0xF,  flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_10H_CLK),         value = 0x10, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_11H_CLK),         value = 0x11, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_12H_CLK),         value = 0x12, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_13H_CLK),         value = 0x13, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_14H_CLK),         value = 0x14, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_15H_CLK),         value = 0x15, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_16H_CLK),         value = 0x16, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_17H_CLK),         value = 0x17, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_18H_CLK),         value = 0x18, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_19H_CLK),         value = 0x19, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_1AH_CLK),         value = 0x1A, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_1BH_CLK),         value = 0x1B, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_1CH_CLK),         value = 0x1C, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_1DH_CLK),         value = 0x1D, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_1EH_CLK),         value = 0x1E, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_1FH_CLK),         value = 0x1F, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_20H_CLK),         value = 0x20, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_21H_CLK),         value = 0x21, flags = 0 | RESET_REQUIRED;
              endoneof;
            endif;

            // Display Condition: CbsCmnMemOverclockDdr4=Enabled
            suppressif NOT ideqval CBS_CONFIG.CbsCmnMemOverclockDdr4 == 1 OR SHOW_ALL_CBS==0;
              // Trcdrd
              // This sets the RAS# Active to CAS# read/write delay.
              oneof
                varid       = CBS_CONFIG.CbsCmnMemTimingTrcdrdDdr4,
                prompt      = STRING_TOKEN (AMD_CBS_STR_TRCDRD),
                help        = STRING_TOKEN (AMD_CBS_STR_TRCDRD_HELP),
                option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xFF, flags = DEFAULT | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_8_CLK),           value = 8,    flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_9_CLK),           value = 9,    flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_0AH_CLK),         value = 0xA,  flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_0BH_CLK),         value = 0xB,  flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_0CH_CLK),         value = 0xC,  flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_0DH_CLK),         value = 0xD,  flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_0EH_CLK),         value = 0xE,  flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_0FH_CLK),         value = 0xF,  flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_10H_CLK),         value = 0x10, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_11H_CLK),         value = 0x11, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_12H_CLK),         value = 0x12, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_13H_CLK),         value = 0x13, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_14H_CLK),         value = 0x14, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_15H_CLK),         value = 0x15, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_16H_CLK),         value = 0x16, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_17H_CLK),         value = 0x17, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_18H_CLK),         value = 0x18, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_19H_CLK),         value = 0x19, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_1AH_CLK),         value = 0x1A, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_1BH_CLK),         value = 0x1B, flags = 0 | RESET_REQUIRED;
              endoneof;
            endif;

            // Display Condition: CbsCmnMemOverclockDdr4=Enabled
            suppressif NOT ideqval CBS_CONFIG.CbsCmnMemOverclockDdr4 == 1 OR SHOW_ALL_CBS==0;
              // Trcdwr
              // This sets the RAS# Active to CAS# read/write delay.
              oneof
                varid       = CBS_CONFIG.CbsCmnMemTimingTrcdwrDdr4,
                prompt      = STRING_TOKEN (AMD_CBS_STR_TRCDWR),
                help        = STRING_TOKEN (AMD_CBS_STR_TRCDWR_HELP),
                option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xFF, flags = DEFAULT | RESET_REQUIRED | MANUFACTURING;
                option text = STRING_TOKEN (AMD_CBS_STR_8_CLK),           value = 8,    flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_9_CLK),           value = 9,    flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_0XA_CLK),         value = 0xA,  flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_0XB_CLK),         value = 0xB,  flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_0XC_CLK),         value = 0xC,  flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_0XD_CLK),         value = 0xD,  flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_0XE_CLK),         value = 0xE,  flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_0XF_CLK),         value = 0xF,  flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_10H_CLK),         value = 0x10, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_11H_CLK),         value = 0x11, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_12H_CLK),         value = 0x12, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_13H_CLK),         value = 0x13, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_14H_CLK),         value = 0x14, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_15H_CLK),         value = 0x15, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_16H_CLK),         value = 0x16, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_17H_CLK),         value = 0x17, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_18H_CLK),         value = 0x18, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_19H_CLK),         value = 0x19, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_1AH_CLK),         value = 0x1A, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_1BH_CLK),         value = 0x1B, flags = 0 | RESET_REQUIRED;
              endoneof;
            endif;

            // Display Condition: CbsCmnMemOverclockDdr4=Enabled
            suppressif NOT ideqval CBS_CONFIG.CbsCmnMemOverclockDdr4 == 1 OR SHOW_ALL_CBS==0;
              // Trp
              // Specify the row precharge time.
              oneof
                varid       = CBS_CONFIG.CbsCmnMemTimingTrpDdr4,
                prompt      = STRING_TOKEN (AMD_CBS_STR_TRP),
                help        = STRING_TOKEN (AMD_CBS_STR_TRP_HELP),
                option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xFF, flags = DEFAULT | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_8_CLK),           value = 8,    flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_9_CLK),           value = 9,    flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_0AH_CLK),         value = 0xA,  flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_0BH_CLK),         value = 0xB,  flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_0CH_CLK),         value = 0xC,  flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_0DH_CLK),         value = 0xD,  flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_0EH_CLK),         value = 0xE,  flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_0FH_CLK),         value = 0xF,  flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_10H_CLK),         value = 0x10, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_11H_CLK),         value = 0x11, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_12H_CLK),         value = 0x12, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_13H_CLK),         value = 0x13, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_14H_CLK),         value = 0x14, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_15H_CLK),         value = 0x15, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_16H_CLK),         value = 0x16, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_17H_CLK),         value = 0x17, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_18H_CLK),         value = 0x18, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_19H_CLK),         value = 0x19, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_1AH_CLK),         value = 0x1A, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_1BH_CLK),         value = 0x1B, flags = 0 | RESET_REQUIRED;
              endoneof;
            endif;

            // Display Condition: CbsCmnMemOverclockDdr4=Enabled
            suppressif NOT ideqval CBS_CONFIG.CbsCmnMemOverclockDdr4 == 1 OR SHOW_ALL_CBS==0;
              // Tras
              // Specify the min RAS# active time.
              oneof
                varid       = CBS_CONFIG.CbsCmnMemTimingTrasDdr4,
                prompt      = STRING_TOKEN (AMD_CBS_STR_TRAS),
                help        = STRING_TOKEN (AMD_CBS_STR_TRAS_HELP),
                option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xFF, flags = DEFAULT | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_15H_CLK),         value = 0x15, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_16H_CLK),         value = 0x16, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_17H_CLK),         value = 0x17, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_18H_CLK),         value = 0x18, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_19H_CLK),         value = 0x19, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_1AH_CLK),         value = 0x1A, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_1BH_CLK),         value = 0x1B, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_1CH_CLK),         value = 0x1C, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_1DH_CLK),         value = 0x1D, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_1EH_CLK),         value = 0x1E, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_1FH_CLK),         value = 0x1F, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_20H_CLK),         value = 0x20, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_21H_CLK),         value = 0x21, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_22H_CLK),         value = 0x22, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_23H_CLK),         value = 0x23, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_24H_CLK),         value = 0x24, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_25H_CLK),         value = 0x25, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_26H_CLK),         value = 0x26, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_27H_CLK),         value = 0x27, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_28H_CLK),         value = 0x28, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_29H_CLK),         value = 0x29, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_2AH_CLK),         value = 0x2A, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_2BH_CLK),         value = 0x2B, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_2CH_CLK),         value = 0x2C, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_2DH_CLK),         value = 0x2D, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_2EH_CLK),         value = 0x2E, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_2FH_CLK),         value = 0x2F, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_30H_CLK),         value = 0x30, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_31H_CLK),         value = 0x31, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_32H_CLK),         value = 0x32, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_33H_CLK),         value = 0x33, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_34H_CLK),         value = 0x34, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_35H_CLK),         value = 0x35, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_36H_CLK),         value = 0x36, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_37H_CLK),         value = 0x37, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_38H_CLK),         value = 0x38, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_39H_CLK),         value = 0x39, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_3AH_CLK),         value = 0x3A, flags = 0 | RESET_REQUIRED;
              endoneof;
            endif;

            // Display Condition: CbsCmnMemOverclockDdr4=Enabled
            suppressif NOT ideqval CBS_CONFIG.CbsCmnMemOverclockDdr4 == 1 OR SHOW_ALL_CBS==0;
              // Trc Ctrl
              // Specify Trc
              oneof
                varid       = CBS_CONFIG.CbsCmnMemTimingTrcCtrlDdr4,
                prompt      = STRING_TOKEN (AMD_CBS_STR_TRC_CTRL),
                help        = STRING_TOKEN (AMD_CBS_STR_TRC_CTRL_HELP),
                option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0,    flags = DEFAULT | RESET_REQUIRED | MANUFACTURING;
                option text = STRING_TOKEN (AMD_CBS_STR_MANUAL),          value = 1,    flags = 0 | RESET_REQUIRED;
              endoneof;
            endif;

            // Display Condition: CbsCmnMemOverclockDdr4=Enabled,CbsCmnMemTimingTrcCtrlDdr4=Manual
            suppressif NOT ideqval CBS_CONFIG.CbsCmnMemOverclockDdr4 == 1
                    OR NOT ideqval CBS_CONFIG.CbsCmnMemTimingTrcCtrlDdr4 == 1 OR SHOW_ALL_CBS==0;
              // Trc
              // Active to Active/Refresh Delay Time. Valid values 87h-1Dh.
              numeric
                varid       = CBS_CONFIG.CbsCmnMemTimingTrcDdr4,
                prompt      = STRING_TOKEN (AMD_CBS_STR_TRC),
                help        = STRING_TOKEN (AMD_CBS_STR_TRC_HELP),
                flags       = DISPLAY_UINT_HEX | RESET_REQUIRED,
                minimum     = 0x1d,
                maximum     = 0x87,
                step        = 0,
                default     = 0x39,
              endnumeric;
            endif;

            // Display Condition: CbsCmnMemOverclockDdr4=Enabled
            suppressif NOT ideqval CBS_CONFIG.CbsCmnMemOverclockDdr4 == 1 OR SHOW_ALL_CBS==0;
              // TrrdS
              // Activate to Activate Delay Time, different bank group (tRRD_S)
              oneof
                varid       = CBS_CONFIG.CbsCmnMemTimingTrrdSDdr4,
                prompt      = STRING_TOKEN (AMD_CBS_STR_TRRDS),
                help        = STRING_TOKEN (AMD_CBS_STR_TRRDS_HELP),
                option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xFF, flags = DEFAULT | RESET_REQUIRED | MANUFACTURING;
                option text = STRING_TOKEN (AMD_CBS_STR_4_CLK),           value = 4,    flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_5_CLK),           value = 5,    flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_6_CLK),           value = 6,    flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_7_CLK),           value = 7,    flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_8_CLK),           value = 8,    flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_9_CLK),           value = 9,    flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_0AH_CLK),         value = 0xA,  flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_0BH_CLK),         value = 0xB,  flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_0CH_CLK),         value = 0xC,  flags = 0 | RESET_REQUIRED;
              endoneof;
            endif;

            // Display Condition: CbsCmnMemOverclockDdr4=Enabled
            suppressif NOT ideqval CBS_CONFIG.CbsCmnMemOverclockDdr4 == 1 OR SHOW_ALL_CBS==0;
              // TrrdL
              // Activate to Activate Delay Time, same bank group (tRRD_L)
              oneof
                varid       = CBS_CONFIG.CbsCmnMemTimingTrrdLDdr4,
                prompt      = STRING_TOKEN (AMD_CBS_STR_TRRDL),
                help        = STRING_TOKEN (AMD_CBS_STR_TRRDL_HELP),
                option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xFF, flags = DEFAULT | RESET_REQUIRED | MANUFACTURING;
                option text = STRING_TOKEN (AMD_CBS_STR_4_CLK),           value = 4,    flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_5_CLK),           value = 5,    flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_6_CLK),           value = 6,    flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_7_CLK),           value = 7,    flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_8_CLK),           value = 8,    flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_9_CLK),           value = 9,    flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_0AH_CLK),         value = 0xA,  flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_0BH_CLK),         value = 0xB,  flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_0CH_CLK),         value = 0xC,  flags = 0 | RESET_REQUIRED;
              endoneof;
            endif;

            // Display Condition: CbsCmnMemOverclockDdr4=Enabled
            suppressif NOT ideqval CBS_CONFIG.CbsCmnMemOverclockDdr4 == 1 OR SHOW_ALL_CBS==0;
              // Tfaw Ctrl
              // Specify Tfaw
              oneof
                varid       = CBS_CONFIG.CbsCmnMemTimingTfawCtrlDdr4,
                prompt      = STRING_TOKEN (AMD_CBS_STR_TFAW_CTRL),
                help        = STRING_TOKEN (AMD_CBS_STR_TFAW_CTRL_HELP),
                option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0,    flags = DEFAULT | RESET_REQUIRED | MANUFACTURING;
                option text = STRING_TOKEN (AMD_CBS_STR_MANUAL),          value = 1,    flags = 0 | RESET_REQUIRED;
              endoneof;
            endif;

            // Display Condition: CbsCmnMemOverclockDdr4=Enabled,CbsCmnMemTimingTfawCtrlDdr4=Manual
            suppressif NOT ideqval CBS_CONFIG.CbsCmnMemOverclockDdr4 == 1
                    OR NOT ideqval CBS_CONFIG.CbsCmnMemTimingTfawCtrlDdr4 == 1 OR SHOW_ALL_CBS==0;
              // Tfaw
              // Four Activate Window Time. Valid values 36h-6h.
              numeric
                varid       = CBS_CONFIG.CbsCmnMemTimingTfawDdr4,
                prompt      = STRING_TOKEN (AMD_CBS_STR_TFAW),
                help        = STRING_TOKEN (AMD_CBS_STR_TFAW_HELP),
                flags       = DISPLAY_UINT_HEX | RESET_REQUIRED,
                minimum     = 0x6,
                maximum     = 0x36,
                step        = 0,
                default     = 26,
              endnumeric;
            endif;

            // Display Condition: CbsCmnMemOverclockDdr4=Enabled
            suppressif NOT ideqval CBS_CONFIG.CbsCmnMemOverclockDdr4 == 1 OR SHOW_ALL_CBS==0;
              // TwtrS
              // Minimum Write to Read Time, different bank group
              oneof
                varid       = CBS_CONFIG.CbsCmnMemTimingTwtrSDdr4,
                prompt      = STRING_TOKEN (AMD_CBS_STR_TWTRS),
                help        = STRING_TOKEN (AMD_CBS_STR_TWTRS_HELP),
                option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xFF, flags = DEFAULT | RESET_REQUIRED | MANUFACTURING;
                option text = STRING_TOKEN (AMD_CBS_STR_2_CLK),           value = 2,    flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_3_CLK),           value = 3,    flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_4_CLK),           value = 4,    flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_5_CLK),           value = 5,    flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_6_CLK),           value = 6,    flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_7_CLK),           value = 7,    flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_8_CLK),           value = 8,    flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_9_CLK),           value = 9,    flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_0AH_CLK),         value = 0xA,  flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_0BH_CLK),         value = 0xB,  flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_0CH_CLK),         value = 0xC,  flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_0DH_CLK),         value = 0xD,  flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_0EH_CLK),         value = 0xE,  flags = 0 | RESET_REQUIRED;
              endoneof;
            endif;

            // Display Condition: CbsCmnMemOverclockDdr4=Enabled
            suppressif NOT ideqval CBS_CONFIG.CbsCmnMemOverclockDdr4 == 1 OR SHOW_ALL_CBS==0;
              // TwtrL
              // Minimum Write to Read Time, same bank group
              oneof
                varid       = CBS_CONFIG.CbsCmnMemTimingTwtrLDdr4,
                prompt      = STRING_TOKEN (AMD_CBS_STR_TWTRL),
                help        = STRING_TOKEN (AMD_CBS_STR_TWTRL_HELP),
                option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xFF, flags = DEFAULT | RESET_REQUIRED | MANUFACTURING;
                option text = STRING_TOKEN (AMD_CBS_STR_2_CLK),           value = 2,    flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_3_CLK),           value = 3,    flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_4_CLK),           value = 4,    flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_5_CLK),           value = 5,    flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_6_CLK),           value = 6,    flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_7_CLK),           value = 7,    flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_8_CLK),           value = 8,    flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_9_CLK),           value = 9,    flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_0AH_CLK),         value = 0xA,  flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_0BH_CLK),         value = 0xB,  flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_0CH_CLK),         value = 0xC,  flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_0DH_CLK),         value = 0xD,  flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_0EH_CLK),         value = 0xE,  flags = 0 | RESET_REQUIRED;
              endoneof;
            endif;

            // Display Condition: CbsCmnMemOverclockDdr4=Enabled
            suppressif NOT ideqval CBS_CONFIG.CbsCmnMemOverclockDdr4 == 1 OR SHOW_ALL_CBS==0;
              // Twr Ctrl
              // Specify Twr
              oneof
                varid       = CBS_CONFIG.CbsCmnMemTimingTwrCtrlDdr4,
                prompt      = STRING_TOKEN (AMD_CBS_STR_TWR_CTRL),
                help        = STRING_TOKEN (AMD_CBS_STR_TWR_CTRL_HELP),
                option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0,    flags = DEFAULT | RESET_REQUIRED | MANUFACTURING;
                option text = STRING_TOKEN (AMD_CBS_STR_MANUAL),          value = 1,    flags = 0 | RESET_REQUIRED;
              endoneof;
            endif;

            // Display Condition: CbsCmnMemOverclockDdr4=Enabled,CbsCmnMemTimingTwrCtrlDdr4=Manual
            suppressif NOT ideqval CBS_CONFIG.CbsCmnMemOverclockDdr4 == 1
                    OR NOT ideqval CBS_CONFIG.CbsCmnMemTimingTwrCtrlDdr4 == 1 OR SHOW_ALL_CBS==0;
              // Twr
              // Minimum Write Recovery Time. Valid value 51h-Ah
              numeric
                varid       = CBS_CONFIG.CbsCmnMemTimingTwrDdr4,
                prompt      = STRING_TOKEN (AMD_CBS_STR_TWR),
                help        = STRING_TOKEN (AMD_CBS_STR_TWR_HELP),
                flags       = DISPLAY_UINT_HEX | RESET_REQUIRED,
                minimum     = 0xa,
                maximum     = 0x51,
                step        = 0,
                default     = 18,
              endnumeric;
            endif;

            // Display Condition: CbsCmnMemOverclockDdr4=Enabled
            suppressif NOT ideqval CBS_CONFIG.CbsCmnMemOverclockDdr4 == 1 OR SHOW_ALL_CBS==0;
              // Trcpage Ctrl
              // Specify Trcpage
              oneof
                varid       = CBS_CONFIG.CbsCmnMemTimingTrcpageCtrlDdr4,
                prompt      = STRING_TOKEN (AMD_CBS_STR_TRCPAGE_CTRL),
                help        = STRING_TOKEN (AMD_CBS_STR_TRCPAGE_CTRL_HELP),
                option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0,    flags = DEFAULT | RESET_REQUIRED | MANUFACTURING;
                option text = STRING_TOKEN (AMD_CBS_STR_MANUAL),          value = 1,    flags = 0 | RESET_REQUIRED;
              endoneof;
            endif;

            // Display Condition: CbsCmnMemOverclockDdr4=Enabled,CbsCmnMemTimingTrcpageCtrlDdr4=Manual
            suppressif NOT ideqval CBS_CONFIG.CbsCmnMemOverclockDdr4 == 1
                    OR NOT ideqval CBS_CONFIG.CbsCmnMemTimingTrcpageCtrlDdr4 == 1 OR SHOW_ALL_CBS==0;
              // Trcpage
              // SDRAM Optional Features (tMAW, MAC). Valid value 3FFh - 0h
              numeric
                varid       = CBS_CONFIG.CbsCmnMemTimingTrcpageDdr4,
                prompt      = STRING_TOKEN (AMD_CBS_STR_TRCPAGE),
                help        = STRING_TOKEN (AMD_CBS_STR_TRCPAGE_HELP),
                flags       = DISPLAY_UINT_HEX | RESET_REQUIRED,
                minimum     = 0,
                maximum     = 0x3ff,
                step        = 0,
                default     = 0,
              endnumeric;
            endif;

            // Display Condition: CbsCmnMemOverclockDdr4=Enabled
            suppressif NOT ideqval CBS_CONFIG.CbsCmnMemOverclockDdr4 == 1 OR SHOW_ALL_CBS==0;
              // TrdrdScL Ctrl
              // Specify TrdrdScL
              oneof
                varid       = CBS_CONFIG.CbsCmnMemTimingTrdrdScLCtrlDdr4,
                prompt      = STRING_TOKEN (AMD_CBS_STR_TRDRDSCL_CTRL),
                help        = STRING_TOKEN (AMD_CBS_STR_TRDRDSCL_CTRL_HELP),
                option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0,    flags = DEFAULT | RESET_REQUIRED | MANUFACTURING;
                option text = STRING_TOKEN (AMD_CBS_STR_MANUAL),          value = 1,    flags = 0 | RESET_REQUIRED;
              endoneof;
            endif;

            // Display Condition: CbsCmnMemOverclockDdr4=Enabled,CbsCmnMemTimingTrdrdScLCtrlDdr4=Manual
            suppressif NOT ideqval CBS_CONFIG.CbsCmnMemOverclockDdr4 == 1
                    OR NOT ideqval CBS_CONFIG.CbsCmnMemTimingTrdrdScLCtrlDdr4 == 1 OR SHOW_ALL_CBS==0;
              // TrdrdScL
              // CAS to CAS Delay Time, same bank group. Valid values Fh-1h
              numeric
                varid       = CBS_CONFIG.CbsCmnMemTimingTrdrdScLDdr4,
                prompt      = STRING_TOKEN (AMD_CBS_STR_TRDRDSCL),
                help        = STRING_TOKEN (AMD_CBS_STR_TRDRDSCL_HELP),
                flags       = DISPLAY_UINT_HEX | RESET_REQUIRED,
                minimum     = 0x1,
                maximum     = 0xf,
                step        = 0,
                default     = 3,
              endnumeric;
            endif;

            // Display Condition: CbsCmnMemOverclockDdr4=Enabled
            suppressif NOT ideqval CBS_CONFIG.CbsCmnMemOverclockDdr4 == 1 OR SHOW_ALL_CBS==0;
              // TwrwrScL Ctrl
              // Specify TwrwrScL
              oneof
                varid       = CBS_CONFIG.CbsCmnMemTimingTwrwrScLCtrlDdr4,
                prompt      = STRING_TOKEN (AMD_CBS_STR_TWRWRSCL_CTRL),
                help        = STRING_TOKEN (AMD_CBS_STR_TWRWRSCL_CTRL_HELP),
                option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0,    flags = DEFAULT | RESET_REQUIRED | MANUFACTURING;
                option text = STRING_TOKEN (AMD_CBS_STR_MANUAL),          value = 1,    flags = 0 | RESET_REQUIRED;
              endoneof;
            endif;

            // Display Condition: CbsCmnMemOverclockDdr4=Enabled,CbsCmnMemTimingTwrwrScLCtrlDdr4=Manual
            suppressif NOT ideqval CBS_CONFIG.CbsCmnMemOverclockDdr4 == 1
                    OR NOT ideqval CBS_CONFIG.CbsCmnMemTimingTwrwrScLCtrlDdr4 == 1 OR SHOW_ALL_CBS==0;
              // TwrwrScL
              // CAS to CAS Delay Time, same bank group. Valid values 3Fh-1h
              numeric
                varid       = CBS_CONFIG.CbsCmnMemTimingTwrwrScLDdr4,
                prompt      = STRING_TOKEN (AMD_CBS_STR_TWRWRSCL),
                help        = STRING_TOKEN (AMD_CBS_STR_TWRWRSCL_HELP),
                flags       = DISPLAY_UINT_HEX | RESET_REQUIRED,
                minimum     = 0x1,
                maximum     = 0x3f,
                step        = 0,
                default     = 0x3,
              endnumeric;
            endif;

            // Display Condition: CbsCmnMemOverclockDdr4=Enabled
            suppressif NOT ideqval CBS_CONFIG.CbsCmnMemOverclockDdr4 == 1 OR SHOW_ALL_CBS==0;
              // Trfc Ctrl
              // Specify Trfc
              oneof
                varid       = CBS_CONFIG.CbsCmnMemTimingTrfcCtrlDdr4,
                prompt      = STRING_TOKEN (AMD_CBS_STR_TRFC_CTRL),
                help        = STRING_TOKEN (AMD_CBS_STR_TRFC_CTRL_HELP),
                option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0,    flags = DEFAULT | RESET_REQUIRED | MANUFACTURING;
                option text = STRING_TOKEN (AMD_CBS_STR_MANUAL),          value = 1,    flags = 0 | RESET_REQUIRED;
              endoneof;
            endif;

            // Display Condition: CbsCmnMemOverclockDdr4=Enabled,CbsCmnMemTimingTrfcCtrlDdr4=Manual
            suppressif NOT ideqval CBS_CONFIG.CbsCmnMemOverclockDdr4 == 1
                    OR NOT ideqval CBS_CONFIG.CbsCmnMemTimingTrfcCtrlDdr4 == 1 OR SHOW_ALL_CBS==0;
              // Trfc
              // Refresh Recovery Delay Time (tRFC1). Valid values 3DEh-3Ch
              numeric
                varid       = CBS_CONFIG.CbsCmnMemTimingTrfcDdr4,
                prompt      = STRING_TOKEN (AMD_CBS_STR_TRFC),
                help        = STRING_TOKEN (AMD_CBS_STR_TRFC_HELP),
                flags       = DISPLAY_UINT_HEX | RESET_REQUIRED,
                minimum     = 0x3c,
                maximum     = 0x3de,
                step        = 0,
                default     = 0x138,
              endnumeric;
            endif;

            // Display Condition: CbsCmnMemOverclockDdr4=Enabled
            suppressif NOT ideqval CBS_CONFIG.CbsCmnMemOverclockDdr4 == 1 OR SHOW_ALL_CBS==0;
              // Trfc2 Ctrl
              // Specify Trfc2
              oneof
                varid       = CBS_CONFIG.CbsCmnMemTimingTrfc2CtrlDdr4,
                prompt      = STRING_TOKEN (AMD_CBS_STR_TRFC2_CTRL),
                help        = STRING_TOKEN (AMD_CBS_STR_TRFC2_CTRL_HELP),
                option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0,    flags = DEFAULT | RESET_REQUIRED | MANUFACTURING;
                option text = STRING_TOKEN (AMD_CBS_STR_MANUAL),          value = 1,    flags = 0 | RESET_REQUIRED;
              endoneof;
            endif;

            // Display Condition: CbsCmnMemOverclockDdr4=Enabled,CbsCmnMemTimingTrfc2CtrlDdr4=Manual
            suppressif NOT ideqval CBS_CONFIG.CbsCmnMemOverclockDdr4 == 1
                    OR NOT ideqval CBS_CONFIG.CbsCmnMemTimingTrfc2CtrlDdr4 == 1 OR SHOW_ALL_CBS==0;
              // Trfc2
              // Refresh Recovery Delay Time (tRFC2).  Valid values 3DEh-3Ch
              numeric
                varid       = CBS_CONFIG.CbsCmnMemTimingTrfc2Ddr4,
                prompt      = STRING_TOKEN (AMD_CBS_STR_TRFC2),
                help        = STRING_TOKEN (AMD_CBS_STR_TRFC2_HELP),
                flags       = DISPLAY_UINT_HEX | RESET_REQUIRED,
                minimum     = 0x3c,
                maximum     = 0x3de,
                step        = 0,
                default     = 0xC0,
              endnumeric;
            endif;

            // Display Condition: CbsCmnMemOverclockDdr4=Enabled
            suppressif NOT ideqval CBS_CONFIG.CbsCmnMemOverclockDdr4 == 1 OR SHOW_ALL_CBS==0;
              // Trfc4 Ctrl
              // Specify Trfc4
              oneof
                varid       = CBS_CONFIG.CbsCmnMemTimingTrfc4CtrlDdr4,
                prompt      = STRING_TOKEN (AMD_CBS_STR_TRFC4_CTRL),
                help        = STRING_TOKEN (AMD_CBS_STR_TRFC4_CTRL_HELP),
                option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0,    flags = DEFAULT | RESET_REQUIRED | MANUFACTURING;
                option text = STRING_TOKEN (AMD_CBS_STR_MANUAL),          value = 1,    flags = 0 | RESET_REQUIRED;
              endoneof;
            endif;

            // Display Condition: CbsCmnMemOverclockDdr4=Enabled, CbsCmnMemTimingTrfc4CtrlDdr4=Manual
            suppressif NOT ideqval CBS_CONFIG.CbsCmnMemOverclockDdr4 == 1
                    OR NOT ideqval CBS_CONFIG.CbsCmnMemTimingTrfc4CtrlDdr4 == 1 OR SHOW_ALL_CBS==0;
              // Trfc4
              // Refresh Recovery Delay Time (tRFC4). Valid values 3DEh-3Ch
              numeric
                varid       = CBS_CONFIG.CbsCmnMemTimingTrfc4Ddr4,
                prompt      = STRING_TOKEN (AMD_CBS_STR_TRFC4),
                help        = STRING_TOKEN (AMD_CBS_STR_TRFC4_HELP),
                flags       = DISPLAY_UINT_HEX | RESET_REQUIRED,
                minimum     = 0x3c,
                maximum     = 0x3de,
                step        = 0,
                default     = 0x84,
              endnumeric;
            endif;

            // Display Condition: CbsCmnMemOverclockDdr4=Enabled
            suppressif NOT ideqval CBS_CONFIG.CbsCmnMemOverclockDdr4 == 1 OR SHOW_ALL_CBS==0;
              // ProcODT
              // Specifies the Processor ODT
              oneof
                varid       = CBS_CONFIG.CbsCmnMemCtrllerProcOdtDdr4,
                prompt      = STRING_TOKEN (AMD_CBS_STR_PROCODT),
                help        = STRING_TOKEN (AMD_CBS_STR_PROCODT_HELP),
                option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xFF, flags = DEFAULT | RESET_REQUIRED | MANUFACTURING;
                option text = STRING_TOKEN (AMD_CBS_STR_HIGH_IMPEDANCE),  value = 0,    flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_480_OHM),         value = 1,    flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_240_OHM),         value = 2,    flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_160_OHM),         value = 3,    flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_120_OHM),         value = 8,    flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_96_OHM),          value = 9,    flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_80_OHM),          value = 10,   flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_68_DOT_6_OHM),    value = 11,   flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_60_OHM),          value = 0x18, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_53_DOT_3_OHM),    value = 0x19, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_48_OHM),          value = 0x1A, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_43_DOT_6_OHM),    value = 0x1B, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_40_OHM),          value = 0x38, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_36_DOT_9_OHM),    value = 0x39, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_34_DOT_3_OHM),    value = 0x3A, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_32_OHM),          value = 0x3B, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_30_OHM),          value = 0x3E, flags = 0 | RESET_REQUIRED;
              endoneof;
            endif;

            // Display Condition: CbsCmnMemOverclockDdr4=Enabled
            suppressif NOT ideqval CBS_CONFIG.CbsCmnMemOverclockDdr4 == 1 OR SHOW_ALL_CBS==0;
              // Tcwl
              // No help string
              oneof
                varid       = CBS_CONFIG.CbsCmnMemTimingTcwlDdr4,
                prompt      = STRING_TOKEN (AMD_CBS_STR_TCWL),
                help        = STRING_TOKEN (AMD_CBS_STR_TCWL_HELP),
                option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xFF, flags = DEFAULT | RESET_REQUIRED | MANUFACTURING;
                option text = STRING_TOKEN (AMD_CBS_STR_9_CLK),           value = 9,    flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_0AH_CLK),         value = 0xA,  flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_0BH_CLK),         value = 0xB,  flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_0CH_CLK),         value = 0xC,  flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_0DH_CLK),         value = 0xD,  flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_0EH_CLK),         value = 0xE,  flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_0FH_CLK),         value = 0xF,  flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_10H_CLK),         value = 0x10, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_11H_CLK),         value = 0x11, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_12H_CLK),         value = 0x12, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_13H_CLK),         value = 0x13, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_14H_CLK),         value = 0x14, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_15H_CLK),         value = 0x15, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_16H_CLK),         value = 0x16, flags = 0 | RESET_REQUIRED;
              endoneof;
            endif;

            // Display Condition: CbsCmnMemOverclockDdr4=Enabled
            suppressif NOT ideqval CBS_CONFIG.CbsCmnMemOverclockDdr4 == 1 OR SHOW_ALL_CBS==0;
              // Trtp
              // Specifies the read CAS# to precharge time.
              oneof
                varid       = CBS_CONFIG.CbsCmnMemTimingTrtpDdr4,
                prompt      = STRING_TOKEN (AMD_CBS_STR_TRTP),
                help        = STRING_TOKEN (AMD_CBS_STR_TRTP_HELP),
		option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xFF, flags = DEFAULT | RESET_REQUIRED | MANUFACTURING;
                option text = STRING_TOKEN (AMD_CBS_STR_5_CLK),           value = 0x5,  flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_6_CLK),           value = 0x6,  flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_7_CLK),           value = 0x7,  flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_8_CLK),           value = 0x8,  flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_9_CLK),           value = 0x9,  flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_0AH_CLK),         value = 0xA,  flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_0BH_CLK),         value = 0xB,  flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_0CH_CLK),         value = 0xC,  flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_0DH_CLK),         value = 0xD,  flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_0EH_CLK),         value = 0xE,  flags = 0 | RESET_REQUIRED;
              endoneof;
            endif;

            // Display Condition: CbsCmnMemOverclockDdr4=Enabled
            suppressif NOT ideqval CBS_CONFIG.CbsCmnMemOverclockDdr4 == 1 OR SHOW_ALL_CBS==0;
              // Trdwr
              // This sets the tWRTTO time.
              oneof
                varid       = CBS_CONFIG.CbsCmnMemTimingTrdwrDdr4,
                prompt      = STRING_TOKEN (AMD_CBS_STR_TRDWR),
                help        = STRING_TOKEN (AMD_CBS_STR_TRDWR_HELP),
		option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xFF, flags = DEFAULT | RESET_REQUIRED | MANUFACTURING;
                option text = STRING_TOKEN (AMD_CBS_STR_1_CLK),           value = 1,    flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_2_CLK),           value = 2,    flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_3_CLK),           value = 3,    flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_4_CLK),           value = 4,    flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_5_CLK),           value = 5,    flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_6_CLK),           value = 6,    flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_7_CLK),           value = 7,    flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_8_CLK),           value = 8,    flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_9_CLK),           value = 9,    flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_0AH_CLK),         value = 0xA,  flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_0BH_CLK),         value = 0xB,  flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_0CH_CLK),         value = 0xC,  flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_0DH_CLK),         value = 0xD,  flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_0EH_CLK),         value = 0xE,  flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_0FH_CLK),         value = 0xF,  flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_10H_CLK),         value = 0x10, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_11H_CLK),         value = 0x11, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_12H_CLK),         value = 0x12, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_13H_CLK),         value = 0x13, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_14H_CLK),         value = 0x14, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_15H_CLK),         value = 0x15, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_16H_CLK),         value = 0x16, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_17H_CLK),         value = 0x17, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_18H_CLK),         value = 0x18, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_19H_CLK),         value = 0x19, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_1AH_CLK),         value = 0x1A, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_1BH_CLK),         value = 0x1B, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_1CH_CLK),         value = 0x1C, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_1DH_CLK),         value = 0x1D, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_1EH_CLK),         value = 0x1E, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_1FH_CLK),         value = 0x1F, flags = 0 | RESET_REQUIRED;
              endoneof;
            endif;

            // Display Condition: CbsCmnMemOverclockDdr4=Enabled
            suppressif NOT ideqval CBS_CONFIG.CbsCmnMemOverclockDdr4 == 1 OR SHOW_ALL_CBS==0;
              // Twrrd
              // Specify the write to read delay when accessing different DIMMs.
              oneof
                varid       = CBS_CONFIG.CbsCmnMemTimingTwrrdDdr4,
                prompt      = STRING_TOKEN (AMD_CBS_STR_TWRRD),
                help        = STRING_TOKEN (AMD_CBS_STR_TWRRD_HELP),
		option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xFF, flags = DEFAULT | RESET_REQUIRED | MANUFACTURING;
                option text = STRING_TOKEN (AMD_CBS_STR_1_CLK),           value = 1,    flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_2_CLK),           value = 2,    flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_3_CLK),           value = 3,    flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_4_CLK),           value = 4,    flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_5_CLK),           value = 5,    flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_6_CLK),           value = 6,    flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_7_CLK),           value = 7,    flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_8_CLK),           value = 8,    flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_9_CLK),           value = 9,    flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_0AH_CLK),         value = 0xA,  flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_0BH_CLK),         value = 0xB,  flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_0CH),             value = 0xC,  flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_0DH),             value = 0xD,  flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_0EH),             value = 0xE,  flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_0FH),             value = 0xF,  flags = 0 | RESET_REQUIRED;
              endoneof;
            endif;

            // Display Condition: CbsCmnMemOverclockDdr4=Enabled
            suppressif NOT ideqval CBS_CONFIG.CbsCmnMemOverclockDdr4 == 1 OR SHOW_ALL_CBS==0;
              // TwrwrSc
              // write to write timing same DIMM same chip select.
              oneof
                varid       = CBS_CONFIG.CbsCmnMemTimingTwrwrScDdr4,
                prompt      = STRING_TOKEN (AMD_CBS_STR_TWRWRSC),
                help        = STRING_TOKEN (AMD_CBS_STR_TWRWRSC_HELP),
		option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xFF, flags = DEFAULT | RESET_REQUIRED | MANUFACTURING;
                option text = STRING_TOKEN (AMD_CBS_STR_1_CLK),           value = 1,    flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_2_CLK),           value = 2,    flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_3_CLK),           value = 3,    flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_4_CLK),           value = 4,    flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_5_CLK),           value = 5,    flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_6_CLK),           value = 6,    flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_7_CLK),           value = 7,    flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_8_CLK),           value = 8,    flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_9_CLK),           value = 9,    flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_0AH_CLK),         value = 0xA,  flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_0BH_CLK),         value = 0xB,  flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_0CH_CLK),         value = 0xC,  flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_0DH_CLK),         value = 0xD,  flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_0EH_CLK),         value = 0xE,  flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_0FH_CLK),         value = 0xF,  flags = 0 | RESET_REQUIRED;
              endoneof;
            endif;

            // Display Condition: CbsCmnMemOverclockDdr4=Enabled
            suppressif NOT ideqval CBS_CONFIG.CbsCmnMemOverclockDdr4 == 1 OR SHOW_ALL_CBS==0;
              // TwrwrSd
              // write to write timing same DIMM same chip select.
              oneof
                varid       = CBS_CONFIG.CbsCmnMemTimingTwrwrSdDdr4,
                prompt      = STRING_TOKEN (AMD_CBS_STR_TWRWRSD),
                help        = STRING_TOKEN (AMD_CBS_STR_TWRWRSD_HELP),
		option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xFF, flags = DEFAULT | RESET_REQUIRED | MANUFACTURING;
                option text = STRING_TOKEN (AMD_CBS_STR_1_CLK),           value = 1,    flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_2_CLK),           value = 2,    flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_3_CLK),           value = 3,    flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_4_CLK),           value = 4,    flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_5_CLK),           value = 5,    flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_6_CLK),           value = 6,    flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_7_CLK),           value = 7,    flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_8_CLK),           value = 8,    flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_9_CLK),           value = 9,    flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_0AH_CLK),         value = 0xA,  flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_0BH_CLK),         value = 0xB,  flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_0CH_CLK),         value = 0xC,  flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_0DH_CLK),         value = 0xD,  flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_0EH_CLK),         value = 0xE,  flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_0FH_CLK),         value = 0xF,  flags = 0 | RESET_REQUIRED;
              endoneof;
            endif;

            // Display Condition: CbsCmnMemOverclockDdr4=Enabled
            suppressif NOT ideqval CBS_CONFIG.CbsCmnMemOverclockDdr4 == 1 OR SHOW_ALL_CBS==0;
              // TwrwrDd
              // write to write timing same DIMM same chip select.
              oneof
                varid       = CBS_CONFIG.CbsCmnMemTimingTwrwrDdDdr4,
                prompt      = STRING_TOKEN (AMD_CBS_STR_TWRWRDD),
                help        = STRING_TOKEN (AMD_CBS_STR_TWRWRDD_HELP),
		option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xFF, flags = DEFAULT | RESET_REQUIRED | MANUFACTURING;
                option text = STRING_TOKEN (AMD_CBS_STR_1_CLK),           value = 1,    flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_2_CLK),           value = 2,    flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_3_CLK),           value = 3,    flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_4_CLK),           value = 4,    flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_5_CLK),           value = 5,    flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_6_CLK),           value = 6,    flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_7_CLK),           value = 7,    flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_8_CLK),           value = 8,    flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_9_CLK),           value = 9,    flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_0AH_CLK),         value = 0xA,  flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_0BH_CLK),         value = 0xB,  flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_0CH_CLK),         value = 0xC,  flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_0DH_CLK),         value = 0xD,  flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_0EH_CLK),         value = 0xE,  flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_0FH_CLK),         value = 0xF,  flags = 0 | RESET_REQUIRED;
              endoneof;
            endif;

            // Display Condition: CbsCmnMemOverclockDdr4=Enabled
            suppressif NOT ideqval CBS_CONFIG.CbsCmnMemOverclockDdr4 == 1 OR SHOW_ALL_CBS==0;
              // TrdrdSc
              // write to write timing same DIMM same chip select.
              oneof
                varid       = CBS_CONFIG.CbsCmnMemTimingTrdrdScDdr4,
                prompt      = STRING_TOKEN (AMD_CBS_STR_TRDRDSC),
                help        = STRING_TOKEN (AMD_CBS_STR_TRDRDSC_HELP),
		option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xFF, flags = DEFAULT | RESET_REQUIRED | MANUFACTURING;
                option text = STRING_TOKEN (AMD_CBS_STR_1_CLK),           value = 1,    flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_2_CLK),           value = 2,    flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_3_CLK),           value = 3,    flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_4_CLK),           value = 4,    flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_5_CLK),           value = 5,    flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_6_CLK),           value = 6,    flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_7_CLK),           value = 7,    flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_8_CLK),           value = 8,    flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_9_CLK),           value = 9,    flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_0AH_CLK),         value = 0xA,  flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_0BH_CLK),         value = 0xB,  flags = 0 | RESET_REQUIRED;
              endoneof;
            endif;

            // Display Condition: CbsCmnMemOverclockDdr4=Enabled
            suppressif NOT ideqval CBS_CONFIG.CbsCmnMemOverclockDdr4 == 1 OR SHOW_ALL_CBS==0;
              // TrdrdSd
              // write to write timing same DIMM same chip select.
              oneof
                varid       = CBS_CONFIG.CbsCmnMemTimingTrdrdSdDdr4,
                prompt      = STRING_TOKEN (AMD_CBS_STR_TRDRDSD),
                help        = STRING_TOKEN (AMD_CBS_STR_TRDRDSD_HELP),
		option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xFF, flags = DEFAULT | RESET_REQUIRED | MANUFACTURING;
                option text = STRING_TOKEN (AMD_CBS_STR_1_CLK),           value = 1,    flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_2_CLK),           value = 2,    flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_3_CLK),           value = 3,    flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_4_CLK),           value = 4,    flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_5_CLK),           value = 5,    flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_6_CLK),           value = 6,    flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_7_CLK),           value = 7,    flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_8_CLK),           value = 8,    flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_9_CLK),           value = 9,    flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_0AH_CLK),         value = 0xA,  flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_0BH_CLK),         value = 0xB,  flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_0CH_CLK),         value = 0xC,  flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_0DH_CLK),         value = 0xD,  flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_0EH_CLK),         value = 0xE,  flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_0FH_CLK),         value = 0xF,  flags = 0 | RESET_REQUIRED;
              endoneof;
            endif;

            // Display Condition: CbsCmnMemOverclockDdr4=Enabled
            suppressif NOT ideqval CBS_CONFIG.CbsCmnMemOverclockDdr4 == 1 OR SHOW_ALL_CBS==0;
              // TrdrdDd
              // write to write timing same DIMM same chip select.
              oneof
                varid       = CBS_CONFIG.CbsCmnMemTimingTrdrdDdDdr4,
                prompt      = STRING_TOKEN (AMD_CBS_STR_TRDRDDD),
                help        = STRING_TOKEN (AMD_CBS_STR_TRDRDDD_HELP),
		option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xFF, flags = DEFAULT | RESET_REQUIRED | MANUFACTURING;
                option text = STRING_TOKEN (AMD_CBS_STR_1_CLK),           value = 1,    flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_2_CLK),           value = 2,    flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_3_CLK),           value = 3,    flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_4_CLK),           value = 4,    flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_5_CLK),           value = 5,    flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_6_CLK),           value = 6,    flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_7_CLK),           value = 7,    flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_8_CLK),           value = 8,    flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_9_CLK),           value = 9,    flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_0AH_CLK),         value = 0xA,  flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_0BH_CLK),         value = 0xB,  flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_0CH_CLK),         value = 0xC,  flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_0DH_CLK),         value = 0xD,  flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_0EH_CLK),         value = 0xE,  flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_0FH_CLK),         value = 0xF,  flags = 0 | RESET_REQUIRED;
              endoneof;
            endif;

            // Display Condition: CbsCmnMemOverclockDdr4=Enabled
            suppressif NOT ideqval CBS_CONFIG.CbsCmnMemOverclockDdr4 == 1 OR SHOW_ALL_CBS==0;
              // Tcke
              // Specifies the CKE minimum high and low pulse width in memory clock cycles.
              oneof
                varid       = CBS_CONFIG.CbsCmnMemTimingTckeDdr4,
                prompt      = STRING_TOKEN (AMD_CBS_STR_TCKE),
                help        = STRING_TOKEN (AMD_CBS_STR_TCKE_HELP),
                option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xFF, flags = DEFAULT | RESET_REQUIRED | MANUFACTURING;
                option text = STRING_TOKEN (AMD_CBS_STR_1_CLK),           value = 1,    flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_2_CLK),           value = 2,    flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_3_CLK),           value = 3,    flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_4_CLK),           value = 4,    flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_5_CLK),           value = 5,    flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_6_CLK),           value = 6,    flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_7_CLK),           value = 7,    flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_8_CLK),           value = 8,    flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_9_CLK),           value = 9,    flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_0AH_CLK),         value = 0xA,  flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_0BH_CLK),         value = 0xB,  flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_0CH_CLK),         value = 0xC,  flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_0DH_CLK),         value = 0xD,  flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_0EH_CLK),         value = 0xE,  flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_0FH_CLK),         value = 0xF,  flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_10H_CLK),         value = 0x10, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_11H_CLK),         value = 0x11, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_12H_CLK),         value = 0x12, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_13H_CLK),         value = 0x13, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_14H_CLK),         value = 0x14, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_15H_CLK),         value = 0x15, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_16H_CLK),         value = 0x16, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_17H_CLK),         value = 0x17, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_18H_CLK),         value = 0x18, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_19H_CLK),         value = 0x19, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_1AH_CLK),         value = 0x1A, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_1BH_CLK),         value = 0x1B, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_1CH_CLK),         value = 0x1C, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_1DH_CLK),         value = 0x1D, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_1EH_CLK),         value = 0x1E, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_1FH_CLK),         value = 0x1F, flags = 0 | RESET_REQUIRED;
              endoneof;
            endif;

          endform;
        //
        // form - DRAM Controller Configuration
        //
        form

          formid        = SETUP_DRAM_CONTROLLER_CONFIGURATION_LABLE,

          title         = STRING_TOKEN (AMD_CBS_STR_DRAM_CONTROLLER_CONFIGURATION_SECTION);

          subtitle text = STRING_TOKEN (AMD_CBS_STR_DRAM_CONTROLLER_CONFIGURATION_SECTION);
          subtitle text = STRING_TOKEN (AMD_CBS_STR_BLANK);

          suppressif SHOW_ALL_CBS==0;
            goto SETUP_DRAM_POWER_OPTIONS_LABLE,
              prompt      = STRING_TOKEN (AMD_CBS_STR_DRAM_POWER_OPTIONS_SECTION),
              help        = STRING_TOKEN (AMD_CBS_STR_DRAM_POWER_OPTIONS_SECTION);
          endif;

          text
            help        = STRING_TOKEN (AMD_CBS_STR_BLANK),
            text        = STRING_TOKEN (AMD_CBS_STR_BLANK);

          suppressif SHOW_ALL_CBS==0;
            // Cmd2T
            // Select between 1T and 2T mode on ADDR/CMD
            oneof
              varid       = CBS_CONFIG.CbsCmnMemCtrller2TModeDdr4,
              prompt      = STRING_TOKEN (AMD_CBS_STR_CMD2T),
              help        = STRING_TOKEN (AMD_CBS_STR_CMD2T_HELP),
              option text = STRING_TOKEN (AMD_CBS_STR_1T),              value = 0,    flags = 0 | RESET_REQUIRED;
              option text = STRING_TOKEN (AMD_CBS_STR_2T),              value = 1,    flags = 0 | RESET_REQUIRED;
              option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xFF, flags = DEFAULT | RESET_REQUIRED | MANUFACTURING;
            endoneof;
          endif;

          suppressif SHOW_ALL_CBS==0;
            // Gear Down Mode
            // No help string
            oneof
              varid       = CBS_CONFIG.CbsCmnMemGearDownModeDdr4,
              prompt      = STRING_TOKEN (AMD_CBS_STR_GEAR_DOWN_MODE),
              help        = STRING_TOKEN (AMD_CBS_STR_GEAR_DOWN_MODE_HELP),
              option text = STRING_TOKEN (AMD_CBS_STR_DISABLED),        value = 0,    flags = 0 | RESET_REQUIRED;
              option text = STRING_TOKEN (AMD_CBS_STR_ENABLED),         value = 1,    flags = 0 | RESET_REQUIRED;
              option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xFF, flags = DEFAULT | RESET_REQUIRED | MANUFACTURING;
            endoneof;
          endif;

	  suppressif SHOW_ALL_CBS==0;
            // Auto Refresh Power
            // Specifies the DDR4 refresh mode
            oneof
              varid       = CBS_CONFIG.CbsCmnMemCtrllerAutoRefreshRateDdr4,
              prompt      = STRING_TOKEN (AMD_CBS_STR_AUTO_REFRESH_RATE),
              help        = STRING_TOKEN (AMD_CBS_STR_AUTO_REFRESH_RATE_HELP),
              option text = STRING_TOKEN (AMD_CBS_STR_1X),              value = 0,    flags = DEFAULT | RESET_REQUIRED | MANUFACTURING;
              option text = STRING_TOKEN (AMD_CBS_STR_2X),              value = 1,    flags = 0 | RESET_REQUIRED;
              option text = STRING_TOKEN (AMD_CBS_STR_4X),              value = 2,    flags = 0 | RESET_REQUIRED;
            endoneof;
          endif;	
        endform;
          //
          // form - DRAM Power Options
          //
          form

            formid        = SETUP_DRAM_POWER_OPTIONS_LABLE,

            title         = STRING_TOKEN (AMD_CBS_STR_DRAM_POWER_OPTIONS_SECTION);

            subtitle text = STRING_TOKEN (AMD_CBS_STR_DRAM_POWER_OPTIONS_SECTION);
            subtitle text = STRING_TOKEN (AMD_CBS_STR_BLANK);

            suppressif SHOW_ALL_CBS==0;
              // Power Down Enable
              // Enable or disable DDR power down mode
              oneof
                varid       = CBS_CONFIG.CbsCmnMemCtrllerPwrDnEnDdr4,
                prompt      = STRING_TOKEN (AMD_CBS_STR_POWER_DOWN_ENABLE),
                help        = STRING_TOKEN (AMD_CBS_STR_POWER_DOWN_ENABLE_HELP),
                option text = STRING_TOKEN (AMD_CBS_STR_DISABLED),        value = 0,    flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_ENABLED),         value = 1,    flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xFF, flags = DEFAULT | RESET_REQUIRED | MANUFACTURING;
              endoneof;
            endif;

          endform;
        //
        // form - Data Bus Configuration
        //
        form

          formid        = SETUP_DATA_BUS_CONFIGURATION_LABLE,

          title         = STRING_TOKEN (AMD_CBS_STR_DATA_BUS_CONFIGURATION_SECTION);

          subtitle text = STRING_TOKEN (AMD_CBS_STR_DATA_BUS_CONFIGURATION_SECTION);
          subtitle text = STRING_TOKEN (AMD_CBS_STR_BLANK);

          suppressif SHOW_ALL_CBS==0;
            // Data Bus Configuration User Controls
            // Specify the mode for drive strength to Auto or Manual
            oneof
              varid       = CBS_CONFIG.CbsCmnMemDataBusConfigCtlDdr4,
              prompt      = STRING_TOKEN (AMD_CBS_STR_DATA_BUS_CONFIGURATION_USER_CONTROLS),
              help        = STRING_TOKEN (AMD_CBS_STR_DATA_BUS_CONFIGURATION_USER_CONTROLS_HELP),
              option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xFF, flags = DEFAULT | RESET_REQUIRED | MANUFACTURING;
              option text = STRING_TOKEN (AMD_CBS_STR_MANUAL),          value = 1,    flags = 0 | RESET_REQUIRED;
            endoneof;
          endif;

          // Display Condition: CbsCmnMemDataBusConfigCtlDdr4=Manual
          suppressif NOT ideqval CBS_CONFIG.CbsCmnMemDataBusConfigCtlDdr4 == 1 OR SHOW_ALL_CBS==0;
            // RttNom
            // No help string
            oneof
              varid       = CBS_CONFIG.CbsCmnMemCtrllerRttNomDdr4,
              prompt      = STRING_TOKEN (AMD_CBS_STR_RTTNOM),
              help        = STRING_TOKEN (AMD_CBS_STR_RTTNOM_HELP),
              option text = STRING_TOKEN (AMD_CBS_STR_RTT_NOM_DISABLE), value = 0,    flags = 0 | RESET_REQUIRED;
              option text = STRING_TOKEN (AMD_CBS_STR_RZQ_4),           value = 1,    flags = 0 | RESET_REQUIRED;
              option text = STRING_TOKEN (AMD_CBS_STR_RZQ_2),           value = 2,    flags = 0 | RESET_REQUIRED;
              option text = STRING_TOKEN (AMD_CBS_STR_RZQ_6),           value = 3,    flags = 0 | RESET_REQUIRED;
              option text = STRING_TOKEN (AMD_CBS_STR_RZQ_1),           value = 4,    flags = 0 | RESET_REQUIRED;
              option text = STRING_TOKEN (AMD_CBS_STR_RZQ_5),           value = 5,    flags = 0 | RESET_REQUIRED;
              option text = STRING_TOKEN (AMD_CBS_STR_RZQ_3),           value = 6,    flags = 0 | RESET_REQUIRED;
              option text = STRING_TOKEN (AMD_CBS_STR_RZQ_7),           value = 7,    flags = 0 | RESET_REQUIRED;
              option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xFF, flags = DEFAULT | RESET_REQUIRED | MANUFACTURING;
            endoneof;
          endif;

          // Display Condition: CbsCmnMemDataBusConfigCtlDdr4=Manual
          suppressif NOT ideqval CBS_CONFIG.CbsCmnMemDataBusConfigCtlDdr4 == 1 OR SHOW_ALL_CBS==0;
            // RttWr
            // No help string
            oneof
              varid       = CBS_CONFIG.CbsCmnMemCtrllerRttWrDdr4,
              prompt      = STRING_TOKEN (AMD_CBS_STR_RTTWR),
              help        = STRING_TOKEN (AMD_CBS_STR_RTTWR_HELP),
              option text = STRING_TOKEN (AMD_CBS_STR_DYNAMIC_ODT_OFF), value = 0,    flags = 0 | RESET_REQUIRED;
              option text = STRING_TOKEN (AMD_CBS_STR_RZQ_2),           value = 1,    flags = 0 | RESET_REQUIRED;
              option text = STRING_TOKEN (AMD_CBS_STR_RZQ_1),           value = 2,    flags = 0 | RESET_REQUIRED;
              option text = STRING_TOKEN (AMD_CBS_STR_HI_Z),            value = 3,    flags = 0 | RESET_REQUIRED;
              option text = STRING_TOKEN (AMD_CBS_STR_RZQ_3),           value = 4,    flags = 0 | RESET_REQUIRED;
              option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xFF, flags = DEFAULT | RESET_REQUIRED | MANUFACTURING;
            endoneof;
          endif;

          // Display Condition: CbsCmnMemDataBusConfigCtlDdr4=Manual
          suppressif NOT ideqval CBS_CONFIG.CbsCmnMemDataBusConfigCtlDdr4 == 1 OR SHOW_ALL_CBS==0;
            // RttPark
            // No help string
            oneof
              varid       = CBS_CONFIG.CbsCmnMemCtrllerRttParkDdr4,
              prompt      = STRING_TOKEN (AMD_CBS_STR_RTTPARK),
              help        = STRING_TOKEN (AMD_CBS_STR_RTTPARK_HELP),
              option text = STRING_TOKEN (AMD_CBS_STR_RTT_PARK_DISABLE), value = 0,    flags = 0 | RESET_REQUIRED;
              option text = STRING_TOKEN (AMD_CBS_STR_RZQ_4),           value = 1,    flags = 0 | RESET_REQUIRED;
              option text = STRING_TOKEN (AMD_CBS_STR_RZQ_2),           value = 2,    flags = 0 | RESET_REQUIRED;
              option text = STRING_TOKEN (AMD_CBS_STR_RZQ_6),           value = 3,    flags = 0 | RESET_REQUIRED;
              option text = STRING_TOKEN (AMD_CBS_STR_RZQ_1),           value = 4,    flags = 0 | RESET_REQUIRED;
              option text = STRING_TOKEN (AMD_CBS_STR_RZQ_5),           value = 5,    flags = 0 | RESET_REQUIRED;
              option text = STRING_TOKEN (AMD_CBS_STR_RZQ_3),           value = 6,    flags = 0 | RESET_REQUIRED;
              option text = STRING_TOKEN (AMD_CBS_STR_RZQ_7),           value = 7,    flags = 0 | RESET_REQUIRED;
              option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xFF, flags = DEFAULT | RESET_REQUIRED | MANUFACTURING;
            endoneof;
          endif;

        endform;
        //
        // form - Common RAS
        //
        form

          formid        = SETUP_COMMON_RAS_LABLE,

          title         = STRING_TOKEN (AMD_CBS_STR_COMMON_RAS_SECTION);

          subtitle text = STRING_TOKEN (AMD_CBS_STR_COMMON_RAS_SECTION);
          subtitle text = STRING_TOKEN (AMD_CBS_STR_BLANK);

          suppressif SHOW_ALL_CBS==0;
            // Data Poisoning
            //  Enable/disable data poisoning: UMC_CH::EccCtrl[UcFatalEn] UMC_CH::EccCtrl[WrEccEn] Should be enabled/disabled together.
            oneof
              varid       = CBS_CONFIG.CbsCmnMemDataPoisoningDdr4,
              prompt      = STRING_TOKEN (AMD_CBS_STR_DATA_POISONING),
              help        = STRING_TOKEN (AMD_CBS_STR_DATA_POISONING_HELP),
              option text = STRING_TOKEN (AMD_CBS_STR_DISABLED),        value = 0,    flags = 0 | RESET_REQUIRED;
              option text = STRING_TOKEN (AMD_CBS_STR_ENABLED),         value = 1,    flags = 0 | RESET_REQUIRED;
              option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xFF, flags = DEFAULT | RESET_REQUIRED | MANUFACTURING;
            endoneof;
          endif;

          suppressif SHOW_ALL_CBS==0;
            goto SETUP_ECC_CONFIGURATION_LABLE,
              prompt      = STRING_TOKEN (AMD_CBS_STR_ECC_CONFIGURATION_SECTION),
              help        = STRING_TOKEN (AMD_CBS_STR_ECC_CONFIGURATION_SECTION);
          endif;

        endform;
          //
          // form - ECC Configuration
          //
          form

            formid        = SETUP_ECC_CONFIGURATION_LABLE,

            title         = STRING_TOKEN (AMD_CBS_STR_ECC_CONFIGURATION_SECTION);

            subtitle text = STRING_TOKEN (AMD_CBS_STR_ECC_CONFIGURATION_SECTION);
            subtitle text = STRING_TOKEN (AMD_CBS_STR_BLANK);

            suppressif SHOW_ALL_CBS==0;
              // DRAM ECC Symbol Size
              // DRAM ECC Symbol Size (x4/x8) - UMC_CH::EccCtrl[EccSymbolSize]
              oneof
                varid       = CBS_CONFIG.CbsCmnMemCtrllerDramEccSymbolSizeDdr4,
                prompt      = STRING_TOKEN (AMD_CBS_STR_DRAM_ECC_SYMBOL_SIZE),
                help        = STRING_TOKEN (AMD_CBS_STR_DRAM_ECC_SYMBOL_SIZE_HELP),
                option text = STRING_TOKEN (AMD_CBS_STR_X4),              value = 0,    flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_X8),              value = 1,    flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xFF, flags = DEFAULT | RESET_REQUIRED | MANUFACTURING;
              endoneof;
            endif;

            suppressif SHOW_ALL_CBS==0;
              // DRAM ECC Enable
              // Use this option to enable / disable DRAM ECC. Auto will set ECC to enable.
              oneof
                varid       = CBS_CONFIG.CbsCmnMemCtrllerDramEccEnDdr4,
                prompt      = STRING_TOKEN (AMD_CBS_STR_DRAM_ECC_ENABLE),
                help        = STRING_TOKEN (AMD_CBS_STR_DRAM_ECC_ENABLE_HELP),
                option text = STRING_TOKEN (AMD_CBS_STR_DISABLED),        value = 0,    flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_ENABLED),         value = 1,    flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xFF, flags = DEFAULT | RESET_REQUIRED | MANUFACTURING;
              endoneof;
            endif;

          endform;
        //
        // form - Security
        //
        form

          formid        = SETUP_SECURITY_LABLE,

          title         = STRING_TOKEN (AMD_CBS_STR_SECURITY_SECTION);

          subtitle text = STRING_TOKEN (AMD_CBS_STR_SECURITY_SECTION);
          subtitle text = STRING_TOKEN (AMD_CBS_STR_BLANK);

          suppressif SHOW_ALL_CBS==0;
            // TSME
            // Transparent SME: AddrTweakEn = 1; ForceEncrEn =1; DataEncrEn = 0
            oneof
              varid       = CBS_CONFIG.CbsCmnMemTsmeDdr4,
              questionid  = KEY_TSME,
              prompt      = STRING_TOKEN (AMD_CBS_STR_TSME),
              help        = STRING_TOKEN (AMD_CBS_STR_TSME_HELP),
              option text = STRING_TOKEN (AMD_CBS_STR_DISABLED),        value = 0,    flags = 0 | RESET_REQUIRED | INTERACTIVE;
              option text = STRING_TOKEN (AMD_CBS_STR_ENABLED),         value = 1,    flags = 0 | RESET_REQUIRED | INTERACTIVE;
              option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xFF, flags = DEFAULT | RESET_REQUIRED | MANUFACTURING | INTERACTIVE;
            endoneof;
          endif;

          suppressif SHOW_ALL_CBS==0;
            // Data Scramble
            // Data scrambling: DataScrambleEn
            oneof
              varid       = CBS_CONFIG.CbsCmnMemCtrllerDataScrambleDdr4,
              questionid  = KEY_DATA_SCRAMBLE,
              prompt      = STRING_TOKEN (AMD_CBS_STR_DATA_SCRAMBLE),
              help        = STRING_TOKEN (AMD_CBS_STR_DATA_SCRAMBLE_HELP),
              option text = STRING_TOKEN (AMD_CBS_STR_ENABLED),         value = 0x1,  flags = 0 | RESET_REQUIRED | INTERACTIVE;
              option text = STRING_TOKEN (AMD_CBS_STR_DISABLED),        value = 0x0,  flags = 0 | RESET_REQUIRED | INTERACTIVE;
              option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xFF, flags = DEFAULT | RESET_REQUIRED | MANUFACTURING | INTERACTIVE;
            endoneof;
          endif;

        endform;
      //
      // form - DRAM Memory Mapping
      //
      form

        formid        = SETUP_DRAM_MEMORY_MAPPING_LABLE,

        title         = STRING_TOKEN (AMD_CBS_STR_DRAM_MEMORY_MAPPING_SECTION);

        subtitle text = STRING_TOKEN (AMD_CBS_STR_DRAM_MEMORY_MAPPING_SECTION);
        subtitle text = STRING_TOKEN (AMD_CBS_STR_BLANK);

        // Chipselect Interleaving
        // Interleave memory blocks across the DRAM chip selects for node 0.
        oneof
          varid       = CBS_CONFIG.CbsCmnMemMappingBankInterleaveDdr4,
          prompt      = STRING_TOKEN (AMD_CBS_STR_CHIPSELECT_INTERLEAVING),
          help        = STRING_TOKEN (AMD_CBS_STR_CHIPSELECT_INTERLEAVING_HELP),
          option text = STRING_TOKEN (AMD_CBS_STR_DISABLED),        value = 0,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xFF, flags = DEFAULT | RESET_REQUIRED | MANUFACTURING;
        endoneof;

        // BankGroupSwap
        // No help string
        oneof
          varid       = CBS_CONFIG.CbsCmnMemCtrllerBankGroupSwapDdr4,
          prompt      = STRING_TOKEN (AMD_CBS_STR_BANKGROUPSWAP),
          help        = STRING_TOKEN (AMD_CBS_STR_BANKGROUPSWAP_HELP),
          option text = STRING_TOKEN (AMD_CBS_STR_ENABLED),         value = 1,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_DISABLED),        value = 0,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xFF, flags = DEFAULT | RESET_REQUIRED | MANUFACTURING;
        endoneof;

        suppressif SHOW_ALL_CBS==0;
          // BankGroupSwapAlt
          // No help string
          oneof
            varid       = CBS_CONFIG.CbsCmnMemCtrllerBankGroupSwapAltDdr4,
            prompt      = STRING_TOKEN (AMD_CBS_STR_BANKGROUPSWAPALT),
            help        = STRING_TOKEN (AMD_CBS_STR_BANKGROUPSWAPALT_HELP),
            option text = STRING_TOKEN (AMD_CBS_STR_ENABLED),         value = 1,    flags = 0 | RESET_REQUIRED;
            option text = STRING_TOKEN (AMD_CBS_STR_DISABLED),        value = 0,    flags = 0 | RESET_REQUIRED;
            option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xFF, flags = DEFAULT | RESET_REQUIRED | MANUFACTURING;
          endoneof;
        endif;

        suppressif SHOW_ALL_CBS==0;
          // Address Hash Bank
          // Enable or disable bank address hashing
          oneof
            varid       = CBS_CONFIG.CbsCmnMemAddressHashBankDdr4,
            prompt      = STRING_TOKEN (AMD_CBS_STR_ADDRESS_HASH_BANK),
            help        = STRING_TOKEN (AMD_CBS_STR_ADDRESS_HASH_BANK_HELP),
            option text = STRING_TOKEN (AMD_CBS_STR_DISABLED),        value = 0,    flags = 0 | RESET_REQUIRED;
            option text = STRING_TOKEN (AMD_CBS_STR_ENABLED),         value = 1,    flags = 0 | RESET_REQUIRED;
            option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xFF, flags = DEFAULT | RESET_REQUIRED | MANUFACTURING;
          endoneof;
        endif;

        suppressif SHOW_ALL_CBS==0;
          // Address Hash CS
          // Enable or disable CS address hashing
          oneof
            varid       = CBS_CONFIG.CbsCmnMemAddressHashCsDdr4,
            prompt      = STRING_TOKEN (AMD_CBS_STR_ADDRESS_HASH_CS),
            help        = STRING_TOKEN (AMD_CBS_STR_ADDRESS_HASH_CS_HELP),
            option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xFF, flags = DEFAULT | RESET_REQUIRED | MANUFACTURING;
            option text = STRING_TOKEN (AMD_CBS_STR_ENABLED),         value = 1,    flags = 0 | RESET_REQUIRED;
            option text = STRING_TOKEN (AMD_CBS_STR_DISABLED),        value = 0,    flags = 0 | RESET_REQUIRED;
          endoneof;
        endif;

      endform;
      //
      // form - Memory MBIST
      //
      form

        formid        = SETUP_MEMORY_MBIST_LABLE,

        title         = STRING_TOKEN (AMD_CBS_STR_MEMORY_MBIST_SECTION);

        subtitle text = STRING_TOKEN (AMD_CBS_STR_MEMORY_MBIST_SECTION);
        subtitle text = STRING_TOKEN (AMD_CBS_STR_BLANK);

        suppressif SHOW_ALL_CBS==0;
          // MBIST Enable
          // Enable or disable Memory MBIST
          oneof
            varid       = CBS_CONFIG.CbsCmnMemMbistEn,
            prompt      = STRING_TOKEN (AMD_CBS_STR_MBIST_ENABLE),
            help        = STRING_TOKEN (AMD_CBS_STR_MBIST_ENABLE_HELP),
            option text = STRING_TOKEN (AMD_CBS_STR_DISABLED),        value = 0,    flags = DEFAULT | RESET_REQUIRED | MANUFACTURING;
            option text = STRING_TOKEN (AMD_CBS_STR_ENABLED),         value = 1,    flags = 0 | RESET_REQUIRED;
          endoneof;
        endif;

        // Active Condition: CbsCmnMemMbistEn=Enabled
        grayoutif NOT ideqval CBS_CONFIG.CbsCmnMemMbistEn == 1;
          suppressif SHOW_ALL_CBS==0;
            // MBIST Test Mode
            // Select MBIST Test Mode -Interface Mode (Tests Single and Multiple CS transactions and Basic Connectivity) or Data Eye Mode (Measures Voltage vs. Timing)
            oneof
              varid       = CBS_CONFIG.CbsCmnMemMbistTestmode,
              prompt      = STRING_TOKEN (AMD_CBS_STR_MBIST_TEST_MODE),
              help        = STRING_TOKEN (AMD_CBS_STR_MBIST_TEST_MODE_HELP),
              option text = STRING_TOKEN (AMD_CBS_STR_INTERFACE_MODE),  value = 0,    flags = DEFAULT | RESET_REQUIRED | MANUFACTURING;
              option text = STRING_TOKEN (AMD_CBS_STR_DATA_EYE_MODE),   value = 1,    flags = 0 | RESET_REQUIRED;
            endoneof;
          endif;
        endif;

        // Active Condition: CbsCmnMemMbistEn=Enabled
        grayoutif NOT ideqval CBS_CONFIG.CbsCmnMemMbistEn == 1;
          suppressif SHOW_ALL_CBS==0;
            // MBIST Aggressors
            // Enable or disable MBIST Aggressor test
            oneof
              varid       = CBS_CONFIG.CbsCmnMemMbistAggressors,
              prompt      = STRING_TOKEN (AMD_CBS_STR_MBIST_AGGRESSORS),
              help        = STRING_TOKEN (AMD_CBS_STR_MBIST_AGGRESSORS_HELP),
              option text = STRING_TOKEN (AMD_CBS_STR_DISABLED),        value = 0,    flags = 0 | RESET_REQUIRED;
              option text = STRING_TOKEN (AMD_CBS_STR_ENABLED),         value = 1,    flags = 0 | RESET_REQUIRED;
              option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xff, flags = DEFAULT | RESET_REQUIRED | MANUFACTURING;
            endoneof;
          endif;
        endif;

        // Active Condition: CbsCmnMemMbistEn=Enabled
        grayoutif NOT ideqval CBS_CONFIG.CbsCmnMemMbistEn == 1;
          suppressif SHOW_ALL_CBS==0;
            // MBIST Per Bit Slave Die Reporting
            // Reports 2D Data Eye Results in ABL Log for each DQ, Chipselect, and Channel
            oneof
              varid       = CBS_CONFIG.CbsCmnMemMbistPerBitSlaveDieReport,
              prompt      = STRING_TOKEN (AMD_CBS_STR_MBIST_PER_BIT_SLAVE_DIE_REPORTING),
              help        = STRING_TOKEN (AMD_CBS_STR_MBIST_PER_BIT_SLAVE_DIE_REPORTING_HELP),
              option text = STRING_TOKEN (AMD_CBS_STR_DISABLED),        value = 0,    flags = 0 | RESET_REQUIRED;
              option text = STRING_TOKEN (AMD_CBS_STR_ENABLED),         value = 1,    flags = 0 | RESET_REQUIRED;
              option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xff, flags = DEFAULT | RESET_REQUIRED | MANUFACTURING;
            endoneof;
          endif;
        endif;

      endform;
    //
    // form - NBIO Common Options
    //
    form

      formid        = SETUP_NBIO_COMMON_OPTIONS_LABLE,

      title         = STRING_TOKEN (AMD_CBS_STR_NBIO_COMMON_OPTIONS_SECTION);

      subtitle text = STRING_TOKEN (AMD_CBS_STR_NBIO_COMMON_OPTIONS_SECTION);
      subtitle text = STRING_TOKEN (AMD_CBS_STR_BLANK);

      goto SETUP_NB_CONFIGURATION_LABLE,
        prompt      = STRING_TOKEN (AMD_CBS_STR_NB_CONFIGURATION_SECTION),
        help        = STRING_TOKEN (AMD_CBS_STR_NB_CONFIGURATION_SECTION);

      text
        help        = STRING_TOKEN (AMD_CBS_STR_BLANK),
        text        = STRING_TOKEN (AMD_CBS_STR_BLANK);

      // Display Condition: CbsComboFlag=0
      suppressif NOT ideqval CBS_CONFIG.CbsComboFlag == 0 OR SHOW_ALL_CBS==0;
        // System Configuration
        // Warning: Select System Configuration may cause the system to hang, as some System Configuration may not be supported by your OPN.\n
        oneof
          varid       = CBS_CONFIG.CbsCmnGnbSMUSystemConfig,
          prompt      = STRING_TOKEN (AMD_CBS_STR_SYSTEM_CONFIGURATION),
          help        = STRING_TOKEN (AMD_CBS_STR_SYSTEM_CONFIGURATION_HELP),
          option text = STRING_TOKEN (AMD_CBS_STR_65W_POR_CONFIGURATION), value = 1,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_45W_POR_CONFIGURATION), value = 2,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_35W_POR_CONFIGURATION), value = 3,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xf,  flags = DEFAULT | RESET_REQUIRED | MANUFACTURING;
        endoneof;
      endif;

      // Display Condition: CbsComboFlag=1|CbsComboFlag=2|CbsComboFlag=3
      suppressif NOT ideqval CBS_CONFIG.CbsComboFlag == 1
             AND NOT ideqval CBS_CONFIG.CbsComboFlag == 2
             AND NOT ideqval CBS_CONFIG.CbsComboFlag == 3 OR SHOW_ALL_CBS==0;
        // NBIO Internal Poison Consumption
        oneof
          varid       = CBS_CONFIG.CbsDbgPoisonConsumption,
          prompt      = STRING_TOKEN (AMD_CBS_STR_NBIO_INTERNAL_POISON_CONSUMPTION),
          help        = STRING_TOKEN (AMD_CBS_STR_NBIO_INTERNAL_POISON_CONSUMPTION_HELP),
          option text = STRING_TOKEN (AMD_CBS_STR_ENABLED),         value = 1,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_DISABLED),        value = 0,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xF,  flags = DEFAULT | RESET_REQUIRED | MANUFACTURING;
        endoneof;
      endif;

      // Display Condition: CbsComboFlag=1|CbsComboFlag=2|CbsComboFlag=3
      suppressif NOT ideqval CBS_CONFIG.CbsComboFlag == 1
             AND NOT ideqval CBS_CONFIG.CbsComboFlag == 2
             AND NOT ideqval CBS_CONFIG.CbsComboFlag == 3 OR SHOW_ALL_CBS==0;
        // NBIO RAS Control
        oneof
          varid       = CBS_CONFIG.CbsDbgRASControl,
          prompt      = STRING_TOKEN (AMD_CBS_STR_NBIO_RAS_CONTROL),
          help        = STRING_TOKEN (AMD_CBS_STR_NBIO_RAS_CONTROL_HELP),
          option text = STRING_TOKEN (AMD_CBS_STR_ENABLED),         value = 1,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_DISABLED),        value = 0,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xF,  flags = DEFAULT | RESET_REQUIRED | MANUFACTURING;
        endoneof;
      endif;

      // Determinism Slider
      // Auto = Use default performance determinism settings\nPower\nPerformance
      oneof
        varid       = CBS_CONFIG.CbsCmnDeterminismSlider,
        prompt      = STRING_TOKEN (AMD_CBS_STR_DETERMINISM_SLIDER),
        help        = STRING_TOKEN (AMD_CBS_STR_DETERMINISM_SLIDER_HELP),
        option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xF,  flags = DEFAULT | RESET_REQUIRED | MANUFACTURING;
        option text = STRING_TOKEN (AMD_CBS_STR_POWER),           value = 0,    flags = 0 | RESET_REQUIRED;
        option text = STRING_TOKEN (AMD_CBS_STR_PERFORMANCE),     value = 1,    flags = 0 | RESET_REQUIRED;
      endoneof;

      // cTDP Control
      // Auto = Use the fused cTDP\nManual = User can set customized cTDP
      oneof
        varid       = CBS_CONFIG.CbsCmncTDPCtl,
        prompt      = STRING_TOKEN (AMD_CBS_STR_CTDP_CONTROL),
        help        = STRING_TOKEN (AMD_CBS_STR_CTDP_CONTROL_HELP),
        option text = STRING_TOKEN (AMD_CBS_STR_MANUAL),          value = 1,    flags = 0 | RESET_REQUIRED;
        option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0,    flags = DEFAULT | RESET_REQUIRED | MANUFACTURING;
      endoneof;

      // Display Condition: CbsCmncTDPCtl=Manual
      suppressif NOT ideqval CBS_CONFIG.CbsCmncTDPCtl == 1;
        // cTDP
        // cTDP [W] 0 = Invalid value.
        numeric
          varid       = CBS_CONFIG.CbsCmncTDPLimit,
          prompt      = STRING_TOKEN (AMD_CBS_STR_CTDP),
          help        = STRING_TOKEN (AMD_CBS_STR_CTDP_HELP),
          flags       = RESET_REQUIRED,
          minimum     = 0,
          maximum     = 0xffffffff,
          step        = 0,
          default     = 0,
        endnumeric;
      endif;

      // Display Condition: CbsComboFlag=2
      suppressif NOT ideqval CBS_CONFIG.CbsComboFlag == 2 OR SHOW_ALL_CBS==0;
        // Efficiency Optimized Mode
        // No help string
        oneof
          varid       = CBS_CONFIG.CbsCmnNbioEfficiencyOptimizedMode,
          prompt      = STRING_TOKEN (AMD_CBS_STR_EFFICIENCY_OPTIMIZED_MODE),
          help        = STRING_TOKEN (AMD_CBS_STR_EFFICIENCY_OPTIMIZED_MODE_HELP),
          option text = STRING_TOKEN (AMD_CBS_STR_DISABLED),        value = 0,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_ENABLED),         value = 1,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xF,  flags = DEFAULT | RESET_REQUIRED | MANUFACTURING;
        endoneof;
      endif;

      suppressif SHOW_ALL_CBS==0;
        goto SETUP_FAN_CONTROL_LABLE,
          prompt      = STRING_TOKEN (AMD_CBS_STR_FAN_CONTROL_SECTION),
          help        = STRING_TOKEN (AMD_CBS_STR_FAN_CONTROL_SECTION);
      endif;

      suppressif SHOW_ALL_CBS==0;
        goto SETUP_LCLK_FREQUENCY_CONTORL_LABLE,
          prompt      = STRING_TOKEN (AMD_CBS_STR_LCLK_FREQUENCY_CONTORL_SECTION),
          help        = STRING_TOKEN (AMD_CBS_STR_LCLK_FREQUENCY_CONTORL_SECTION);
      endif;
      suppressif SHOW_ALL_CBS==0;
        // PSI
        // Disable PSI
        oneof
          varid       = CBS_CONFIG.CbsCmnNbioPSIDisable,
          prompt      = STRING_TOKEN (AMD_CBS_STR_PSI),
          help        = STRING_TOKEN (AMD_CBS_STR_PSI_HELP),
          option text = STRING_TOKEN (AMD_CBS_STR_DISABLE),         value = 1,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xf,  flags = DEFAULT | RESET_REQUIRED | MANUFACTURING;
        endoneof;
      endif;

      suppressif SHOW_ALL_CBS==0;
        // ACS Enable
        // No help string
        oneof
          varid       = CBS_CONFIG.CbsDbgGnbDbgACSEnable,
          prompt      = STRING_TOKEN (AMD_CBS_STR_ACS_ENABLE),
          help        = STRING_TOKEN (AMD_CBS_STR_ACS_ENABLE_HELP),
          option text = STRING_TOKEN (AMD_CBS_STR_ENABLE),          value = 1,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_DISABLED),        value = 0,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xF,  flags = DEFAULT | RESET_REQUIRED | MANUFACTURING;
        endoneof;
      endif;

      suppressif SHOW_ALL_CBS==0;
        // PCIe ARI Support
        // Enables Alternative Routing-ID Interpretation
        oneof
          varid       = CBS_CONFIG.CbsGnbDbgPcieAriSupport,
          prompt      = STRING_TOKEN (AMD_CBS_STR_PCIE_ARI_SUPPORT),
          help        = STRING_TOKEN (AMD_CBS_STR_PCIE_ARI_SUPPORT_HELP),
          option text = STRING_TOKEN (AMD_CBS_STR_DISABLE),         value = 0,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_ENABLE),          value = 1,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xf,  flags = DEFAULT | RESET_REQUIRED | MANUFACTURING;
        endoneof;
      endif;

      suppressif SHOW_ALL_CBS==0;
        // CLDO_VDDP Control
        // Manual = User can set customized CLDO_VDDP voltage
        oneof
          varid       = CBS_CONFIG.CbsCmnCLDO_VDDPCtl,
          prompt      = STRING_TOKEN (AMD_CBS_STR_CLDO_VDDP_CONTROL),
          help        = STRING_TOKEN (AMD_CBS_STR_CLDO_VDDP_CONTROL_HELP),
          option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0,    flags = DEFAULT | RESET_REQUIRED | MANUFACTURING;
          option text = STRING_TOKEN (AMD_CBS_STR_MANUAL),          value = 1,    flags = 0 | RESET_REQUIRED;
        endoneof;
      endif;

      // Display Condition: CbsCmnCLDO_VDDPCtl=Manual
      suppressif NOT ideqval CBS_CONFIG.CbsCmnCLDO_VDDPCtl == 1 OR SHOW_ALL_CBS==0;
        // CLDO_VDDP voltage
        // Warning: user must manually cold reset the system so that the CLDOs get re-latched otherwise the voltage change will not take into effect.\n\nCLDO_VDDP voltage [mV] 0 = Invalid value.
        suppressif ideqval CBS_CONFIG.CbsCpuGeneration == 2;
            numeric
              varid       = CBS_CONFIG.CbsCmnCLDOVDDPvoltage,
              prompt      = STRING_TOKEN (AMD_CBS_STR_CLDO_VDDP_VOLTAGE),
              help        = STRING_TOKEN (AMD_CBS_STR_CLDO_VDDP_VOLTAGE_HELP),
              flags       = RESET_REQUIRED,
              minimum     = 0,
              maximum     = 0xffffffff,
              step        = 0,
              default     = 0,
            endnumeric;
        endif;
        suppressif NOT ideqval CBS_CONFIG.CbsCpuGeneration == 2  
               AND NOT ideqval CBS_CONFIG.CbsCpuGeneration == 3;
          numeric
              varid       = CBS_CONFIG.CbsCmnCLDOVDDPvoltageE25PhyA,
              prompt      = STRING_TOKEN (AMD_CBS_STR_CLDO_VDDP_VOLTAGE_E25_PHY_A),
              help        = STRING_TOKEN (AMD_CBS_STR_CLDO_VDDP_VOLTAGE_E25_PHY_A_HELP),
              flags       = RESET_REQUIRED,
              minimum     = 0,
              maximum     = 0xff,
              step        = 0,
              default     = 0,
          endnumeric;
          
          numeric
              varid       = CBS_CONFIG.CbsCmnCLDOVDDPvoltageE25PhyB,
              prompt      = STRING_TOKEN (AMD_CBS_STR_CLDO_VDDP_VOLTAGE_E25_PHY_B),
              help        = STRING_TOKEN (AMD_CBS_STR_CLDO_VDDP_VOLTAGE_E25_PHY_B_HELP),
              flags       = RESET_REQUIRED,
              minimum     = 0,
              maximum     = 0xff,
              step        = 0,
              default     = 0,
          endnumeric;
          
          numeric
              varid       = CBS_CONFIG.CbsCmnCLDOVDDPvoltageDdrGmi,
              prompt      = STRING_TOKEN (AMD_CBS_STR_CLDO_VDDP_VOLTAGE_DDR_GMI),
              help        = STRING_TOKEN (AMD_CBS_STR_CLDO_VDDP_VOLTAGE_DDR_GMI_HELP),
              flags       = RESET_REQUIRED,
              minimum     = 0,
              maximum     = 0xff,
              step        = 0,
              default     = 0,
          endnumeric;
          
          numeric
              varid       = CBS_CONFIG.CbsCmnCLDOVDDPvoltageWaflGmi,
              prompt      = STRING_TOKEN (AMD_CBS_STR_CLDO_VDDP_VOLTAGE_WAFL_GMI),
              help        = STRING_TOKEN (AMD_CBS_STR_CLDO_VDDP_VOLTAGE_WAFL_GMI_HELP),
              flags       = RESET_REQUIRED,
              minimum     = 0,
              maximum     = 0xff,
              step        = 0,
              default     = 0,
          endnumeric;
        endif;
      endif;

      suppressif TRUE;
      //suppressif SHOW_ALL_CBS==0;
        // HD Audio Enable
        // No help string
        oneof
          varid       = CBS_CONFIG.CbsCmnGnbHdAudioEn,
          prompt      = STRING_TOKEN (AMD_CBS_STR_HD_AUDIO_ENABLE),
          help        = STRING_TOKEN (AMD_CBS_STR_HD_AUDIO_ENABLE_HELP),
          option text = STRING_TOKEN (AMD_CBS_STR_ENABLE),          value = 1,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_DISABLED),        value = 0,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xF,  flags = DEFAULT | RESET_REQUIRED | MANUFACTURING;
        endoneof;
      endif;

      suppressif SHOW_ALL_CBS==0;
        // Block PCIe Loopback
        // Block PCIe loopback mode for hot plug slots
        oneof
          varid       = CBS_CONFIG.CbsCfgPcieLoopbackMode,
          prompt      = STRING_TOKEN (AMD_CBS_STR_BLOCK_PCIE_LOOPBACK),
          help        = STRING_TOKEN (AMD_CBS_STR_BLOCK_PCIE_LOOPBACK_HELP),
          option text = STRING_TOKEN (AMD_CBS_STR_DISABLE),         value = 0,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_ENABLE),          value = 1,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 2,    flags = DEFAULT | RESET_REQUIRED | MANUFACTURING;
        endoneof;
      endif;

      suppressif SHOW_ALL_CBS==0;
        // CRS Delay
        // CRS delay for hot plug ports
        numeric
          varid       = CBS_CONFIG.CbsCfgPcieCrsDelay,
          prompt      = STRING_TOKEN (AMD_CBS_STR_CRS_DELAY),
          help        = STRING_TOKEN (AMD_CBS_STR_CRS_DELAY_HELP),
          flags       = DISPLAY_UINT_HEX | RESET_REQUIRED,
          minimum     = 0,
          maximum     = 0xffff,
          step        = 0,
          default     = 6,
        endnumeric;
      endif;

      suppressif SHOW_ALL_CBS==0;
        // CRS Limit
        // CRS limit for hot plug ports
        numeric
          varid       = CBS_CONFIG.CbsCfgPcieCrsLimit,
          prompt      = STRING_TOKEN (AMD_CBS_STR_CRS_LIMIT),
          help        = STRING_TOKEN (AMD_CBS_STR_CRS_LIMIT_HELP),
          flags       = DISPLAY_UINT_HEX | RESET_REQUIRED,
          minimum     = 0,
          maximum     = 0xffff,
          step        = 0,
          default     = 6,
        endnumeric;
      endif;

      suppressif SHOW_ALL_CBS==0;
        goto SETUP_HOT_PLUG_FLAGS_LABLE,
          prompt      = STRING_TOKEN (AMD_CBS_STR_HOT_PLUG_FLAGS_SECTION),
          help        = STRING_TOKEN (AMD_CBS_STR_HOT_PLUG_FLAGS_SECTION);
      endif;

    endform;
      //
      // form - NB Configuration
      //
      form

        formid        = SETUP_NB_CONFIGURATION_LABLE,

        title         = STRING_TOKEN (AMD_CBS_STR_NB_CONFIGURATION_SECTION);

        subtitle text = STRING_TOKEN (AMD_CBS_STR_NB_CONFIGURATION_SECTION);
        subtitle text = STRING_TOKEN (AMD_CBS_STR_BLANK);

        // IOMMU
        // Enable/Disable IOMMU
        oneof
          varid       = CBS_CONFIG.CbsCmnGnbNbIOMMU,
          prompt      = STRING_TOKEN (AMD_CBS_STR_IOMMU),
          help        = STRING_TOKEN (AMD_CBS_STR_IOMMU_HELP),
          option text = STRING_TOKEN (AMD_CBS_STR_DISABLED),        value = 0,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_ENABLED),         value = 1,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xf,  flags = DEFAULT | RESET_REQUIRED | MANUFACTURING;
        endoneof;
        
        suppressif SHOW_ALL_CBS==0;
          // Concurrent Training
          // Enable/Disable Concurrent Training
          oneof
            varid       = CBS_CONFIG.CbsPcieSyncReset,
            prompt      = STRING_TOKEN (AMD_CBS_STR_CONCURRENT_TRAINING),
            help        = STRING_TOKEN (AMD_CBS_STR_CONCURRENT_TRAINING_HELP),
            option text = STRING_TOKEN (AMD_CBS_STR_FALSE),           value = 0,    flags = 0 | RESET_REQUIRED;
            option text = STRING_TOKEN (AMD_CBS_STR_TRUE),            value = 1,    flags = 0 | RESET_REQUIRED;
            option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xf,  flags = DEFAULT | RESET_REQUIRED | MANUFACTURING;
          endoneof;
        endif;

      endform;
      //
      // form - Fan Control
      //
      form

        formid        = SETUP_FAN_CONTROL_LABLE,

        title         = STRING_TOKEN (AMD_CBS_STR_FAN_CONTROL_SECTION);

        subtitle text = STRING_TOKEN (AMD_CBS_STR_FAN_CONTROL_SECTION);
        subtitle text = STRING_TOKEN (AMD_CBS_STR_BLANK);

        suppressif SHOW_ALL_CBS==0;
          // Fan Control
          // Auto = Use the default fan controller settings\nManual = User can set customized fan controller settings
          oneof
            varid       = CBS_CONFIG.CbsDbgFanCtl,
            prompt      = STRING_TOKEN (AMD_CBS_STR_FAN_CONTROL),
            help        = STRING_TOKEN (AMD_CBS_STR_FAN_CONTROL_HELP),
            option text = STRING_TOKEN (AMD_CBS_STR_MANUAL),          value = 1,    flags = 0 | RESET_REQUIRED;
            option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0,    flags = DEFAULT | RESET_REQUIRED | MANUFACTURING;
          endoneof;
        endif;

        // Display Condition: CbsDbgFanCtl=Manual
        suppressif NOT ideqval CBS_CONFIG.CbsDbgFanCtl == 1 OR SHOW_ALL_CBS==0;
          // Force PWM Control
          // Unforce = Do not force the fan PWM\nForce = Force the fan PWM to the use specified value
          oneof
            varid       = CBS_CONFIG.CbsDbgForcePwmCtl,
            prompt      = STRING_TOKEN (AMD_CBS_STR_FORCE_PWM_CONTROL),
            help        = STRING_TOKEN (AMD_CBS_STR_FORCE_PWM_CONTROL_HELP),
            option text = STRING_TOKEN (AMD_CBS_STR_FORCE),           value = 1,    flags = 0 | RESET_REQUIRED;
            option text = STRING_TOKEN (AMD_CBS_STR_UNFORCE),         value = 0,    flags = DEFAULT | RESET_REQUIRED | MANUFACTURING;
          endoneof;
        endif;

        // Display Condition: CbsDbgForcePwmCtl=Force
        suppressif NOT ideqval CBS_CONFIG.CbsDbgForcePwmCtl == 1 OR SHOW_ALL_CBS==0;
          // Force PWM
          // Specify the PWM to force the fan to [0-100]
          numeric
            varid       = CBS_CONFIG.CbsDbgForcePwm,
            prompt      = STRING_TOKEN (AMD_CBS_STR_FORCE_PWM),
            help        = STRING_TOKEN (AMD_CBS_STR_FORCE_PWM_HELP),
            flags       = RESET_REQUIRED,
            minimum     = 0,
            maximum     = 100,
            step        = 0,
            default     = 0,
          endnumeric;
        endif;

        // Display Condition: CbsDbgFanCtl=Manual
        suppressif NOT ideqval CBS_CONFIG.CbsDbgFanCtl == 1 OR SHOW_ALL_CBS==0;
          // Fan Table Control
          // Auto = Use the default fan table\nManual = User can set customized fan table
          oneof
            varid       = CBS_CONFIG.CbsDbgFanTableCtl,
            prompt      = STRING_TOKEN (AMD_CBS_STR_FAN_TABLE_CONTROL),
            help        = STRING_TOKEN (AMD_CBS_STR_FAN_TABLE_CONTROL_HELP),
            option text = STRING_TOKEN (AMD_CBS_STR_MANUAL),          value = 1,    flags = 0 | RESET_REQUIRED;
            option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0,    flags = DEFAULT | RESET_REQUIRED | MANUFACTURING;
          endoneof;
        endif;

        // Display Condition: CbsDbgFanTableCtl=Manual
        suppressif NOT ideqval CBS_CONFIG.CbsDbgFanTableCtl == 1 OR SHOW_ALL_CBS==0;
          // Low Temperature
          // Low Temperature ['C]
          numeric
            varid       = CBS_CONFIG.CbsDbgFanTableTempLow,
            prompt      = STRING_TOKEN (AMD_CBS_STR_LOW_TEMPERATURE),
            help        = STRING_TOKEN (AMD_CBS_STR_LOW_TEMPERATURE_HELP),
            flags       = RESET_REQUIRED,
            minimum     = 0,
            maximum     = 0xff,
            step        = 0,
            default     = 0,
          endnumeric;
        endif;

        // Display Condition: CbsDbgFanTableCtl=Manual
        suppressif NOT ideqval CBS_CONFIG.CbsDbgFanTableCtl == 1 OR SHOW_ALL_CBS==0;
          // Medium Temperature
          // Medium Temperature ['C]
          numeric
            varid       = CBS_CONFIG.CbsDbgFanTableTempMed,
            prompt      = STRING_TOKEN (AMD_CBS_STR_MEDIUM_TEMPERATURE),
            help        = STRING_TOKEN (AMD_CBS_STR_MEDIUM_TEMPERATURE_HELP),
            flags       = RESET_REQUIRED,
            minimum     = 0,
            maximum     = 0xff,
            step        = 0,
            default     = 0,
          endnumeric;
        endif;

        // Display Condition: CbsDbgFanTableCtl=Manual
        suppressif NOT ideqval CBS_CONFIG.CbsDbgFanTableCtl == 1 OR SHOW_ALL_CBS==0;
          // High Temperature
          // High Temperature ['C]
          numeric
            varid       = CBS_CONFIG.CbsDbgFanTableTempHigh,
            prompt      = STRING_TOKEN (AMD_CBS_STR_HIGH_TEMPERATURE),
            help        = STRING_TOKEN (AMD_CBS_STR_HIGH_TEMPERATURE_HELP),
            flags       = RESET_REQUIRED,
            minimum     = 0,
            maximum     = 0xff,
            step        = 0,
            default     = 0,
          endnumeric;
        endif;

        // Display Condition: CbsDbgFanTableCtl=Manual
        suppressif NOT ideqval CBS_CONFIG.CbsDbgFanTableCtl == 1 OR SHOW_ALL_CBS==0;
          // Critical Temperature
          // Critical Temperature ['C]
          numeric
            varid       = CBS_CONFIG.CbsDbgFanTableTempCritical,
            prompt      = STRING_TOKEN (AMD_CBS_STR_CRITICAL_TEMPERATURE),
            help        = STRING_TOKEN (AMD_CBS_STR_CRITICAL_TEMPERATURE_HELP),
            flags       = RESET_REQUIRED,
            minimum     = 0,
            maximum     = 0xff,
            step        = 0,
            default     = 0,
          endnumeric;
        endif;

        // Display Condition: CbsDbgFanTableCtl=Manual
        suppressif NOT ideqval CBS_CONFIG.CbsDbgFanTableCtl == 1 OR SHOW_ALL_CBS==0;
          // Low Pwm
          // Low Pwm [0-100]
          numeric
            varid       = CBS_CONFIG.CbsDbgFanTableTPwmLow,
            prompt      = STRING_TOKEN (AMD_CBS_STR_LOW_PWM),
            help        = STRING_TOKEN (AMD_CBS_STR_LOW_PWM_HELP),
            flags       = RESET_REQUIRED,
            minimum     = 0,
            maximum     = 100,
            step        = 0,
            default     = 0,
          endnumeric;
        endif;

        // Display Condition: CbsDbgFanTableCtl=Manual
        suppressif NOT ideqval CBS_CONFIG.CbsDbgFanTableCtl == 1 OR SHOW_ALL_CBS==0;
          // Medium Pwm
          // Medium Pwm [0-100]
          numeric
            varid       = CBS_CONFIG.CbsDbgFanTablePwmMed,
            prompt      = STRING_TOKEN (AMD_CBS_STR_MEDIUM_PWM),
            help        = STRING_TOKEN (AMD_CBS_STR_MEDIUM_PWM_HELP),
            flags       = RESET_REQUIRED,
            minimum     = 0,
            maximum     = 100,
            step        = 0,
            default     = 0,
          endnumeric;
        endif;

        // Display Condition: CbsDbgFanTableCtl=Manual
        suppressif NOT ideqval CBS_CONFIG.CbsDbgFanTableCtl == 1 OR SHOW_ALL_CBS==0;
          // High Pwm
          // High Pwm [0-100]
          numeric
            varid       = CBS_CONFIG.CbsDbgFanTablePwmHigh,
            prompt      = STRING_TOKEN (AMD_CBS_STR_HIGH_PWM),
            help        = STRING_TOKEN (AMD_CBS_STR_HIGH_PWM_HELP),
            flags       = RESET_REQUIRED,
            minimum     = 0,
            maximum     = 100,
            step        = 0,
            default     = 0,
          endnumeric;
        endif;

        // Display Condition: CbsDbgFanTableCtl=Manual
        suppressif NOT ideqval CBS_CONFIG.CbsDbgFanTableCtl == 1 OR SHOW_ALL_CBS==0;
          // Temperature Hysteresis
          // Temperature Hysteresis ['C]
          numeric
            varid       = CBS_CONFIG.CbsDbgFanTableHyst,
            prompt      = STRING_TOKEN (AMD_CBS_STR_TEMPERATURE_HYSTERESIS),
            help        = STRING_TOKEN (AMD_CBS_STR_TEMPERATURE_HYSTERESIS_HELP),
            flags       = RESET_REQUIRED,
            minimum     = 0,
            maximum     = 0xff,
            step        = 0,
            default     = 0,
          endnumeric;
        endif;

        // Display Condition: CbsDbgFanTableCtl=Manual
        suppressif NOT ideqval CBS_CONFIG.CbsDbgFanTableCtl == 1 OR SHOW_ALL_CBS==0;
          // Pwm Frequency
          // 0 = 25kHz\n1 = 100Hz
          oneof
            varid       = CBS_CONFIG.CbsDbgFanTablePwmFreq,
            prompt      = STRING_TOKEN (AMD_CBS_STR_PWM_FREQUENCY),
            help        = STRING_TOKEN (AMD_CBS_STR_PWM_FREQUENCY_HELP),
            option text = STRING_TOKEN (AMD_CBS_STR_100HZ),           value = 1,    flags = 0 | RESET_REQUIRED;
            option text = STRING_TOKEN (AMD_CBS_STR_25KHZ),           value = 0,    flags = DEFAULT | RESET_REQUIRED | MANUFACTURING;
          endoneof;
        endif;

        // Display Condition: CbsDbgFanTableCtl=Manual
        suppressif NOT ideqval CBS_CONFIG.CbsDbgFanTableCtl == 1 OR SHOW_ALL_CBS==0;
          // Fan Polarity
          // 0 = negative\n1 = positive
          oneof
            varid       = CBS_CONFIG.CbsDbgFanPolarity,
            prompt      = STRING_TOKEN (AMD_CBS_STR_FAN_POLARITY),
            help        = STRING_TOKEN (AMD_CBS_STR_FAN_POLARITY_HELP),
            option text = STRING_TOKEN (AMD_CBS_STR_NEGATIVE),        value = 0,    flags = DEFAULT | RESET_REQUIRED | MANUFACTURING;
            option text = STRING_TOKEN (AMD_CBS_STR_POSITIVE),        value = 1,    flags = 0 | RESET_REQUIRED;
          endoneof;
        endif;

      endform;
      
      form
        formid        = SETUP_LCLK_FREQUENCY_CONTORL_LABLE,

        title         = STRING_TOKEN (AMD_CBS_STR_LCLK_FREQUENCY_CONTORL_SECTION);

        subtitle text = STRING_TOKEN (AMD_CBS_STR_LCLK_FREQUENCY_CONTORL_SECTION);
        subtitle text = STRING_TOKEN (AMD_CBS_STR_BLANK);

        suppressif SHOW_ALL_CBS==0;
          // NBIO LCLK Frequency
          // Auto = Use the default NBIO LCLK Frequency
          oneof
            varid       = CBS_CONFIG.CbsCmnNbioLclkFreq,
            prompt      = STRING_TOKEN (AMD_CBS_STR_NBIO_LCLK_FREQUENCY),
            help        = STRING_TOKEN (AMD_CBS_STR_NBIO_LCLK_FREQUENCY_HELP),
            option text = STRING_TOKEN (AMD_CBS_STR_AUTO),              value = 0xF,     flags = DEFAULT | RESET_REQUIRED | MANUFACTURING;
            option text = STRING_TOKEN (AMD_CBS_STR_LCLK_1000MHZ),           value = 0x10,    flags = 0 | RESET_REQUIRED ;
            option text = STRING_TOKEN (AMD_CBS_STR_LCLK_889MHZ),            value = 0x12,    flags = 0 | RESET_REQUIRED ;
            option text = STRING_TOKEN (AMD_CBS_STR_LCLK_800MHZ),            value = 0x14,    flags = 0 | RESET_REQUIRED ;
            option text = STRING_TOKEN (AMD_CBS_STR_LCLK_727MHZ),            value = 0x16,    flags = 0 | RESET_REQUIRED ;
            option text = STRING_TOKEN (AMD_CBS_STR_LCLK_667MHZ),            value = 0x18,    flags = 0 | RESET_REQUIRED ;
            option text = STRING_TOKEN (AMD_CBS_STR_LCLK_615MHZ),            value = 0x1A,    flags = 0 | RESET_REQUIRED ;
            option text = STRING_TOKEN (AMD_CBS_STR_LCLK_571MHZ),            value = 0x1C,    flags = 0 | RESET_REQUIRED ;
            option text = STRING_TOKEN (AMD_CBS_STR_LCLK_533MHZ),            value = 0x1E,    flags = 0 | RESET_REQUIRED ;
            option text = STRING_TOKEN (AMD_CBS_STR_LCLK_500MHZ),            value = 0x20,    flags = 0 | RESET_REQUIRED ;

          endoneof;
        endif;
          
      endform;
      
      //
      // form - Hot Plug flags
      //
      form

        formid        = SETUP_HOT_PLUG_FLAGS_LABLE,

        title         = STRING_TOKEN (AMD_CBS_STR_HOT_PLUG_FLAGS_SECTION);

        subtitle text = STRING_TOKEN (AMD_CBS_STR_HOT_PLUG_FLAGS_SECTION);
        subtitle text = STRING_TOKEN (AMD_CBS_STR_BLANK);

        suppressif SHOW_ALL_CBS==0;
          // Ignore sideband
          // Disable sideband
          oneof
            varid       = CBS_CONFIG.CbsCmnDisableSideband,
            prompt      = STRING_TOKEN (AMD_CBS_STR_IGNORE_SIDEBAND),
            help        = STRING_TOKEN (AMD_CBS_STR_IGNORE_SIDEBAND_HELP),
            option text = STRING_TOKEN (AMD_CBS_STR_DISABLED),        value = 0,    flags = DEFAULT | RESET_REQUIRED | MANUFACTURING;
            option text = STRING_TOKEN (AMD_CBS_STR_ENABLED),         value = 1,    flags = 0 | RESET_REQUIRED;
            option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xF,  flags = 0 | RESET_REQUIRED;
          endoneof;
        endif;

        suppressif SHOW_ALL_CBS==0;
          // Disable L1 w/a
          oneof
            varid       = CBS_CONFIG.CbsCmnDisableL1wa,
            prompt      = STRING_TOKEN (AMD_CBS_STR_DISABLE_L1_W_A),
            help        = STRING_TOKEN (AMD_CBS_STR_DISABLE_L1_W_A_HELP),
            option text = STRING_TOKEN (AMD_CBS_STR_DISABLED),        value = 0,    flags = DEFAULT | RESET_REQUIRED | MANUFACTURING;
            option text = STRING_TOKEN (AMD_CBS_STR_ENABLED),         value = 1,    flags = 0 | RESET_REQUIRED;
            option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xF,  flags = 0 | RESET_REQUIRED;
          endoneof;
        endif;

        suppressif SHOW_ALL_CBS==0;
          // Disable BridgeDis
          // No BridgeDis update based on sideband
          oneof
            varid       = CBS_CONFIG.CbsCmnDisableBridgeDis,
            prompt      = STRING_TOKEN (AMD_CBS_STR_DISABLE_BRIDGEDIS),
            help        = STRING_TOKEN (AMD_CBS_STR_DISABLE_BRIDGEDIS_HELP),
            option text = STRING_TOKEN (AMD_CBS_STR_DISABLED),        value = 0,    flags = DEFAULT | RESET_REQUIRED | MANUFACTURING;
            option text = STRING_TOKEN (AMD_CBS_STR_ENABLED),         value = 1,    flags = 0 | RESET_REQUIRED;
            option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xF,  flags = 0 | RESET_REQUIRED;
          endoneof;
        endif;

        suppressif SHOW_ALL_CBS==0;
          // Disable irq polling
          // HPC holds root port IRQ until DL_Active is set
          oneof
            varid       = CBS_CONFIG.CbsCmnDisableIrqPoll,
            prompt      = STRING_TOKEN (AMD_CBS_STR_DISABLE_IRQ_POLLING),
            help        = STRING_TOKEN (AMD_CBS_STR_DISABLE_IRQ_POLLING_HELP),
            option text = STRING_TOKEN (AMD_CBS_STR_DISABLED),        value = 0,    flags = DEFAULT | RESET_REQUIRED | MANUFACTURING;
            option text = STRING_TOKEN (AMD_CBS_STR_ENABLED),         value = 1,    flags = 0 | RESET_REQUIRED;
            option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xF,  flags = 0 | RESET_REQUIRED;
          endoneof;
        endif;

        suppressif SHOW_ALL_CBS==0;
          // IRQ sets BridgeDis
          // Register control of BridgeDis only follows DL_Active
          oneof
            varid       = CBS_CONFIG.CbsCmnIrqSetsBridgeDis,
            prompt      = STRING_TOKEN (AMD_CBS_STR_IRQ_SETS_BRIDGEDIS),
            help        = STRING_TOKEN (AMD_CBS_STR_IRQ_SETS_BRIDGEDIS_HELP),
            option text = STRING_TOKEN (AMD_CBS_STR_DISABLED),        value = 0,    flags = DEFAULT | RESET_REQUIRED | MANUFACTURING;
            option text = STRING_TOKEN (AMD_CBS_STR_ENABLED),         value = 1,    flags = 0 | RESET_REQUIRED;
            option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xF,  flags = 0 | RESET_REQUIRED;
          endoneof;
        endif;

        suppressif SHOW_ALL_CBS==0;
          oneof
            varid       = CBS_CONFIG.CbsPcieHotplugSupport,
            prompt      = STRING_TOKEN (AMD_CBS_STR_PCIE_HOTPLUG_SUPPORT),
            help        = STRING_TOKEN (AMD_CBS_STR_PCIE_HOTPLUG_SUPPORT_HELP),
            option text = STRING_TOKEN (AMD_CBS_STR_DISABLED),        value = 0,    flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
            option text = STRING_TOKEN (AMD_CBS_STR_ENABLED),         value = 1,    flags = 0 | RESET_REQUIRED;
            option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xF,  flags = 0 | RESET_REQUIRED;
          endoneof;
        endif;
      endform;
    //
    // form - FCH Common Options
    //
    form

      formid        = SETUP_FCH_COMMON_OPTIONS_LABLE,

      title         = STRING_TOKEN (AMD_CBS_STR_FCH_COMMON_OPTIONS_SECTION);

      subtitle text = STRING_TOKEN (AMD_CBS_STR_FCH_COMMON_OPTIONS_SECTION);
      subtitle text = STRING_TOKEN (AMD_CBS_STR_BLANK);

      suppressif SHOW_ALL_CBS==0;
        goto SETUP_SATA_CONFIGURATION_OPTIONS_LABLE,
          prompt      = STRING_TOKEN (AMD_CBS_STR_SATA_CONFIGURATION_OPTIONS_SECTION),
          help        = STRING_TOKEN (AMD_CBS_STR_SATA_CONFIGURATION_OPTIONS_SECTION);
      endif;

      suppressif SHOW_ALL_CBS==0;
        goto SETUP_USB_CONFIGURATION_OPTIONS_LABLE,
          prompt      = STRING_TOKEN (AMD_CBS_STR_USB_CONFIGURATION_OPTIONS_SECTION),
          help        = STRING_TOKEN (AMD_CBS_STR_USB_CONFIGURATION_OPTIONS_SECTION);
      endif;

      suppressif TRUE;
        goto SETUP_SD_SECURE_DIGITAL_OPTIONS_LABLE,
          prompt      = STRING_TOKEN (AMD_CBS_STR_SD_SECURE_DIGITAL_OPTIONS_SECTION),
          help        = STRING_TOKEN (AMD_CBS_STR_SD_SECURE_DIGITAL_OPTIONS_SECTION);
      endif;

      goto SETUP_AC_POWER_LOSS_OPTIONS_LABLE,
        prompt      = STRING_TOKEN (AMD_CBS_STR_AC_POWER_LOSS_OPTIONS_SECTION),
        help        = STRING_TOKEN (AMD_CBS_STR_AC_POWER_LOSS_OPTIONS_SECTION);

      suppressif SHOW_ALL_CBS==0;
        goto SETUP_I2C_CONFIGURATION_OPTIONS_LABLE,
          prompt      = STRING_TOKEN (AMD_CBS_STR_I2C_CONFIGURATION_OPTIONS_SECTION),
          help        = STRING_TOKEN (AMD_CBS_STR_I2C_CONFIGURATION_OPTIONS_SECTION);
      endif;

      suppressif SHOW_ALL_CBS==0;
        goto SETUP_UART_CONFIGURATION_OPTIONS_LABLE,
          prompt      = STRING_TOKEN (AMD_CBS_STR_UART_CONFIGURATION_OPTIONS_SECTION),
          help        = STRING_TOKEN (AMD_CBS_STR_UART_CONFIGURATION_OPTIONS_SECTION);
      endif;
      
            suppressif NOT ideqval OEM_NO_DEFAULT_VARIABLES.OemHide == 0x11;

        goto SETUP_SPI_CONFIGURATION_OPTIONS_LABLE,
          prompt      = STRING_TOKEN (AMD_CBS_STR_SPI_CONFIGURATION_OPTIONS_SECTION),
          help        = STRING_TOKEN (AMD_CBS_STR_SPI_CONFIGURATION_OPTIONS_SECTION);
      endif;
      
      suppressif TRUE;
      //suppressif SHOW_ALL_CBS==0;
        goto SETUP_ESPI_CONFIGURATION_OPTIONS_LABLE,
          prompt      = STRING_TOKEN (AMD_CBS_STR_ESPI_CONFIGURATION_OPTIONS_SECTION),
          help        = STRING_TOKEN (AMD_CBS_STR_ESPI_CONFIGURATION_OPTIONS_SECTION);
      endif;

    endform;
      //
      // form - SATA Configuration Options
      //
      form

        formid        = SETUP_SATA_CONFIGURATION_OPTIONS_LABLE,

        title         = STRING_TOKEN (AMD_CBS_STR_SATA_CONFIGURATION_OPTIONS_SECTION);

        subtitle text = STRING_TOKEN (AMD_CBS_STR_SATA_CONFIGURATION_OPTIONS_SECTION);
        subtitle text = STRING_TOKEN (AMD_CBS_STR_BLANK);

        suppressif SHOW_ALL_CBS==0;
          // SATA Controller
          // Disable or enable OnChip SATA controller
          oneof
            varid       = CBS_CONFIG.CbsCmnFchSataEnable,
            prompt      = STRING_TOKEN (AMD_CBS_STR_SATA_CONTROLLER),
            help        = STRING_TOKEN (AMD_CBS_STR_SATA_CONTROLLER_HELP),
            option text = STRING_TOKEN (AMD_CBS_STR_DISABLED),        value = 0,    flags = 0 | RESET_REQUIRED;
            option text = STRING_TOKEN (AMD_CBS_STR_ENABLED),         value = 1,    flags = 0 | RESET_REQUIRED;
            option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xf,  flags = DEFAULT | RESET_REQUIRED | MANUFACTURING;
          endoneof;
        endif;

        // Display Condition: CbsCmnFchSataEnable=Enabled
        suppressif NOT ideqval CBS_CONFIG.CbsCmnFchSataEnable == 1 OR SHOW_ALL_CBS==0;
          // SATA Mode
          // Select OnChip SATA Type
          oneof
            varid       = CBS_CONFIG.CbsCmnFchSataClass,
            prompt      = STRING_TOKEN (AMD_CBS_STR_SATA_MODE),
            help        = STRING_TOKEN (AMD_CBS_STR_SATA_MODE_HELP),
            option text = STRING_TOKEN (AMD_CBS_STR_AHCI),            value = 2,    flags = DEFAULT | RESET_REQUIRED | MANUFACTURING;
            option text = STRING_TOKEN (AMD_CBS_STR_AHCI_AS_ID_0X7904), value = 5,    flags = 0 | RESET_REQUIRED;
            option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xf,  flags = 0 | RESET_REQUIRED;
          endoneof;
        endif;

        suppressif SHOW_ALL_CBS==0;
          // Sata RAS Support
          // Disable or enable Sata RAS Support
          oneof
            varid       = CBS_CONFIG.CbsCmnFchSataRasSupport,
            prompt      = STRING_TOKEN (AMD_CBS_STR_SATA_RAS_SUPPORT),
            help        = STRING_TOKEN (AMD_CBS_STR_SATA_RAS_SUPPORT_HELP),
            option text = STRING_TOKEN (AMD_CBS_STR_DISABLED),        value = 0,    flags = 0 | RESET_REQUIRED;
            option text = STRING_TOKEN (AMD_CBS_STR_ENABLED),         value = 1,    flags = 0 | RESET_REQUIRED;
            option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xf,  flags = DEFAULT | RESET_REQUIRED | MANUFACTURING;
          endoneof;
        endif;

        suppressif SHOW_ALL_CBS==0;
          // Sata Disabled AHCI Prefetch Function
          // Disable or enable Sata Disabled AHCI Prefetch Function
          oneof
            varid       = CBS_CONFIG.CbsCmnFchSataAhciDisPrefetchFunction,
            prompt      = STRING_TOKEN (AMD_CBS_STR_SATA_DISABLED_AHCI_PREFETCH_FUNCTION),
            help        = STRING_TOKEN (AMD_CBS_STR_SATA_DISABLED_AHCI_PREFETCH_FUNCTION_HELP),
            option text = STRING_TOKEN (AMD_CBS_STR_DISABLED),        value = 0,    flags = 0 | RESET_REQUIRED;
            option text = STRING_TOKEN (AMD_CBS_STR_ENABLED),         value = 1,    flags = 0 | RESET_REQUIRED;
            option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xf,  flags = DEFAULT | RESET_REQUIRED | MANUFACTURING;
          endoneof;
        endif;

        suppressif SHOW_ALL_CBS==0;
          // Aggresive SATA Device Sleep Port 0
          // No help string
          oneof
            varid       = CBS_CONFIG.CbsDbgFchSataAggresiveDevSlpP0,
            prompt      = STRING_TOKEN (AMD_CBS_STR_AGGRESIVE_SATA_DEVICE_SLEEP_PORT_0),
            help        = STRING_TOKEN (AMD_CBS_STR_AGGRESIVE_SATA_DEVICE_SLEEP_PORT_0_HELP),
            option text = STRING_TOKEN (AMD_CBS_STR_DISABLED),        value = 0,    flags = 0 | RESET_REQUIRED;
            option text = STRING_TOKEN (AMD_CBS_STR_ENABLED),         value = 1,    flags = 0 | RESET_REQUIRED;
            option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xF,  flags = DEFAULT | RESET_REQUIRED | MANUFACTURING;
          endoneof;
        endif;

        // Display Condition: CbsDbgFchSataAggresiveDevSlpP0=Enabled
        suppressif NOT ideqval CBS_CONFIG.CbsDbgFchSataAggresiveDevSlpP0 == 1 OR SHOW_ALL_CBS==0;
          // DevSleep0 Port Number
          // DEVSLP port 0
          numeric
            varid       = CBS_CONFIG.CbsDbgFchSataDevSlpPort0Num,
            prompt      = STRING_TOKEN (AMD_CBS_STR_DEVSLEEP0_PORT_NUMBER),
            help        = STRING_TOKEN (AMD_CBS_STR_DEVSLEEP0_PORT_NUMBER_HELP),
            flags       = DISPLAY_UINT_HEX | RESET_REQUIRED,
            minimum     = 0,
            maximum     = 7,
            step        = 0,
            default     = 0,
          endnumeric;
        endif;

        suppressif SHOW_ALL_CBS==0;
          // Aggresive SATA Device Sleep Port 1
          // No help string
          oneof
            varid       = CBS_CONFIG.CbsDbgFchSataAggresiveDevSlpP1,
            prompt      = STRING_TOKEN (AMD_CBS_STR_AGGRESIVE_SATA_DEVICE_SLEEP_PORT_1),
            help        = STRING_TOKEN (AMD_CBS_STR_AGGRESIVE_SATA_DEVICE_SLEEP_PORT_1_HELP),
            option text = STRING_TOKEN (AMD_CBS_STR_DISABLED),        value = 0,    flags = 0 | RESET_REQUIRED;
            option text = STRING_TOKEN (AMD_CBS_STR_ENABLED),         value = 1,    flags = 0 | RESET_REQUIRED;
            option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xF,  flags = DEFAULT | RESET_REQUIRED | MANUFACTURING;
          endoneof;
        endif;

        // Display Condition: CbsDbgFchSataAggresiveDevSlpP1=Enabled
        suppressif NOT ideqval CBS_CONFIG.CbsDbgFchSataAggresiveDevSlpP1 == 1 OR SHOW_ALL_CBS==0;
          // DevSleep1 Port Number
          // DEVSLP port 1
          numeric
            varid       = CBS_CONFIG.CbsDbgFchSataDevSlpPort1Num,
            prompt      = STRING_TOKEN (AMD_CBS_STR_DEVSLEEP1_PORT_NUMBER),
            help        = STRING_TOKEN (AMD_CBS_STR_DEVSLEEP1_PORT_NUMBER_HELP),
            flags       = DISPLAY_UINT_HEX | RESET_REQUIRED,
            minimum     = 0,
            maximum     = 7,
            step        = 0,
            default     = 0,
          endnumeric;
        endif;

      endform;
      //
      // form - USB Configuration Options
      //
      form

        formid        = SETUP_USB_CONFIGURATION_OPTIONS_LABLE,

        title         = STRING_TOKEN (AMD_CBS_STR_USB_CONFIGURATION_OPTIONS_SECTION);

        subtitle text = STRING_TOKEN (AMD_CBS_STR_USB_CONFIGURATION_OPTIONS_SECTION);
        subtitle text = STRING_TOKEN (AMD_CBS_STR_BLANK);

        suppressif SHOW_ALL_CBS==0;
          // XHCI controller enable
          // Enable or disable USB3 controller.
          oneof
            varid       = CBS_CONFIG.CbsCmnFchUsbXHCI0Enable,
            prompt      = STRING_TOKEN (AMD_CBS_STR_XHCI_CONTROLLER_ENABLE),
            help        = STRING_TOKEN (AMD_CBS_STR_XHCI_CONTROLLER_ENABLE_HELP),
            option text = STRING_TOKEN (AMD_CBS_STR_ENABLED),         value = 1,    flags = 0 | RESET_REQUIRED;
            option text = STRING_TOKEN (AMD_CBS_STR_DISABLED),        value = 0,    flags = 0 | RESET_REQUIRED;
            option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xf,  flags = DEFAULT | RESET_REQUIRED | MANUFACTURING;
          endoneof;
        endif;
        // Display Condition: CbsComboFlag!=1
        suppressif  ideqval CBS_CONFIG.CbsComboFlag==1 OR SHOW_ALL_CBS==0;
          goto SETUP_MCM_USB_ENABLE_LABLE,
            prompt      = STRING_TOKEN (AMD_CBS_STR_MCM_USB_ENABLE_SECTION),
            help        = STRING_TOKEN (AMD_CBS_STR_MCM_USB_ENABLE_SECTION);
        endif;

      endform;
        //
        // form - MCM USB enable
        //
        form

          formid        = SETUP_MCM_USB_ENABLE_LABLE,

          title         = STRING_TOKEN (AMD_CBS_STR_MCM_USB_ENABLE_SECTION);

          subtitle text = STRING_TOKEN (AMD_CBS_STR_MCM_USB_ENABLE_SECTION);
          subtitle text = STRING_TOKEN (AMD_CBS_STR_BLANK);

          suppressif SHOW_ALL_CBS==0;
            // XHCI Controller1 enable (Die1)
            // Enable or disable USB3 controller.
            oneof
              varid       = CBS_CONFIG.CbsCmnFchUsbXHCI1Enable,
              prompt      = STRING_TOKEN (AMD_CBS_STR_XHCI_CONTROLLER1_ENABLE_DIE1),
              help        = STRING_TOKEN (AMD_CBS_STR_XHCI_CONTROLLER1_ENABLE_DIE1_HELP),
              option text = STRING_TOKEN (AMD_CBS_STR_ENABLED),         value = 1,    flags = 0 | RESET_REQUIRED;
              option text = STRING_TOKEN (AMD_CBS_STR_DISABLED),        value = 0,    flags = 0 | RESET_REQUIRED;
              option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xf,  flags = DEFAULT | RESET_REQUIRED | MANUFACTURING;
            endoneof;
          endif;

          suppressif SHOW_ALL_CBS==0;
            // XHCI2 enable (MCM1/Die0)
            // Enable or disable USB3 controller.
            oneof
              varid       = CBS_CONFIG.CbsCmnFchUsbXHCI2Enable,
              prompt      = STRING_TOKEN (AMD_CBS_STR_XHCI2_ENABLE_MCM1_DIE0),
              help        = STRING_TOKEN (AMD_CBS_STR_XHCI2_ENABLE_MCM1_DIE0_HELP),
              option text = STRING_TOKEN (AMD_CBS_STR_ENABLED),         value = 1,    flags = 0 | RESET_REQUIRED;
              option text = STRING_TOKEN (AMD_CBS_STR_DISABLED),        value = 0,    flags = 0 | RESET_REQUIRED;
              option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xf,  flags = DEFAULT | RESET_REQUIRED | MANUFACTURING;
            endoneof;
          endif;

          suppressif SHOW_ALL_CBS==0;
            // XHCI3 enable (MCM1/Die1)
            // Enable or disable USB3 controller.
            oneof
              varid       = CBS_CONFIG.CbsCmnFchUsbXHCI3Enable,
              prompt      = STRING_TOKEN (AMD_CBS_STR_XHCI3_ENABLE_MCM1_DIE1),
              help        = STRING_TOKEN (AMD_CBS_STR_XHCI3_ENABLE_MCM1_DIE1_HELP),
              option text = STRING_TOKEN (AMD_CBS_STR_ENABLED),         value = 1,    flags = 0 | RESET_REQUIRED;
              option text = STRING_TOKEN (AMD_CBS_STR_DISABLED),        value = 0,    flags = 0 | RESET_REQUIRED;
              option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xf,  flags = DEFAULT | RESET_REQUIRED | MANUFACTURING;
            endoneof;
          endif;

        endform;
      //
      // form - SD (Secure Digital) Options
      //
      form

        formid        = SETUP_SD_SECURE_DIGITAL_OPTIONS_LABLE,

        title         = STRING_TOKEN (AMD_CBS_STR_SD_SECURE_DIGITAL_OPTIONS_SECTION);

        subtitle text = STRING_TOKEN (AMD_CBS_STR_SD_SECURE_DIGITAL_OPTIONS_SECTION);
        subtitle text = STRING_TOKEN (AMD_CBS_STR_BLANK);

        suppressif SHOW_ALL_CBS==0;
          // SD Configuration Mode
          // Select SD Mode
          oneof
            varid       = CBS_CONFIG.CbsCmnFchSdConfig,
            prompt      = STRING_TOKEN (AMD_CBS_STR_SD_CONFIGURATION_MODE),
            help        = STRING_TOKEN (AMD_CBS_STR_SD_CONFIGURATION_MODE_HELP),
            option text = STRING_TOKEN (AMD_CBS_STR_DISABLED),        value = 0,    flags = DEFAULT | RESET_REQUIRED | MANUFACTURING;
            option text = STRING_TOKEN (AMD_CBS_STR_VER2_DOT_0),      value = 1,    flags = 0 | RESET_REQUIRED;
            option text = STRING_TOKEN (AMD_CBS_STR_SDDUMP),          value = 6,    flags = 0 | RESET_REQUIRED;
            option text = STRING_TOKEN (AMD_CBS_STR_AUTO_VERSION_2_DOT_0_LOW_SPEED), value = 0xf,  flags = 0 | RESET_REQUIRED;
          endoneof;
        endif;

      endform;
      //
      // form - Ac Power Loss Options
      //
      form

        formid        = SETUP_AC_POWER_LOSS_OPTIONS_LABLE,

        title         = STRING_TOKEN (AMD_CBS_STR_AC_POWER_LOSS_OPTIONS_SECTION);

        subtitle text = STRING_TOKEN (AMD_CBS_STR_AC_POWER_LOSS_OPTIONS_SECTION);
        subtitle text = STRING_TOKEN (AMD_CBS_STR_BLANK);

        // Ac Loss Control
        // Select Ac Loss Control Method
        oneof
          varid       = CBS_CONFIG.CbsCmnFchSystemPwrFailShadow,
          prompt      = STRING_TOKEN (AMD_CBS_STR_AC_LOSS_CONTROL),
          help        = STRING_TOKEN (AMD_CBS_STR_AC_LOSS_CONTROL_HELP),
          option text = STRING_TOKEN (AMD_CBS_STR_ALWAYS_OFF),      value = 0,    flags = DEFAULT | RESET_REQUIRED | MANUFACTURING;
          option text = STRING_TOKEN (AMD_CBS_STR_ALWAYS_ON),       value = 1,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_RESERVED),        value = 2,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_PREVIOUS),        value = 3,    flags = 0 | RESET_REQUIRED;
        endoneof;

      endform;
      //
      // form - I2C Configuration Options
      //
      form

        formid        = SETUP_I2C_CONFIGURATION_OPTIONS_LABLE,

        title         = STRING_TOKEN (AMD_CBS_STR_I2C_CONFIGURATION_OPTIONS_SECTION);

        subtitle text = STRING_TOKEN (AMD_CBS_STR_I2C_CONFIGURATION_OPTIONS_SECTION);
        subtitle text = STRING_TOKEN (AMD_CBS_STR_BLANK);

        suppressif SHOW_ALL_CBS==0;
          // I2C 0 Enable
          // No help string
          oneof
            varid       = CBS_CONFIG.CbsCmnFchI2C0Config,
            prompt      = STRING_TOKEN (AMD_CBS_STR_I2C_0_ENABLE),
            help        = STRING_TOKEN (AMD_CBS_STR_I2C_0_ENABLE_HELP),
            option text = STRING_TOKEN (AMD_CBS_STR_DISABLED),        value = 0,    flags = 0 | RESET_REQUIRED;
            option text = STRING_TOKEN (AMD_CBS_STR_ENABLED),         value = 1,    flags = 0 | RESET_REQUIRED;
            option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xf,  flags = DEFAULT | RESET_REQUIRED | MANUFACTURING;
          endoneof;
        endif;

        suppressif SHOW_ALL_CBS==0;
          // I2C 1 Enable
          // No help string
          oneof
            varid       = CBS_CONFIG.CbsCmnFchI2C1Config,
            prompt      = STRING_TOKEN (AMD_CBS_STR_I2C_1_ENABLE),
            help        = STRING_TOKEN (AMD_CBS_STR_I2C_1_ENABLE_HELP),
            option text = STRING_TOKEN (AMD_CBS_STR_DISABLED),        value = 0,    flags = 0 | RESET_REQUIRED;
            option text = STRING_TOKEN (AMD_CBS_STR_ENABLED),         value = 1,    flags = 0 | RESET_REQUIRED;
            option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xf,  flags = DEFAULT | RESET_REQUIRED | MANUFACTURING;
          endoneof;
        endif;

        suppressif SHOW_ALL_CBS==0;
          // I2C 2 Enable
          // No help string
          oneof
            varid       = CBS_CONFIG.CbsCmnFchI2C2Config,
            prompt      = STRING_TOKEN (AMD_CBS_STR_I2C_2_ENABLE),
            help        = STRING_TOKEN (AMD_CBS_STR_I2C_2_ENABLE_HELP),
            option text = STRING_TOKEN (AMD_CBS_STR_DISABLED),        value = 0,    flags = 0 | RESET_REQUIRED;
            option text = STRING_TOKEN (AMD_CBS_STR_ENABLED),         value = 1,    flags = 0 | RESET_REQUIRED;
            option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xf,  flags = DEFAULT | RESET_REQUIRED | MANUFACTURING;
          endoneof;
        endif;

        suppressif SHOW_ALL_CBS==0;
          // I2C 3 Enable
          // No help string
          oneof
            varid       = CBS_CONFIG.CbsCmnFchI2C3Config,
            prompt      = STRING_TOKEN (AMD_CBS_STR_I2C_3_ENABLE),
            help        = STRING_TOKEN (AMD_CBS_STR_I2C_3_ENABLE_HELP),
            option text = STRING_TOKEN (AMD_CBS_STR_DISABLED),        value = 0,    flags = 0 | RESET_REQUIRED;
            option text = STRING_TOKEN (AMD_CBS_STR_ENABLED),         value = 1,    flags = 0 | RESET_REQUIRED;
            option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xf,  flags = DEFAULT | RESET_REQUIRED | MANUFACTURING;
          endoneof;
        endif;

        suppressif SHOW_ALL_CBS==0;
          // I2C 4 Enable
          // No help string
          oneof
            varid       = CBS_CONFIG.CbsCmnFchI2C4Config,
            prompt      = STRING_TOKEN (AMD_CBS_STR_I2C_4_ENABLE),
            help        = STRING_TOKEN (AMD_CBS_STR_I2C_4_ENABLE_HELP),
            option text = STRING_TOKEN (AMD_CBS_STR_DISABLED),        value = 0,    flags = 0 | RESET_REQUIRED;
            option text = STRING_TOKEN (AMD_CBS_STR_ENABLED),         value = 1,    flags = 0 | RESET_REQUIRED;
            option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xf,  flags = DEFAULT | RESET_REQUIRED | MANUFACTURING;
          endoneof;
        endif;

        suppressif SHOW_ALL_CBS==0;
          // I2C 5 Enable
          // No help string
          oneof
            varid       = CBS_CONFIG.CbsCmnFchI2C5Config,
            prompt      = STRING_TOKEN (AMD_CBS_STR_I2C_5_ENABLE),
            help        = STRING_TOKEN (AMD_CBS_STR_I2C_5_ENABLE_HELP),
            option text = STRING_TOKEN (AMD_CBS_STR_DISABLED),        value = 0,    flags = 0 | RESET_REQUIRED;
            option text = STRING_TOKEN (AMD_CBS_STR_ENABLED),         value = 1,    flags = 0 | RESET_REQUIRED;
            option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xf,  flags = DEFAULT | RESET_REQUIRED | MANUFACTURING;
          endoneof;
        endif;

      endform;
      //
      // form - Uart Configuration Options
      //
      form

        formid        = SETUP_UART_CONFIGURATION_OPTIONS_LABLE,

        title         = STRING_TOKEN (AMD_CBS_STR_UART_CONFIGURATION_OPTIONS_SECTION);

        subtitle text = STRING_TOKEN (AMD_CBS_STR_UART_CONFIGURATION_OPTIONS_SECTION);
        subtitle text = STRING_TOKEN (AMD_CBS_STR_BLANK);

        suppressif SHOW_ALL_CBS==0;
          // Uart 0 Enable
          // Uart 0 has no HW FC if Uart 2 is enabled
          oneof
            varid       = CBS_CONFIG.CbsCmnFchUart0Config,
            prompt      = STRING_TOKEN (AMD_CBS_STR_UART_0_ENABLE),
            help        = STRING_TOKEN (AMD_CBS_STR_UART_0_ENABLE_HELP),
            option text = STRING_TOKEN (AMD_CBS_STR_DISABLED),        value = 0,    flags = 0 | RESET_REQUIRED;
            option text = STRING_TOKEN (AMD_CBS_STR_ENABLED),         value = 1,    flags = 0 | RESET_REQUIRED;
            option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xf,  flags = DEFAULT | RESET_REQUIRED | MANUFACTURING;
          endoneof;
        endif;

        // Display Condition: CbsCmnFchUart0Config = Enabled
        suppressif NOT ideqval CBS_CONFIG.CbsCmnFchUart0Config == 1 OR SHOW_ALL_CBS==0;
          // Uart 0 Legacy Options
          // No help string
          oneof
            varid       = CBS_CONFIG.CbsCmnFchUart0LegacyConfig,
            prompt      = STRING_TOKEN (AMD_CBS_STR_UART_0_LEGACY_OPTIONS),
            help        = STRING_TOKEN (AMD_CBS_STR_UART_0_LEGACY_OPTIONS_HELP),
            option text = STRING_TOKEN (AMD_CBS_STR_DISABLED),        value = 0,    flags = 0 | RESET_REQUIRED;
            option text = STRING_TOKEN (AMD_CBS_STR_0X2E8),           value = 1,    flags = 0 | RESET_REQUIRED;
            option text = STRING_TOKEN (AMD_CBS_STR_0X2F8),           value = 2,    flags = 0 | RESET_REQUIRED;
            option text = STRING_TOKEN (AMD_CBS_STR_0X3E8),           value = 3,    flags = 0 | RESET_REQUIRED;
            option text = STRING_TOKEN (AMD_CBS_STR_0X3F8),           value = 4,    flags = 0 | RESET_REQUIRED;
            option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xf,  flags = DEFAULT | RESET_REQUIRED | MANUFACTURING;
          endoneof;
        endif;

        suppressif SHOW_ALL_CBS==0;
          // Uart 1 Enable
          // Uart 1 has no HW FC if Uart 3 is enabled
          oneof
            varid       = CBS_CONFIG.CbsCmnFchUart1Config,
            prompt      = STRING_TOKEN (AMD_CBS_STR_UART_1_ENABLE),
            help        = STRING_TOKEN (AMD_CBS_STR_UART_1_ENABLE_HELP),
            option text = STRING_TOKEN (AMD_CBS_STR_DISABLED),        value = 0,    flags = 0 | RESET_REQUIRED;
            option text = STRING_TOKEN (AMD_CBS_STR_ENABLED),         value = 1,    flags = 0 | RESET_REQUIRED;
            option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xf,  flags = DEFAULT | RESET_REQUIRED | MANUFACTURING;
          endoneof;
        endif;

        // Display Condition: CbsCmnFchUart1Config = Enabled
        suppressif NOT ideqval CBS_CONFIG.CbsCmnFchUart1Config == 1 OR SHOW_ALL_CBS==0;
          // Uart 1 Legacy Options
          // No help string
          oneof
            varid       = CBS_CONFIG.CbsCmnFchUart1LegacyConfig,
            prompt      = STRING_TOKEN (AMD_CBS_STR_UART_1_LEGACY_OPTIONS),
            help        = STRING_TOKEN (AMD_CBS_STR_UART_1_LEGACY_OPTIONS_HELP),
            option text = STRING_TOKEN (AMD_CBS_STR_DISABLED),        value = 0,    flags = 0 | RESET_REQUIRED;
            option text = STRING_TOKEN (AMD_CBS_STR_0X2E8),           value = 1,    flags = 0 | RESET_REQUIRED;
            option text = STRING_TOKEN (AMD_CBS_STR_0X2F8),           value = 2,    flags = 0 | RESET_REQUIRED;
            option text = STRING_TOKEN (AMD_CBS_STR_0X3E8),           value = 3,    flags = 0 | RESET_REQUIRED;
            option text = STRING_TOKEN (AMD_CBS_STR_0X3F8),           value = 4,    flags = 0 | RESET_REQUIRED;
            option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xf,  flags = DEFAULT | RESET_REQUIRED | MANUFACTURING;
          endoneof;
        endif;

        suppressif SHOW_ALL_CBS==0;
          // Uart 2 Enable (no HW FC)
          // No help string
          oneof
            varid       = CBS_CONFIG.CbsCmnFchUart2Config,
            prompt      = STRING_TOKEN (AMD_CBS_STR_UART_2_ENABLE_NO_HW_FC),
            help        = STRING_TOKEN (AMD_CBS_STR_UART_2_ENABLE_NO_HW_FC_HELP),
            option text = STRING_TOKEN (AMD_CBS_STR_DISABLED),        value = 0,    flags = 0 | RESET_REQUIRED;
            option text = STRING_TOKEN (AMD_CBS_STR_ENABLED),         value = 1,    flags = 0 | RESET_REQUIRED;
            option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xf,  flags = DEFAULT | RESET_REQUIRED | MANUFACTURING;
          endoneof;
        endif;

        // Display Condition: CbsCmnFchUart2Config = Enabled
        suppressif NOT ideqval CBS_CONFIG.CbsCmnFchUart2Config == 1 OR SHOW_ALL_CBS==0;
          // Uart 2 Legacy Options
          // No help string
          oneof
            varid       = CBS_CONFIG.CbsCmnFchUart2LegacyConfig,
            prompt      = STRING_TOKEN (AMD_CBS_STR_UART_2_LEGACY_OPTIONS),
            help        = STRING_TOKEN (AMD_CBS_STR_UART_2_LEGACY_OPTIONS_HELP),
            option text = STRING_TOKEN (AMD_CBS_STR_DISABLED),        value = 0,    flags = 0 | RESET_REQUIRED;
            option text = STRING_TOKEN (AMD_CBS_STR_0X2E8),           value = 1,    flags = 0 | RESET_REQUIRED;
            option text = STRING_TOKEN (AMD_CBS_STR_0X2F8),           value = 2,    flags = 0 | RESET_REQUIRED;
            option text = STRING_TOKEN (AMD_CBS_STR_0X3E8),           value = 3,    flags = 0 | RESET_REQUIRED;
            option text = STRING_TOKEN (AMD_CBS_STR_0X3F8),           value = 4,    flags = 0 | RESET_REQUIRED;
            option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xf,  flags = DEFAULT | RESET_REQUIRED | MANUFACTURING;
          endoneof;
        endif;

        suppressif SHOW_ALL_CBS==0;
          // Uart 3 Enable (no HW FC)
          // No help string
          oneof
            varid       = CBS_CONFIG.CbsCmnFchUart3Config,
            prompt      = STRING_TOKEN (AMD_CBS_STR_UART_3_ENABLE_NO_HW_FC),
            help        = STRING_TOKEN (AMD_CBS_STR_UART_3_ENABLE_NO_HW_FC_HELP),
            option text = STRING_TOKEN (AMD_CBS_STR_DISABLED),        value = 0,    flags = 0 | RESET_REQUIRED;
            option text = STRING_TOKEN (AMD_CBS_STR_ENABLED),         value = 1,    flags = 0 | RESET_REQUIRED;
            option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xf,  flags = DEFAULT | RESET_REQUIRED | MANUFACTURING;
          endoneof;
        endif;

        // Display Condition: CbsCmnFchUart3Config = Enabled
        suppressif NOT ideqval CBS_CONFIG.CbsCmnFchUart3Config == 1 OR SHOW_ALL_CBS==0;
          // Uart 3 Legacy Options
          // No help string
          oneof
            varid       = CBS_CONFIG.CbsCmnFchUart3LegacyConfig,
            prompt      = STRING_TOKEN (AMD_CBS_STR_UART_3_LEGACY_OPTIONS),
            help        = STRING_TOKEN (AMD_CBS_STR_UART_3_LEGACY_OPTIONS_HELP),
            option text = STRING_TOKEN (AMD_CBS_STR_DISABLED),        value = 0,    flags = 0 | RESET_REQUIRED;
            option text = STRING_TOKEN (AMD_CBS_STR_0X2E8),           value = 1,    flags = 0 | RESET_REQUIRED;
            option text = STRING_TOKEN (AMD_CBS_STR_0X2F8),           value = 2,    flags = 0 | RESET_REQUIRED;
            option text = STRING_TOKEN (AMD_CBS_STR_0X3E8),           value = 3,    flags = 0 | RESET_REQUIRED;
            option text = STRING_TOKEN (AMD_CBS_STR_0X3F8),           value = 4,    flags = 0 | RESET_REQUIRED;
            option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xf,  flags = DEFAULT | RESET_REQUIRED | MANUFACTURING;
          endoneof;
        endif;

      endform;
      
    form
      
      formid        = SETUP_SPI_CONFIGURATION_OPTIONS_LABLE,

      title         = STRING_TOKEN (AMD_CBS_STR_SPI_CONFIGURATION_OPTIONS_SECTION);

      subtitle text = STRING_TOKEN (AMD_CBS_STR_SPI_CONFIGURATION_OPTIONS_SECTION);
      subtitle text = STRING_TOKEN (AMD_CBS_STR_BLANK);
	   
      suppressif SHOW_ALL_CBS==0;
          //SPISpeed
       oneof
          //Default Value of APCB_TOKEN_CBS_CMN_BIOS_SPI_SPEED_MODE_VALUE
          varid       = CBS_CONFIG.CbsCmnSPISpeedCtrl,
          prompt      = STRING_TOKEN (AMD_CBS_STR_SPI_SPEED_CONTROL),
          help        = STRING_TOKEN (AMD_CBS_STR_SPI_SPEED_CONTROL_HELP),
          option text = STRING_TOKEN (AMD_CBS_STR_AUTO),               value = 0xf,  flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_SPI_16MHZ),          value = 0,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_SPI_22MHZ),          value = 1,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_SPI_33MHZ),          value = 2,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_SPI_66MHZ),          value = 3,    flags = 0 | RESET_REQUIRED;
        endoneof;
     endif;
     endform;
      
      //
      // form - ESPI Configuration Options
      //
      form

        formid        = SETUP_ESPI_CONFIGURATION_OPTIONS_LABLE,

        title         = STRING_TOKEN (AMD_CBS_STR_ESPI_CONFIGURATION_OPTIONS_SECTION);

        subtitle text = STRING_TOKEN (AMD_CBS_STR_ESPI_CONFIGURATION_OPTIONS_SECTION);
        subtitle text = STRING_TOKEN (AMD_CBS_STR_BLANK);

        suppressif TRUE;
        //suppressif SHOW_ALL_CBS==0;
          // ESPI Enable
          // No help string
          oneof
            varid       = CBS_CONFIG.CbsCmnFchEspiConfig,
            prompt      = STRING_TOKEN (AMD_CBS_STR_ESPI_ENABLE),
            help        = STRING_TOKEN (AMD_CBS_STR_ESPI_ENABLE_HELP),
            option text = STRING_TOKEN (AMD_CBS_STR_DISABLED),        value = 0,    flags = 0 | RESET_REQUIRED;
            option text = STRING_TOKEN (AMD_CBS_STR_ENABLED),         value = 1,    flags = 0 | RESET_REQUIRED;
            option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xf,  flags = DEFAULT | RESET_REQUIRED | MANUFACTURING;
          endoneof;
        endif;

      endform;
    #ifdef PROMONTORY_SUPPORT
    //
    // form - Promontory Common Options
    //
    form

      formid        = SETUP_PROMONTORY_COMMON_OPTIONS_LABLE,

      title         = STRING_TOKEN (AMD_CBS_STR_PROMONTORY_COMMON_OPTIONS_SECTION);

      subtitle text = STRING_TOKEN (AMD_CBS_STR_PROMONTORY_COMMON_OPTIONS_SECTION);
      subtitle text = STRING_TOKEN (AMD_CBS_STR_BLANK);

      suppressif SHOW_ALL_CBS==0;
        goto SETUP_PT_SATA_CONFIGURATION_OPTIONS_LABLE,
          prompt      = STRING_TOKEN (AMD_CBS_STR_PT_SATA_CONFIGURATION_OPTIONS_SECTION),
          help        = STRING_TOKEN (AMD_CBS_STR_PT_SATA_CONFIGURATION_OPTIONS_SECTION);
      endif;

      suppressif SHOW_ALL_CBS==0;
        goto SETUP_PT_USB_CONFIGURATION_OPTIONS_LABLE,
          prompt      = STRING_TOKEN (AMD_CBS_STR_PT_USB_CONFIGURATION_OPTIONS_SECTION),
          help        = STRING_TOKEN (AMD_CBS_STR_PT_USB_CONFIGURATION_OPTIONS_SECTION);
      endif;

      suppressif SHOW_ALL_CBS==0;
        goto SETUP_PROM4_USB_PORT_CONFIGURATION_OPTIONS_LABLE,
          prompt      = STRING_TOKEN (AMD_CBS_STR_PROM4_USB_PORT_CONFIGURATION_OPTIONS_SECTION),
          help        = STRING_TOKEN (AMD_CBS_STR_PROM4_USB_PORT_CONFIGURATION_OPTIONS_SECTION);
      endif;

      suppressif SHOW_ALL_CBS==0;
        goto SETUP_PROM2_USB_PORT_CONFIGURATION_OPTIONS_LABLE,
          prompt      = STRING_TOKEN (AMD_CBS_STR_PROM2_USB_PORT_CONFIGURATION_OPTIONS_SECTION),
          help        = STRING_TOKEN (AMD_CBS_STR_PROM2_USB_PORT_CONFIGURATION_OPTIONS_SECTION);
      endif;

      suppressif SHOW_ALL_CBS==0;
        goto SETUP_PROM1_USB_PORT_CONFIGURATION_OPTIONS_LABLE,
          prompt      = STRING_TOKEN (AMD_CBS_STR_PROM1_USB_PORT_CONFIGURATION_OPTIONS_SECTION),
          help        = STRING_TOKEN (AMD_CBS_STR_PROM1_USB_PORT_CONFIGURATION_OPTIONS_SECTION);
      endif;

    endform;
    #endif


      #ifdef PROMONTORY_SUPPORT
      //
      // form - PT SATA Configuration Options
      //
      form

        formid        = SETUP_PT_SATA_CONFIGURATION_OPTIONS_LABLE,

        title         = STRING_TOKEN (AMD_CBS_STR_PT_SATA_CONFIGURATION_OPTIONS_SECTION);

        subtitle text = STRING_TOKEN (AMD_CBS_STR_PT_SATA_CONFIGURATION_OPTIONS_SECTION);
        subtitle text = STRING_TOKEN (AMD_CBS_STR_BLANK);

        suppressif SHOW_ALL_CBS==0;
          // PT SATA Port Enable
          // No help string
          oneof
            varid       = CBS_CONFIG.CbsCmnPTSataPortEnable,
            prompt      = STRING_TOKEN (AMD_CBS_STR_PT_SATA_PORT_ENABLE),
            help        = STRING_TOKEN (AMD_CBS_STR_PT_SATA_PORT_ENABLE_HELP),
            option text = STRING_TOKEN (AMD_CBS_STR_DISABLED),        value = 0,    flags = 0 | RESET_REQUIRED;
            option text = STRING_TOKEN (AMD_CBS_STR_ENABLED),         value = 1,    flags = 0 | RESET_REQUIRED;
            option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xf,  flags = DEFAULT | RESET_REQUIRED | MANUFACTURING;
          endoneof;
        endif;

        // Display Condition: CbsCmnPTSataPortEnable=Enabled
        suppressif NOT ideqval CBS_CONFIG.CbsCmnPTSataPortEnable == 1 OR SHOW_ALL_CBS==0;
          // PT SATA Mode
          // Select Promontory SATA Type
          oneof
            varid       = CBS_CONFIG.CbsCmnPTSataClass,
            prompt      = STRING_TOKEN (AMD_CBS_STR_PT_SATA_MODE),
            help        = STRING_TOKEN (AMD_CBS_STR_PT_SATA_MODE_HELP),
            option text = STRING_TOKEN (AMD_CBS_STR_AHCI),            value = 0,    flags = 0 | RESET_REQUIRED;
            option text = STRING_TOKEN (AMD_CBS_STR_RAID),            value = 1,    flags = 0 | RESET_REQUIRED;
            option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xf,  flags = DEFAULT | RESET_REQUIRED | MANUFACTURING;
          endoneof;
        endif;

        suppressif SHOW_ALL_CBS==0;
          // PT Aggresive SATA Device Sleep Port 0
          // No help string
          oneof
            varid       = CBS_CONFIG.CbsDbgPTSataAggresiveDevSlpP0,
            prompt      = STRING_TOKEN (AMD_CBS_STR_PT_AGGRESIVE_SATA_DEVICE_SLEEP_PORT_0),
            help        = STRING_TOKEN (AMD_CBS_STR_PT_AGGRESIVE_SATA_DEVICE_SLEEP_PORT_0_HELP),
            option text = STRING_TOKEN (AMD_CBS_STR_DISABLE),         value = 0,    flags = 0 | RESET_REQUIRED;
            option text = STRING_TOKEN (AMD_CBS_STR_ENABLE),          value = 1,    flags = 0 | RESET_REQUIRED;
            option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xF,  flags = DEFAULT | RESET_REQUIRED | MANUFACTURING;
          endoneof;
        endif;

        suppressif SHOW_ALL_CBS==0;
          // PT Aggresive SATA Device Sleep Port 1
          // No help string
          oneof
            varid       = CBS_CONFIG.CbsDbgPTSataAggresiveDevSlpP1,
            prompt      = STRING_TOKEN (AMD_CBS_STR_PT_AGGRESIVE_SATA_DEVICE_SLEEP_PORT_1),
            help        = STRING_TOKEN (AMD_CBS_STR_PT_AGGRESIVE_SATA_DEVICE_SLEEP_PORT_1_HELP),
            option text = STRING_TOKEN (AMD_CBS_STR_DISABLE),         value = 0,    flags = 0 | RESET_REQUIRED;
            option text = STRING_TOKEN (AMD_CBS_STR_ENABLE),          value = 1,    flags = 0 | RESET_REQUIRED;
            option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xF,  flags = DEFAULT | RESET_REQUIRED | MANUFACTURING;
          endoneof;
        endif;

      endform;
      #endif


      #ifdef PROMONTORY_SUPPORT
      //
      // form - PT USB Configuration Options
      //
      form

        formid        = SETUP_PT_USB_CONFIGURATION_OPTIONS_LABLE,

        title         = STRING_TOKEN (AMD_CBS_STR_PT_USB_CONFIGURATION_OPTIONS_SECTION);

        subtitle text = STRING_TOKEN (AMD_CBS_STR_PT_USB_CONFIGURATION_OPTIONS_SECTION);
        subtitle text = STRING_TOKEN (AMD_CBS_STR_BLANK);

        suppressif SHOW_ALL_CBS==0;
          // PT XHCI GEN1
          // No help string
          oneof
            varid       = CBS_CONFIG.CbsDbgPTXhciGen1,
            prompt      = STRING_TOKEN (AMD_CBS_STR_PT_XHCI_GEN1),
            help        = STRING_TOKEN (AMD_CBS_STR_PT_XHCI_GEN1_HELP),
            option text = STRING_TOKEN (AMD_CBS_STR_DISABLE),         value = 0,    flags = 0 | RESET_REQUIRED;
            option text = STRING_TOKEN (AMD_CBS_STR_ENABLE),          value = 1,    flags = 0 | RESET_REQUIRED;
            option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xF,  flags = DEFAULT | RESET_REQUIRED | MANUFACTURING;
          endoneof;
        endif;

        suppressif SHOW_ALL_CBS==0;
          // PT XHCI GEN2
          // No help string
          oneof
            varid       = CBS_CONFIG.CbsDbgPTXhciGen2,
            prompt      = STRING_TOKEN (AMD_CBS_STR_PT_XHCI_GEN2),
            help        = STRING_TOKEN (AMD_CBS_STR_PT_XHCI_GEN2_HELP),
            option text = STRING_TOKEN (AMD_CBS_STR_DISABLE),         value = 0,    flags = 0 | RESET_REQUIRED;
            option text = STRING_TOKEN (AMD_CBS_STR_ENABLE),          value = 1,    flags = 0 | RESET_REQUIRED;
            option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xF,  flags = DEFAULT | RESET_REQUIRED | MANUFACTURING;
          endoneof;
        endif;

        suppressif SHOW_ALL_CBS==0;
          // PT USB Equalization4
          // No help string
          oneof
            varid       = CBS_CONFIG.CbsDbgPTUsbEqualization4,
            prompt      = STRING_TOKEN (AMD_CBS_STR_PT_USB_EQUALIZATION4),
            help        = STRING_TOKEN (AMD_CBS_STR_PT_USB_EQUALIZATION4_HELP),
            option text = STRING_TOKEN (AMD_CBS_STR_DISABLE),         value = 0,    flags = 0 | RESET_REQUIRED;
            option text = STRING_TOKEN (AMD_CBS_STR_ENABLE),          value = 1,    flags = 0 | RESET_REQUIRED;
            option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xF,  flags = DEFAULT | RESET_REQUIRED | MANUFACTURING;
          endoneof;
        endif;

        suppressif SHOW_ALL_CBS==0;
          // PT USB Redriver
          // No help string
          oneof
            varid       = CBS_CONFIG.CbsDbgPTUsbRedriver,
            prompt      = STRING_TOKEN (AMD_CBS_STR_PT_USB_REDRIVER),
            help        = STRING_TOKEN (AMD_CBS_STR_PT_USB_REDRIVER_HELP),
            option text = STRING_TOKEN (AMD_CBS_STR_DISABLE),         value = 0,    flags = 0 | RESET_REQUIRED;
            option text = STRING_TOKEN (AMD_CBS_STR_ENABLE),          value = 1,    flags = 0 | RESET_REQUIRED;
            option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xF,  flags = DEFAULT | RESET_REQUIRED | MANUFACTURING;
          endoneof;
        endif;

      endform;
      #endif


      #ifdef PROMONTORY_SUPPORT
      //
      // form - PROM4 USB Port Configuration Options
      //
      form

        formid        = SETUP_PROM4_USB_PORT_CONFIGURATION_OPTIONS_LABLE,

        title         = STRING_TOKEN (AMD_CBS_STR_PROM4_USB_PORT_CONFIGURATION_OPTIONS_SECTION);

        subtitle text = STRING_TOKEN (AMD_CBS_STR_PROM4_USB_PORT_CONFIGURATION_OPTIONS_SECTION);
        subtitle text = STRING_TOKEN (AMD_CBS_STR_BLANK);

        suppressif SHOW_ALL_CBS==0;
          // PT USB31 PORT0
          // No help string
          oneof
            varid       = CBS_CONFIG.CbsDbgPTUsb31P0,
            prompt      = STRING_TOKEN (AMD_CBS_STR_PT_USB31_PORT0),
            help        = STRING_TOKEN (AMD_CBS_STR_PT_USB31_PORT0_HELP),
            option text = STRING_TOKEN (AMD_CBS_STR_DISABLE),         value = 0,    flags = 0 | RESET_REQUIRED;
            option text = STRING_TOKEN (AMD_CBS_STR_ENABLE),          value = 1,    flags = 0 | RESET_REQUIRED;
            option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xF,  flags = DEFAULT | RESET_REQUIRED | MANUFACTURING;
          endoneof;
        endif;

        suppressif SHOW_ALL_CBS==0;
          // PT USB31 PORT1
          // No help string
          oneof
            varid       = CBS_CONFIG.CbsDbgPTUsb31P1,
            prompt      = STRING_TOKEN (AMD_CBS_STR_PT_USB31_PORT1),
            help        = STRING_TOKEN (AMD_CBS_STR_PT_USB31_PORT1_HELP),
            option text = STRING_TOKEN (AMD_CBS_STR_DISABLE),         value = 0,    flags = 0 | RESET_REQUIRED;
            option text = STRING_TOKEN (AMD_CBS_STR_ENABLE),          value = 1,    flags = 0 | RESET_REQUIRED;
            option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xF,  flags = DEFAULT | RESET_REQUIRED | MANUFACTURING;
          endoneof;
        endif;

        suppressif SHOW_ALL_CBS==0;
          // PT USB30 PORT0
          // No help string
          oneof
            varid       = CBS_CONFIG.CbsDbgPTUsb30P0,
            prompt      = STRING_TOKEN (AMD_CBS_STR_PT_USB30_PORT0),
            help        = STRING_TOKEN (AMD_CBS_STR_PT_USB30_PORT0_HELP),
            option text = STRING_TOKEN (AMD_CBS_STR_DISABLE),         value = 0,    flags = 0 | RESET_REQUIRED;
            option text = STRING_TOKEN (AMD_CBS_STR_ENABLE),          value = 1,    flags = 0 | RESET_REQUIRED;
            option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xF,  flags = DEFAULT | RESET_REQUIRED | MANUFACTURING;
          endoneof;
        endif;

        suppressif SHOW_ALL_CBS==0;
          // PT USB30 PORT1
          // No help string
          oneof
            varid       = CBS_CONFIG.CbsDbgPTUsb30P1,
            prompt      = STRING_TOKEN (AMD_CBS_STR_PT_USB30_PORT1),
            help        = STRING_TOKEN (AMD_CBS_STR_PT_USB30_PORT1_HELP),
            option text = STRING_TOKEN (AMD_CBS_STR_DISABLE),         value = 0,    flags = 0 | RESET_REQUIRED;
            option text = STRING_TOKEN (AMD_CBS_STR_ENABLE),          value = 1,    flags = 0 | RESET_REQUIRED;
            option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xF,  flags = DEFAULT | RESET_REQUIRED | MANUFACTURING;
          endoneof;
        endif;

        suppressif SHOW_ALL_CBS==0;
          // PT USB30 PORT2
          // No help string
          oneof
            varid       = CBS_CONFIG.CbsDbgPTUsb30P2,
            prompt      = STRING_TOKEN (AMD_CBS_STR_PT_USB30_PORT2),
            help        = STRING_TOKEN (AMD_CBS_STR_PT_USB30_PORT2_HELP),
            option text = STRING_TOKEN (AMD_CBS_STR_DISABLE),         value = 0,    flags = 0 | RESET_REQUIRED;
            option text = STRING_TOKEN (AMD_CBS_STR_ENABLE),          value = 1,    flags = 0 | RESET_REQUIRED;
            option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xF,  flags = DEFAULT | RESET_REQUIRED | MANUFACTURING;
          endoneof;
        endif;

        suppressif SHOW_ALL_CBS==0;
          // PT USB30 PORT3
          // No help string
          oneof
            varid       = CBS_CONFIG.CbsDbgPTUsb30P3,
            prompt      = STRING_TOKEN (AMD_CBS_STR_PT_USB30_PORT3),
            help        = STRING_TOKEN (AMD_CBS_STR_PT_USB30_PORT3_HELP),
            option text = STRING_TOKEN (AMD_CBS_STR_DISABLE),         value = 0,    flags = 0 | RESET_REQUIRED;
            option text = STRING_TOKEN (AMD_CBS_STR_ENABLE),          value = 1,    flags = 0 | RESET_REQUIRED;
            option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xF,  flags = DEFAULT | RESET_REQUIRED | MANUFACTURING;
          endoneof;
        endif;

        suppressif SHOW_ALL_CBS==0;
          // PT USB30 PORT4
          // No help string
          oneof
            varid       = CBS_CONFIG.CbsDbgPTUsb30P4,
            prompt      = STRING_TOKEN (AMD_CBS_STR_PT_USB30_PORT4),
            help        = STRING_TOKEN (AMD_CBS_STR_PT_USB30_PORT4_HELP),
            option text = STRING_TOKEN (AMD_CBS_STR_DISABLE),         value = 0,    flags = 0 | RESET_REQUIRED;
            option text = STRING_TOKEN (AMD_CBS_STR_ENABLE),          value = 1,    flags = 0 | RESET_REQUIRED;
            option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xF,  flags = DEFAULT | RESET_REQUIRED | MANUFACTURING;
          endoneof;
        endif;

        suppressif SHOW_ALL_CBS==0;
          // PT USB30 PORT5
          // No help string
          oneof
            varid       = CBS_CONFIG.CbsDbgPTUsb30P5,
            prompt      = STRING_TOKEN (AMD_CBS_STR_PT_USB30_PORT5),
            help        = STRING_TOKEN (AMD_CBS_STR_PT_USB30_PORT5_HELP),
            option text = STRING_TOKEN (AMD_CBS_STR_DISABLE),         value = 0,    flags = 0 | RESET_REQUIRED;
            option text = STRING_TOKEN (AMD_CBS_STR_ENABLE),          value = 1,    flags = 0 | RESET_REQUIRED;
            option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xF,  flags = DEFAULT | RESET_REQUIRED | MANUFACTURING;
          endoneof;
        endif;

        suppressif SHOW_ALL_CBS==0;
          // PT USB20 PORT0
          // No help string
          oneof
            varid       = CBS_CONFIG.CbsDbgPTUsb20P0,
            prompt      = STRING_TOKEN (AMD_CBS_STR_PT_USB20_PORT0),
            help        = STRING_TOKEN (AMD_CBS_STR_PT_USB20_PORT0_HELP),
            option text = STRING_TOKEN (AMD_CBS_STR_DISABLE),         value = 0,    flags = 0 | RESET_REQUIRED;
            option text = STRING_TOKEN (AMD_CBS_STR_ENABLE),          value = 1,    flags = 0 | RESET_REQUIRED;
            option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xF,  flags = DEFAULT | RESET_REQUIRED | MANUFACTURING;
          endoneof;
        endif;

        suppressif SHOW_ALL_CBS==0;
          // PT USB20 PORT1
          // No help string
          oneof
            varid       = CBS_CONFIG.CbsDbgPTUsb20P1,
            prompt      = STRING_TOKEN (AMD_CBS_STR_PT_USB20_PORT1),
            help        = STRING_TOKEN (AMD_CBS_STR_PT_USB20_PORT1_HELP),
            option text = STRING_TOKEN (AMD_CBS_STR_DISABLE),         value = 0,    flags = 0 | RESET_REQUIRED;
            option text = STRING_TOKEN (AMD_CBS_STR_ENABLE),          value = 1,    flags = 0 | RESET_REQUIRED;
            option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xF,  flags = DEFAULT | RESET_REQUIRED | MANUFACTURING;
          endoneof;
        endif;

        suppressif SHOW_ALL_CBS==0;
          // PT USB20 PORT2
          // No help string
          oneof
            varid       = CBS_CONFIG.CbsDbgPTUsb20P2,
            prompt      = STRING_TOKEN (AMD_CBS_STR_PT_USB20_PORT2),
            help        = STRING_TOKEN (AMD_CBS_STR_PT_USB20_PORT2_HELP),
            option text = STRING_TOKEN (AMD_CBS_STR_DISABLE),         value = 0,    flags = 0 | RESET_REQUIRED;
            option text = STRING_TOKEN (AMD_CBS_STR_ENABLE),          value = 1,    flags = 0 | RESET_REQUIRED;
            option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xF,  flags = DEFAULT | RESET_REQUIRED | MANUFACTURING;
          endoneof;
        endif;

        suppressif SHOW_ALL_CBS==0;
          // PT USB20 PORT3
          // No help string
          oneof
            varid       = CBS_CONFIG.CbsDbgPTUsb20P3,
            prompt      = STRING_TOKEN (AMD_CBS_STR_PT_USB20_PORT3),
            help        = STRING_TOKEN (AMD_CBS_STR_PT_USB20_PORT3_HELP),
            option text = STRING_TOKEN (AMD_CBS_STR_DISABLE),         value = 0,    flags = 0 | RESET_REQUIRED;
            option text = STRING_TOKEN (AMD_CBS_STR_ENABLE),          value = 1,    flags = 0 | RESET_REQUIRED;
            option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xF,  flags = DEFAULT | RESET_REQUIRED | MANUFACTURING;
          endoneof;
        endif;

        suppressif SHOW_ALL_CBS==0;
          // PT USB20 PORT4
          // No help string
          oneof
            varid       = CBS_CONFIG.CbsDbgPTUsb20P4,
            prompt      = STRING_TOKEN (AMD_CBS_STR_PT_USB20_PORT4),
            help        = STRING_TOKEN (AMD_CBS_STR_PT_USB20_PORT4_HELP),
            option text = STRING_TOKEN (AMD_CBS_STR_DISABLE),         value = 0,    flags = 0 | RESET_REQUIRED;
            option text = STRING_TOKEN (AMD_CBS_STR_ENABLE),          value = 1,    flags = 0 | RESET_REQUIRED;
            option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xF,  flags = DEFAULT | RESET_REQUIRED | MANUFACTURING;
          endoneof;
        endif;

        suppressif SHOW_ALL_CBS==0;
          // PT USB20 PORT5
          // No help string
          oneof
            varid       = CBS_CONFIG.CbsDbgPTUsb20P5,
            prompt      = STRING_TOKEN (AMD_CBS_STR_PT_USB20_PORT5),
            help        = STRING_TOKEN (AMD_CBS_STR_PT_USB20_PORT5_HELP),
            option text = STRING_TOKEN (AMD_CBS_STR_DISABLE),         value = 0,    flags = 0 | RESET_REQUIRED;
            option text = STRING_TOKEN (AMD_CBS_STR_ENABLE),          value = 1,    flags = 0 | RESET_REQUIRED;
            option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xF,  flags = DEFAULT | RESET_REQUIRED | MANUFACTURING;
          endoneof;
        endif;

      endform;
      #endif


      #ifdef PROMONTORY_SUPPORT
      //
      // form - PROM2 USB Port Configuration Options
      //
      form

        formid        = SETUP_PROM2_USB_PORT_CONFIGURATION_OPTIONS_LABLE,

        title         = STRING_TOKEN (AMD_CBS_STR_PROM2_USB_PORT_CONFIGURATION_OPTIONS_SECTION);

        subtitle text = STRING_TOKEN (AMD_CBS_STR_PROM2_USB_PORT_CONFIGURATION_OPTIONS_SECTION);
        subtitle text = STRING_TOKEN (AMD_CBS_STR_BLANK);

        suppressif SHOW_ALL_CBS==0;
          // PT USB31 PORT0
          // No help string
          oneof
            varid       = CBS_CONFIG.CbsDbgPTProm2Usb31P0,
            prompt      = STRING_TOKEN (AMD_CBS_STR_PT_USB31_PORT0),
            help        = STRING_TOKEN (AMD_CBS_STR_PT_USB31_PORT0_HELP),
            option text = STRING_TOKEN (AMD_CBS_STR_DISABLE),         value = 0,    flags = 0 | RESET_REQUIRED;
            option text = STRING_TOKEN (AMD_CBS_STR_ENABLE),          value = 1,    flags = 0 | RESET_REQUIRED;
            option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xF,  flags = DEFAULT | RESET_REQUIRED | MANUFACTURING;
          endoneof;
        endif;

        suppressif SHOW_ALL_CBS==0;
          // PT USB31 PORT1
          // No help string
          oneof
            varid       = CBS_CONFIG.CbsDbgPTProm2Usb31P1,
            prompt      = STRING_TOKEN (AMD_CBS_STR_PT_USB31_PORT1),
            help        = STRING_TOKEN (AMD_CBS_STR_PT_USB31_PORT1_HELP),
            option text = STRING_TOKEN (AMD_CBS_STR_DISABLE),         value = 0,    flags = 0 | RESET_REQUIRED;
            option text = STRING_TOKEN (AMD_CBS_STR_ENABLE),          value = 1,    flags = 0 | RESET_REQUIRED;
            option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xF,  flags = DEFAULT | RESET_REQUIRED | MANUFACTURING;
          endoneof;
        endif;

        suppressif SHOW_ALL_CBS==0;
          // PT USB30 PORT0
          // No help string
          oneof
            varid       = CBS_CONFIG.CbsDbgPTProm2Usb30P0,
            prompt      = STRING_TOKEN (AMD_CBS_STR_PT_USB30_PORT0),
            help        = STRING_TOKEN (AMD_CBS_STR_PT_USB30_PORT0_HELP),
            option text = STRING_TOKEN (AMD_CBS_STR_DISABLE),         value = 0,    flags = 0 | RESET_REQUIRED;
            option text = STRING_TOKEN (AMD_CBS_STR_ENABLE),          value = 1,    flags = 0 | RESET_REQUIRED;
            option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xF,  flags = DEFAULT | RESET_REQUIRED | MANUFACTURING;
          endoneof;
        endif;

        suppressif SHOW_ALL_CBS==0;
          // PT USB30 PORT1
          // No help string
          oneof
            varid       = CBS_CONFIG.CbsDbgPTProm2Usb30P1,
            prompt      = STRING_TOKEN (AMD_CBS_STR_PT_USB30_PORT1),
            help        = STRING_TOKEN (AMD_CBS_STR_PT_USB30_PORT1_HELP),
            option text = STRING_TOKEN (AMD_CBS_STR_DISABLE),         value = 0,    flags = 0 | RESET_REQUIRED;
            option text = STRING_TOKEN (AMD_CBS_STR_ENABLE),          value = 1,    flags = 0 | RESET_REQUIRED;
            option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xF,  flags = DEFAULT | RESET_REQUIRED | MANUFACTURING;
          endoneof;
        endif;

        suppressif SHOW_ALL_CBS==0;
          // PT USB20 PORT0
          // No help string
          oneof
            varid       = CBS_CONFIG.CbsDbgPTProm2Usb20P0,
            prompt      = STRING_TOKEN (AMD_CBS_STR_PT_USB20_PORT0),
            help        = STRING_TOKEN (AMD_CBS_STR_PT_USB20_PORT0_HELP),
            option text = STRING_TOKEN (AMD_CBS_STR_DISABLE),         value = 0,    flags = 0 | RESET_REQUIRED;
            option text = STRING_TOKEN (AMD_CBS_STR_ENABLE),          value = 1,    flags = 0 | RESET_REQUIRED;
            option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xF,  flags = DEFAULT | RESET_REQUIRED | MANUFACTURING;
          endoneof;
        endif;

        suppressif SHOW_ALL_CBS==0;
          // PT USB20 PORT1
          // No help string
          oneof
            varid       = CBS_CONFIG.CbsDbgPTProm2Usb20P1,
            prompt      = STRING_TOKEN (AMD_CBS_STR_PT_USB20_PORT1),
            help        = STRING_TOKEN (AMD_CBS_STR_PT_USB20_PORT1_HELP),
            option text = STRING_TOKEN (AMD_CBS_STR_DISABLE),         value = 0,    flags = 0 | RESET_REQUIRED;
            option text = STRING_TOKEN (AMD_CBS_STR_ENABLE),          value = 1,    flags = 0 | RESET_REQUIRED;
            option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xF,  flags = DEFAULT | RESET_REQUIRED | MANUFACTURING;
          endoneof;
        endif;

        suppressif SHOW_ALL_CBS==0;
          // PT USB20 PORT2
          // No help string
          oneof
            varid       = CBS_CONFIG.CbsDbgPTProm2Usb20P2,
            prompt      = STRING_TOKEN (AMD_CBS_STR_PT_USB20_PORT2),
            help        = STRING_TOKEN (AMD_CBS_STR_PT_USB20_PORT2_HELP),
            option text = STRING_TOKEN (AMD_CBS_STR_DISABLE),         value = 0,    flags = 0 | RESET_REQUIRED;
            option text = STRING_TOKEN (AMD_CBS_STR_ENABLE),          value = 1,    flags = 0 | RESET_REQUIRED;
            option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xF,  flags = DEFAULT | RESET_REQUIRED | MANUFACTURING;
          endoneof;
        endif;

        suppressif SHOW_ALL_CBS==0;
          // PT USB20 PORT3
          // No help string
          oneof
            varid       = CBS_CONFIG.CbsDbgPTProm2Usb20P3,
            prompt      = STRING_TOKEN (AMD_CBS_STR_PT_USB20_PORT3),
            help        = STRING_TOKEN (AMD_CBS_STR_PT_USB20_PORT3_HELP),
            option text = STRING_TOKEN (AMD_CBS_STR_DISABLE),         value = 0,    flags = 0 | RESET_REQUIRED;
            option text = STRING_TOKEN (AMD_CBS_STR_ENABLE),          value = 1,    flags = 0 | RESET_REQUIRED;
            option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xF,  flags = DEFAULT | RESET_REQUIRED | MANUFACTURING;
          endoneof;
        endif;

        suppressif SHOW_ALL_CBS==0;
          // PT USB20 PORT4
          // No help string
          oneof
            varid       = CBS_CONFIG.CbsDbgPTProm2Usb20P4,
            prompt      = STRING_TOKEN (AMD_CBS_STR_PT_USB20_PORT4),
            help        = STRING_TOKEN (AMD_CBS_STR_PT_USB20_PORT4_HELP),
            option text = STRING_TOKEN (AMD_CBS_STR_DISABLE),         value = 0,    flags = 0 | RESET_REQUIRED;
            option text = STRING_TOKEN (AMD_CBS_STR_ENABLE),          value = 1,    flags = 0 | RESET_REQUIRED;
            option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xF,  flags = DEFAULT | RESET_REQUIRED | MANUFACTURING;
          endoneof;
        endif;

        suppressif SHOW_ALL_CBS==0;
          // PT USB20 PORT5
          // No help string
          oneof
            varid       = CBS_CONFIG.CbsDbgPTProm2Usb20P5,
            prompt      = STRING_TOKEN (AMD_CBS_STR_PT_USB20_PORT5),
            help        = STRING_TOKEN (AMD_CBS_STR_PT_USB20_PORT5_HELP),
            option text = STRING_TOKEN (AMD_CBS_STR_DISABLE),         value = 0,    flags = 0 | RESET_REQUIRED;
            option text = STRING_TOKEN (AMD_CBS_STR_ENABLE),          value = 1,    flags = 0 | RESET_REQUIRED;
            option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xF,  flags = DEFAULT | RESET_REQUIRED | MANUFACTURING;
          endoneof;
        endif;

      endform;
      #endif


      #ifdef PROMONTORY_SUPPORT
      //
      // form - PROM1 USB Port Configuration Options
      //
      form

        formid        = SETUP_PROM1_USB_PORT_CONFIGURATION_OPTIONS_LABLE,

        title         = STRING_TOKEN (AMD_CBS_STR_PROM1_USB_PORT_CONFIGURATION_OPTIONS_SECTION);

        subtitle text = STRING_TOKEN (AMD_CBS_STR_PROM1_USB_PORT_CONFIGURATION_OPTIONS_SECTION);
        subtitle text = STRING_TOKEN (AMD_CBS_STR_BLANK);

        suppressif SHOW_ALL_CBS==0;
          // PT USB31 PORT0
          // No help string
          oneof
            varid       = CBS_CONFIG.CbsDbgPTProm1Usb31P0,
            prompt      = STRING_TOKEN (AMD_CBS_STR_PT_USB31_PORT0),
            help        = STRING_TOKEN (AMD_CBS_STR_PT_USB31_PORT0_HELP),
            option text = STRING_TOKEN (AMD_CBS_STR_DISABLE),         value = 0,    flags = 0 | RESET_REQUIRED;
            option text = STRING_TOKEN (AMD_CBS_STR_ENABLE),          value = 1,    flags = 0 | RESET_REQUIRED;
            option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xF,  flags = DEFAULT | RESET_REQUIRED | MANUFACTURING;
          endoneof;
        endif;

        suppressif SHOW_ALL_CBS==0;
          // PT USB31 PORT1
          // No help string
          oneof
            varid       = CBS_CONFIG.CbsDbgPTProm1Usb31P1,
            prompt      = STRING_TOKEN (AMD_CBS_STR_PT_USB31_PORT1),
            help        = STRING_TOKEN (AMD_CBS_STR_PT_USB31_PORT1_HELP),
            option text = STRING_TOKEN (AMD_CBS_STR_DISABLE),         value = 0,    flags = 0 | RESET_REQUIRED;
            option text = STRING_TOKEN (AMD_CBS_STR_ENABLE),          value = 1,    flags = 0 | RESET_REQUIRED;
            option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xF,  flags = DEFAULT | RESET_REQUIRED | MANUFACTURING;
          endoneof;
        endif;

        suppressif SHOW_ALL_CBS==0;
          // PT USB30 PORT0
          // No help string
          oneof
            varid       = CBS_CONFIG.CbsDbgPTProm1Usb30P0,
            prompt      = STRING_TOKEN (AMD_CBS_STR_PT_USB30_PORT0),
            help        = STRING_TOKEN (AMD_CBS_STR_PT_USB30_PORT0_HELP),
            option text = STRING_TOKEN (AMD_CBS_STR_DISABLE),         value = 0,    flags = 0 | RESET_REQUIRED;
            option text = STRING_TOKEN (AMD_CBS_STR_ENABLE),          value = 1,    flags = 0 | RESET_REQUIRED;
            option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xF,  flags = DEFAULT | RESET_REQUIRED | MANUFACTURING;
          endoneof;
        endif;

        suppressif SHOW_ALL_CBS==0;
          // PT USB20 PORT0
          // No help string
          oneof
            varid       = CBS_CONFIG.CbsDbgPTProm1Usb20P0,
            prompt      = STRING_TOKEN (AMD_CBS_STR_PT_USB20_PORT0),
            help        = STRING_TOKEN (AMD_CBS_STR_PT_USB20_PORT0_HELP),
            option text = STRING_TOKEN (AMD_CBS_STR_DISABLE),         value = 0,    flags = 0 | RESET_REQUIRED;
            option text = STRING_TOKEN (AMD_CBS_STR_ENABLE),          value = 1,    flags = 0 | RESET_REQUIRED;
            option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xF,  flags = DEFAULT | RESET_REQUIRED | MANUFACTURING;
          endoneof;
        endif;

        suppressif SHOW_ALL_CBS==0;
          // PT USB20 PORT1
          // No help string
          oneof
            varid       = CBS_CONFIG.CbsDbgPTProm1Usb20P1,
            prompt      = STRING_TOKEN (AMD_CBS_STR_PT_USB20_PORT1),
            help        = STRING_TOKEN (AMD_CBS_STR_PT_USB20_PORT1_HELP),
            option text = STRING_TOKEN (AMD_CBS_STR_DISABLE),         value = 0,    flags = 0 | RESET_REQUIRED;
            option text = STRING_TOKEN (AMD_CBS_STR_ENABLE),          value = 1,    flags = 0 | RESET_REQUIRED;
            option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xF,  flags = DEFAULT | RESET_REQUIRED | MANUFACTURING;
          endoneof;
        endif;

        suppressif SHOW_ALL_CBS==0;
          // PT USB20 PORT2
          // No help string
          oneof
            varid       = CBS_CONFIG.CbsDbgPTProm1Usb20P2,
            prompt      = STRING_TOKEN (AMD_CBS_STR_PT_USB20_PORT2),
            help        = STRING_TOKEN (AMD_CBS_STR_PT_USB20_PORT2_HELP),
            option text = STRING_TOKEN (AMD_CBS_STR_DISABLE),         value = 0,    flags = 0 | RESET_REQUIRED;
            option text = STRING_TOKEN (AMD_CBS_STR_ENABLE),          value = 1,    flags = 0 | RESET_REQUIRED;
            option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xF,  flags = DEFAULT | RESET_REQUIRED | MANUFACTURING;
          endoneof;
        endif;

        suppressif SHOW_ALL_CBS==0;
          // PT USB20 PORT3
          // No help string
          oneof
            varid       = CBS_CONFIG.CbsDbgPTProm1Usb20P3,
            prompt      = STRING_TOKEN (AMD_CBS_STR_PT_USB20_PORT3),
            help        = STRING_TOKEN (AMD_CBS_STR_PT_USB20_PORT3_HELP),
            option text = STRING_TOKEN (AMD_CBS_STR_DISABLE),         value = 0,    flags = 0 | RESET_REQUIRED;
            option text = STRING_TOKEN (AMD_CBS_STR_ENABLE),          value = 1,    flags = 0 | RESET_REQUIRED;
            option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xF,  flags = DEFAULT | RESET_REQUIRED | MANUFACTURING;
          endoneof;
        endif;

        suppressif SHOW_ALL_CBS==0;
          // PT USB20 PORT4
          // No help string
          oneof
            varid       = CBS_CONFIG.CbsDbgPTProm1Usb20P4,
            prompt      = STRING_TOKEN (AMD_CBS_STR_PT_USB20_PORT4),
            help        = STRING_TOKEN (AMD_CBS_STR_PT_USB20_PORT4_HELP),
            option text = STRING_TOKEN (AMD_CBS_STR_DISABLE),         value = 0,    flags = 0 | RESET_REQUIRED;
            option text = STRING_TOKEN (AMD_CBS_STR_ENABLE),          value = 1,    flags = 0 | RESET_REQUIRED;
            option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xF,  flags = DEFAULT | RESET_REQUIRED | MANUFACTURING;
          endoneof;
        endif;

        suppressif SHOW_ALL_CBS==0;
          // PT USB20 PORT5
          // No help string
          oneof
            varid       = CBS_CONFIG.CbsDbgPTProm1Usb20P5,
            prompt      = STRING_TOKEN (AMD_CBS_STR_PT_USB20_PORT5),
            help        = STRING_TOKEN (AMD_CBS_STR_PT_USB20_PORT5_HELP),
            option text = STRING_TOKEN (AMD_CBS_STR_DISABLE),         value = 0,    flags = 0 | RESET_REQUIRED;
            option text = STRING_TOKEN (AMD_CBS_STR_ENABLE),          value = 1,    flags = 0 | RESET_REQUIRED;
            option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xF,  flags = DEFAULT | RESET_REQUIRED | MANUFACTURING;
          endoneof;
        endif;

      endform;
      #endif


    //
    // form - NTB Common Options
    //
    form

      formid        = SETUP_NTB_COMMON_OPTIONS_LABLE,

      title         = STRING_TOKEN (AMD_CBS_STR_NTB_COMMON_OPTIONS_SECTION);

      subtitle text = STRING_TOKEN (AMD_CBS_STR_NTB_COMMON_OPTIONS_SECTION);
      subtitle text = STRING_TOKEN (AMD_CBS_STR_BLANK);

      suppressif SHOW_ALL_CBS==0;
        // NTB Enable
        // Enable NTB
        oneof
          varid       = CBS_CONFIG.CbsDbgSP3NtbEnable,
          prompt      = STRING_TOKEN (AMD_CBS_STR_NTB_ENABLE),
          help        = STRING_TOKEN (AMD_CBS_STR_NTB_ENABLE_HELP),
          option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0,    flags = DEFAULT | RESET_REQUIRED | MANUFACTURING;
          option text = STRING_TOKEN (AMD_CBS_STR_ENABLE),          value = 1,    flags = 0 | RESET_REQUIRED;
        endoneof;
      endif;

      // Display Condition: CbsDbgSP3NtbEnable=Enable
      suppressif NOT ideqval CBS_CONFIG.CbsDbgSP3NtbEnable == 1 OR SHOW_ALL_CBS==0;
        // NTB Location
        // No help string
        oneof
          varid       = CBS_CONFIG.CbsDbgSP3NtbLocation,
          prompt      = STRING_TOKEN (AMD_CBS_STR_NTB_LOCATION),
          help        = STRING_TOKEN (AMD_CBS_STR_NTB_LOCATION_HELP),
          option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xFF, flags = DEFAULT | RESET_REQUIRED | MANUFACTURING;
          option text = STRING_TOKEN (AMD_CBS_STR_SOCKET0_DIE0),    value = 0,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_SOCKET0_DIE1),    value = 1,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_SOCKET0_DIE2),    value = 2,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_SOCKET0_DIE3),    value = 3,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_SOCKET1_DIE0),    value = 4,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_SOCKET1_DIE1),    value = 5,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_SOCKET1_DIE2),    value = 6,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_SOCKET1_DIE3),    value = 7,    flags = 0 | RESET_REQUIRED;
        endoneof;
      endif;

      // Display Condition: CbsDbgSP3NtbEnable=Enable
      suppressif NOT ideqval CBS_CONFIG.CbsDbgSP3NtbEnable == 1 OR SHOW_ALL_CBS==0;
        // NTB active on PCIeCore
        // NTB enable on PCIe Core
        oneof
          varid       = CBS_CONFIG.CbsDbgSP3NtbPCIeCore,
          prompt      = STRING_TOKEN (AMD_CBS_STR_NTB_ACTIVE_ON_PCIECORE),
          help        = STRING_TOKEN (AMD_CBS_STR_NTB_ACTIVE_ON_PCIECORE_HELP),
          option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xf,  flags = DEFAULT | RESET_REQUIRED | MANUFACTURING;
          option text = STRING_TOKEN (AMD_CBS_STR_CORE0),           value = 0,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_CORE1),           value = 16,   flags = 0 | RESET_REQUIRED;
        endoneof;
      endif;

      // Display Condition: CbsDbgSP3NtbEnable=Enable
      suppressif NOT ideqval CBS_CONFIG.CbsDbgSP3NtbEnable == 1 OR SHOW_ALL_CBS==0;
        // NTB Mode
        // Select NTB Mode (Core 0, Port 0)
        oneof
          varid       = CBS_CONFIG.CbsDbgSP3NtbMode,
          prompt      = STRING_TOKEN (AMD_CBS_STR_NTB_MODE),
          help        = STRING_TOKEN (AMD_CBS_STR_NTB_MODE_HELP),
          option text = STRING_TOKEN (AMD_CBS_STR_NTB_DISABLED),    value = 0,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_NTB_PRIMARY),     value = 1,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_NTB_SECONDARY),   value = 2,    flags = 0 | RESET_REQUIRED;
          suppressif TRUE;
          option text = STRING_TOKEN (AMD_CBS_STR_NTB_RANDOM),      value = 3,    flags = 0 | RESET_REQUIRED;
          endif;
          option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xf,  flags = DEFAULT | RESET_REQUIRED | MANUFACTURING;
        endoneof;
      endif;

      // Display Condition: CbsDbgSP3NtbEnable=Enable
      suppressif NOT ideqval CBS_CONFIG.CbsDbgSP3NtbEnable == 1 OR SHOW_ALL_CBS==0;
        //   Link Speed
        // Select Link Speed for NTB Mode (Core 0, Port 0)
        oneof
          varid       = CBS_CONFIG.CbsDbgSP3NtbLinkSpeed,
          prompt      = STRING_TOKEN (AMD_CBS_STR_LINK_SPEED),
          help        = STRING_TOKEN (AMD_CBS_STR_LINK_SPEED_HELP),
          option text = STRING_TOKEN (AMD_CBS_STR_MAX_SPEED),       value = 0,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_GEN_1),           value = 1,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_GEN_2),           value = 2,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_GEN_3),           value = 3,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xf,  flags = DEFAULT | RESET_REQUIRED | MANUFACTURING;
        endoneof;
      endif;

      // Display Condition: CbsDbgSP3NtbEnable=Enable
      suppressif NOT ideqval CBS_CONFIG.CbsDbgSP3NtbEnable == 1 OR SHOW_ALL_CBS==0;
        oneof
          varid       = CBS_CONFIG.CbsDbgSP3NtbBAR1Window,
          prompt      = STRING_TOKEN (AMD_CBS_STR_BAR1WINDOW_SIZE),
          help        = STRING_TOKEN (AMD_CBS_STR_BAR1WINDOW_SIZE_HELP),
          option text = STRING_TOKEN (AMD_CBS_STR_1MB),             value = 0,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_2MB),             value = 1,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_4MB),             value = 2,    flags = DEFAULT | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_8MB),             value = 3,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_16MB),            value = 4,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_32MB),            value = 5,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_64MB),            value = 6,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_128MB),           value = 7,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_256MB),           value = 8,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_512MB),           value = 9,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_1GB),             value = 0xa,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_2GB),             value = 0xb,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_4GB),             value = 0xc,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_8GB),             value = 0xd,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_16GB),            value = 0xe,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_32GB),            value = 0xf,    flags = 0 | RESET_REQUIRED; 
          option text = STRING_TOKEN (AMD_CBS_STR_64GB),            value = 0x10,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_128GB),           value = 0x11,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_256GB),           value = 0x12,    flags = 0 | RESET_REQUIRED;  
          option text = STRING_TOKEN (AMD_CBS_STR_512GB),           value = 0x13,    flags = 0 | RESET_REQUIRED;                         
          option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xff,  flags = 0 | RESET_REQUIRED | MANUFACTURING;
        endoneof;
      endif;
      
      // Display Condition: CbsDbgSP3NtbEnable=Enable
      suppressif NOT ideqval CBS_CONFIG.CbsDbgSP3NtbEnable == 1 OR SHOW_ALL_CBS==0;
        oneof
          varid       = CBS_CONFIG.CbsDbgSP3NtbBAR23Window,
          prompt      = STRING_TOKEN (AMD_CBS_STR_BAR23WINDOW_SIZE),
          help        = STRING_TOKEN (AMD_CBS_STR_BAR23WINDOW_SIZE_HELP),
          option text = STRING_TOKEN (AMD_CBS_STR_1MB),             value = 0,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_2MB),             value = 1,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_4MB),             value = 2,    flags = DEFAULT | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_8MB),             value = 3,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_16MB),            value = 4,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_32MB),            value = 5,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_64MB),            value = 6,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_128MB),           value = 7,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_256MB),           value = 8,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_512MB),           value = 9,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_1GB),             value = 0xa,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_2GB),             value = 0xb,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_4GB),             value = 0xc,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_8GB),             value = 0xd,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_16GB),            value = 0xe,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_32GB),            value = 0xf,    flags = 0 | RESET_REQUIRED; 
          option text = STRING_TOKEN (AMD_CBS_STR_64GB),            value = 0x10,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_128GB),           value = 0x11,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_256GB),           value = 0x12,    flags = 0 | RESET_REQUIRED ; 
          option text = STRING_TOKEN (AMD_CBS_STR_512GB),           value = 0x13,    flags = 0 | RESET_REQUIRED ;                        
          option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xff,  flags = 0 | RESET_REQUIRED | MANUFACTURING;
        endoneof;
      endif;

       // Display Condition: CbsDbgSP3NtbEnable=Enable
      suppressif NOT ideqval CBS_CONFIG.CbsDbgSP3NtbEnable == 1 OR SHOW_ALL_CBS==0;
        oneof
          varid       = CBS_CONFIG.CbsDbgSP3NtbBAR45Window,
          prompt      = STRING_TOKEN (AMD_CBS_STR_BAR45WINDOW_SIZE),
          help        = STRING_TOKEN (AMD_CBS_STR_BAR45WINDOW_SIZE_HELP),
          option text = STRING_TOKEN (AMD_CBS_STR_1MB),             value = 0,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_2MB),             value = 1,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_4MB),             value = 2,    flags = DEFAULT | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_8MB),             value = 3,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_16MB),            value = 4,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_32MB),            value = 5,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_64MB),            value = 6,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_128MB),           value = 7,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_256MB),           value = 8,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_512MB),           value = 9,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_1GB),             value = 0xa,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_2GB),             value = 0xb,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_4GB),             value = 0xc,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_8GB),             value = 0xd,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_16GB),            value = 0xe,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_32GB),            value = 0xf,    flags = 0 | RESET_REQUIRED; 
          option text = STRING_TOKEN (AMD_CBS_STR_64GB),            value = 0x10,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_128GB),           value = 0x11,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_256GB),           value = 0x12,    flags = 0 | RESET_REQUIRED;  
          option text = STRING_TOKEN (AMD_CBS_STR_512GB),           value = 0x13,    flags = 0 | RESET_REQUIRED;                         
          option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xff,  flags = 0 | RESET_REQUIRED | MANUFACTURING;
        endoneof;
      endif;  
         
    endform;
endformset;