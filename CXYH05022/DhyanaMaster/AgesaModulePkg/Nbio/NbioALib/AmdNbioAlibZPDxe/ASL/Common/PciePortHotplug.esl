/**
 * @file
 *
 * ALIB ASL library
 *
 *
 *
 * @xrefitem bom "File Content Label" "Release Content"
 * @e project:     AGESA
 * @e sub-project: NBIO
 * @e \$Revision: 61089 $   @e \$Date: 2011-10-31 10:31:02 -0700 (Mon, 31 Oct 2011) $
 *
 */
/*
*****************************************************************************
*
* 
* Copyright 2016 - 2019 CHENGDU HAIGUANG IC DESIGN CO., LTD. All Rights Reserved.
* 
* HYGON is granting you permission to use this software (the Materials)
* pursuant to the terms and conditions of your Software License Agreement
* with HYGON.  This header does *NOT* give you permission to use the Materials
* or any rights under HYGON's intellectual property.  Your use of any portion
* of these Materials shall constitute your acceptance of those terms and
* conditions.  If you do not agree to the terms and conditions of the Software
* License Agreement, please do not use any portion of these Materials.
* 
* CONFIDENTIALITY:  The Materials and all other information, identified as
* confidential and provided to you by HYGON shall be kept confidential in
* accordance with the terms and conditions of the Software License Agreement.
* 
* LIMITATION OF LIABILITY: THE MATERIALS AND ANY OTHER RELATED INFORMATION
* PROVIDED TO YOU BY HYGON ARE PROVIDED "AS IS" WITHOUT ANY EXPRESS OR IMPLIED
* WARRANTY OF ANY KIND, INCLUDING BUT NOT LIMITED TO WARRANTIES OF
* MERCHANTABILITY, NONINFRINGEMENT, TITLE, FITNESS FOR ANY PARTICULAR PURPOSE,
* OR WARRANTIES ARISING FROM CONDUCT, COURSE OF DEALING, OR USAGE OF TRADE.
* IN NO EVENT SHALL HYGON OR ITS LICENSORS BE LIABLE FOR ANY DAMAGES WHATSOEVER
* (INCLUDING, WITHOUT LIMITATION, DAMAGES FOR LOSS OF PROFITS, BUSINESS
* INTERRUPTION, OR LOSS OF INFORMATION) ARISING OUT OF HYGON'S NEGLIGENCE,
* GROSS NEGLIGENCE, THE USE OF OR INABILITY TO USE THE MATERIALS OR ANY OTHER
* RELATED INFORMATION PROVIDED TO YOU BY HYGON, EVEN IF HYGON HAS BEEN ADVISED OF
* THE POSSIBILITY OF SUCH DAMAGES.  BECAUSE SOME JURISDICTIONS PROHIBIT THE
* EXCLUSION OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES,
* THE ABOVE LIMITATION MAY NOT APPLY TO YOU.
* 
* HYGON does not assume any responsibility for any errors which may appear in
* the Materials or any other related information provided to you by HYGON, or
* result from use of the Materials or any related information.
* 
* You agree that you will not reverse engineer or decompile the Materials.
* 
* NO SUPPORT OBLIGATION: HYGON is not obligated to furnish, support, or make any
* further information, software, technical information, know-how, or show-how
* available to you.  Additionally, HYGON retains the right to modify the
* Materials at any time, without notice, and is not obligated to provide such
* modified Materials to you.
* 
* AMD GRANT HYGON DECLARATION: ADVANCED MICRO DEVICES, INC.(AMD) granted HYGON has
* the right to redistribute HYGON's Agesa version to BIOS Vendors and HYGON has
* the right to make the modified version available for use with HYGON's PRODUCT.
* ***************************************************************************
*
*/
  /*----------------------------------------------------------------------------------------*/
  /**
   *  Check if port support hotplug
   *
   *  Arg0 -  BDF
   */
  Method (procPcieIsPortHotplug, 1) {
    if (LNotEqual (LinkHotplug, 0x1)) {
      return (FALSE)
    }
    return (procPcieIsPort (Arg0))
  }


  /*----------------------------------------------------------------------------------------*/
  /**
   *  Hotplug
   *
   *  Arg0 -  ENABLE/DISABLE
   */

  Method (procPciePortHotplug, 1) {

    Name (varPmControl, 0)
    ALIB_DEBUG (" Disable ASPM on RC")
    Store (bfPmControl, varPmControl)
    Or (PciFun, ShiftLeft (PciDev, 3), Local1)
    //
    // Check if we plug in or unplug
    //
    if (LEqual (Arg0, ENABLE)) {
      ALIB_DEBUG (" Hotplug Insertion")
      // Store (0, bfLinkDis)
      Store (LinkStateReleaseTraining ,Local0)
    } else {
      ALIB_DEBUG (" Hotplug Removal")
      //
      // Disable ASPM on EP
      //
      procPcieEpAspm(DISABLE)
      Store (procPcieEpPciDwRd (0, 4), Local0)
      if (LNotEqual (Local0, 0xFFFFFFFF)) {
        procPcieEpPciDwWr (0, 4, And (Local0, Not (0x4)))
        Store (procPcieEpPciDwRd (1, 4), Local0)
        if (LNotEqual (Local0, 0xFFFFFFFF)) {
          procPcieEpPciDwWr (1, 4, And (Local0, Not (0x4)))
        }
      }
      //
      //procDxioServiceRequest (TBD, Local1, 0, 0, 0)
      //
      Store (1, bfLinkDis)
      Store (LinkStateDeviceNotPresent ,Local0)
    }

    //
    // Disable ASPM on RC
    //
    Store (0, bfPmControl)

    while (LNotEqual (Local0, LinkStateTrainingCompleted)) {
      if (LEqual (Local0, LinkStateReleaseTraining)) {
        ALIB_DEBUG (" LinkStateReleaseTraining")
        //
        //procDxioServiceRequest (41, Local1, 0, 0, 0)
        //
        // Determine new state of port from DXIO firmware
      }
      if (LEqual (Local0, LinkStateDeviceNotPresent)) {
        ALIB_DEBUG (" Device not Present")
        //
        // Dummy read to update link state
        //
        procPcieEpPciDwRd (0x0, 0x0)
        //
        //  Put training on hold
        //
        ALIB_DEBUG (" HoldTraining")
        //procDxioServiceRequest (??, Local1, 0, 0, 0)
        //
        // Remove overrides
        //
        Store (0x0, PcieLocalOverrideSpeed)
        Store (0x0, PcieLinkSafeMode)
        Store (0x0, PciePortRequest)
        //
        //  Return value
        //
        Store (0x0, Local2)
        //
        // Move to next state
        //
        Store (LinkStateTrainingCompleted, Local0)
      }
    }
    //
    // restore ASPM on RC
    //
    ALIB_DEBUG (" restore ASPM on RC")
    Store (varPmControl, bfPmControl)
    if (LNotEqual (varPmControl, 0)) {
      procPcieEpAspm(ENABLE)
    }
    return (Local2)
  }


